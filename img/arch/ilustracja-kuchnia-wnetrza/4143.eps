%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1404.i003.033.S.m004.c11.kitchen interior.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: ivan
%%CreationDate: 4/25/2014
%%BoundingBox: 0 0 515 400
%%HiResBoundingBox: 0 0 515 400
%%CropBox: 0 0 515 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">template</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2014-04-25T19:22:32+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-04-25T19:22:32+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-04-25T19:22:30+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AO87J86dirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVTO8H+4yL5J+rNTp/78/F9E7Zif5Ix/1cf+5SzNs+duxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxVRkuoI24u9GHbfG0iJLX161/34PuOC08Bd9etf9+D7jja8Bd9etf9&#xA;+D7jja8Bd9etf9+D7jja8Bd9etf9+D7jja8Bd9etf9+D7jja8Bd9etf9+D7jja8Bd9etf9+D7jja&#xA;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&#xA;v/kRJ/zTj/Jup/1Of+ll+pfzeH+fH5h//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:D07873528DCCE311B37C923BDA0CDC6F</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:D07873528DCCE311B37C923BDA0CDC6F</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:d921dfc6-e926-6f48-a02a-bca8913be2a9</stRef:instanceID>
            <stRef:documentID>xmp.did:d921dfc6-e926-6f48-a02a-bca8913be2a9</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:058F24A3598EE31196CDD07E1C5D6E57</stEvt:instanceID>
                  <stEvt:when>2014-02-05T16:35:39+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:72C86FB068C2E311B9E8F65303FCBED1</stEvt:instanceID>
                  <stEvt:when>2014-04-12T22:37:32+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B5A1DA8327C3E3119978F7C8F71DA31B</stEvt:instanceID>
                  <stEvt:when>2014-04-13T21:49:53+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B6A1DA8327C3E3119978F7C8F71DA31B</stEvt:instanceID>
                  <stEvt:when>2014-04-13T21:50:01+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:094ba2cd-e646-1d4e-82be-c741f13e39ce</stEvt:instanceID>
                  <stEvt:when>2014-04-19T16:05:47+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c3e9a0be-d5e5-4f49-af76-e2f16554035b</stEvt:instanceID>
                  <stEvt:when>2014-04-20T15:09:20+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fa650a02-39a8-d143-bb11-199946e614e2</stEvt:instanceID>
                  <stEvt:when>2014-04-20T22:28:43+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d921dfc6-e926-6f48-a02a-bca8913be2a9</stEvt:instanceID>
                  <stEvt:when>2014-04-24T20:54:09+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D07873528DCCE311B37C923BDA0CDC6F</stEvt:instanceID>
                  <stEvt:when>2014-04-25T19:22:32+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>515.000000</stDim:w>
            <stDim:h>400.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 11.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
515 400 li
515 0 li
cp
clp
515 0 mo
0 0 li
0 400 li
515 400 li
515 0 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.964706 .580392 .133333 rgb
f
515 0 mo
0 0 li
0 296.993 li
515 296.993 li
515 0 li
.0627451 .686275 .878431 rgb
f
190.082 100.369 mo
4.91694 100.369 li
4.91694 29.0371 li
190.082 29.0371 li
190.082 100.369 li
.0431373 .572549 .760784 rgb
f
105.495 296.993 mo
6.3716 296.993 li
6.3716 200.994 li
24.3604 200.994 li
23.9571 200.994 23.6299 200.667 23.6299 200.264 cv
23.6299 198.453 li
23.6299 198.049 23.9571 197.723 24.3604 197.723 cv
31.9244 197.723 li
31.5205 197.723 31.1929 197.396 31.1929 196.994 cv
31.1929 183.586 li
30.7871 183.106 30.5538 182.546 30.5538 181.944 cv
30.5538 180.187 32.5586 178.76 35.0312 178.76 cv
36.461 178.76 37.7319 179.237 38.5523 179.978 cv
45.3569 179.978 li
45.7602 179.978 46.0879 180.182 46.0879 180.429 cv
46.0879 181.494 li
46.0879 181.744 45.7602 181.944 45.3569 181.944 cv
39.5088 181.944 li
39.5088 182.546 39.2749 183.106 38.8692 183.586 cv
38.8692 191.584 li
43.374 188.861 60.5634 178.757 67.6885 178.757 cv
68.2638 178.757 68.7744 178.823 69.2065 178.964 cv
70.2495 179.305 71.6744 180.373 71.2173 183.215 cv
66.0694 183.215 li
66.0694 181.864 li
66.0694 181.864 54.4916 184.389 38.8692 195.647 cv
38.8692 196.994 li
38.8692 197.396 38.5414 197.723 38.1382 197.723 cv
77.4858 197.723 li
77.8892 197.723 78.2168 198.049 78.2168 198.453 cv
78.2168 200.264 li
78.2168 200.667 77.8892 200.994 77.4858 200.994 cv
97.4819 200.994 li
118.516 200.994 li
118.516 199.659 li
123.096 199.659 li
121.149 199.309 120.196 198.135 119.567 196.996 cv
119.238 197.241 118.859 197.385 118.453 197.385 cv
117.222 197.385 116.224 196.101 116.224 194.516 cv
116.224 192.932 117.222 191.647 118.453 191.647 cv
118.637 191.647 118.817 191.682 118.989 191.737 cv
119.108 191.087 119.238 190.674 119.238 190.674 cv
119.272 190.552 119.329 190.432 119.402 190.316 cv
129.214 190.316 li
129.279 190.43 129.336 190.547 129.378 190.674 cv
129.378 190.674 131.793 198.563 125.068 199.659 cv
129.679 199.659 li
129.679 200.994 li
143.435 200.994 li
142.075 200.994 137.588 199.732 137.969 195.563 cv
137.995 195.266 138.349 194.804 138.777 194.804 cv
138.855 194.804 138.935 194.819 139.017 194.854 cv
139.572 195.092 140.371 195.363 141.263 195.537 cv
140.904 194.436 140.705 193.286 140.705 192.099 cv
140.705 185.465 146.649 179.921 154.624 178.465 cv
154.951 176.472 156.675 174.946 158.766 174.946 cv
160.857 174.946 162.58 176.472 162.907 178.465 cv
170.882 179.921 176.828 185.465 176.828 192.099 cv
176.828 193.286 176.627 194.436 176.269 195.537 cv
177.16 195.363 177.958 195.092 178.515 194.854 cv
178.596 194.819 178.676 194.804 178.754 194.804 cv
179.182 194.804 179.537 195.266 179.563 195.563 cv
179.943 199.732 175.456 200.994 174.099 200.994 cv
194.109 200.994 li
192.493 204.762 li
105.495 204.762 li
105.495 296.993 li
118.859 192.675 mo
118.185 193.04 117.729 193.726 117.729 194.516 cv
117.729 195.484 118.414 196.3 119.348 196.551 cv
118.785 195.255 118.749 193.808 118.859 192.675 cv
f
200.627 185.804 mo
198.961 185.414 li
198.011 185.193 197.42 184.244 197.643 183.296 cv
197.834 182.482 198.561 181.934 199.364 181.934 cv
199.498 181.934 199.633 181.949 199.769 181.98 cv
202.04 182.512 li
200.627 185.804 li
f
503.542 296.993 mo
491.095 296.993 li
493.91 296.993 496.193 294.688 496.193 291.847 cv
496.193 160.891 li
385.408 160.891 li
385.408 155.33 li
385.408 148.597 li
385.408 92.6919 li
385.408 85.9576 li
385.408 82.999 387.812 80.6011 390.777 80.6011 cv
503.542 80.6011 li
506.508 80.6011 508.911 82.999 508.911 85.9576 cv
508.911 92.6919 li
508.911 148.597 li
508.911 155.33 li
508.911 291.637 li
508.911 294.595 506.508 296.993 503.542 296.993 cv
378.912 225.818 mo
378.912 225.818 li
378.912 204.762 li
370.372 204.762 li
368.844 200.994 li
378.912 200.994 li
378.912 225.818 li
363.565 187.977 mo
359.371 177.636 li
359.685 172.348 li
364.853 172.348 li
364.108 184.769 li
367.059 184.053 li
367.059 187.121 li
363.565 187.977 li
370.169 186.751 mo
370.169 183.299 li
372.923 182.631 li
372.923 167.256 li
365.158 167.256 li
365.086 168.464 li
359.913 168.464 li
357.493 168.464 li
355.651 168.464 li
353.521 163.213 li
359.453 163.213 li
362.852 163.213 li
365.399 163.213 li
376.2 163.213 li
376.2 185.091 li
370.169 186.751 li
f
458.317 80.6008 mo
458.193 80.6008 458.066 80.5987 457.939 80.5947 cv
445.571 80.1982 445.623 61.8658 445.623 61.8658 cv
455.883 61.8658 li
454.195 60.4712 451.557 58.8799 447.411 56.9986 cv
436.944 52.2465 444.964 46.7431 444.964 46.7431 cv
444.198 48.9907 441.652 49.4253 450.988 54.7808 cv
453.964 56.4883 455.819 58.3648 456.978 60.1308 cv
456.978 58.4253 li
455.921 57.0478 453.977 55.3433 450.479 53.0972 cv
442.978 48.2788 449.752 44.9502 449.752 44.9502 cv
448.912 46.5893 446.908 46.6396 453.475 51.7944 cv
455.135 53.0981 456.244 54.4047 456.978 55.6319 cv
456.978 46.6625 li
453.54 46.418 450.873 44.6743 450.873 42.5567 cv
450.873 40.271 453.976 38.4179 457.802 38.4179 cv
461.628 38.4179 464.73 40.271 464.73 42.5567 cv
464.73 44.6352 462.16 46.3511 458.815 46.6455 cv
458.815 55.6319 li
459.549 54.4047 460.656 53.0981 462.316 51.7944 cv
468.884 46.6396 466.88 46.5893 466.039 44.9502 cv
466.039 44.9502 472.815 48.2788 465.313 53.0972 cv
461.814 55.3433 459.87 57.0478 458.815 58.4253 cv
458.815 60.1308 li
459.973 58.3648 461.827 56.4883 464.805 54.7808 cv
474.14 49.4253 471.595 48.9907 470.828 46.7431 cv
470.828 46.7431 478.848 52.2465 468.382 56.9986 cv
464.237 58.8799 461.596 60.4712 459.909 61.8658 cv
470.256 61.8658 li
470.256 61.8658 470.309 80.6008 458.317 80.6008 cv
f
141.046 165.861 mo
139.821 165.579 138.552 162.726 138.456 158.628 cv
138.343 153.832 138.424 147.458 138.424 142.372 cv
138.424 137.821 139.353 135.689 140.113 134.734 cv
139.023 117.754 li
139.023 117.408 139.832 116.587 140.525 116.286 cv
134.465 116.286 li
135.226 116.709 136.184 118.205 136.184 118.811 cv
134.944 149.087 li
135.234 149.087 li
136.013 149.087 136.664 149.523 136.873 150.117 cv
136.948 150.319 li
136.948 163.53 li
136.948 163.749 136.737 163.927 136.474 163.927 cv
136.212 163.927 135.998 163.749 135.998 163.53 cv
135.998 151.948 li
135.366 151.948 li
135.366 163.53 li
135.366 163.749 135.154 163.927 134.892 163.927 cv
134.628 163.927 134.417 163.749 134.417 163.53 cv
134.417 151.948 li
133.784 151.948 li
133.784 163.53 li
133.784 163.749 133.571 163.927 133.309 163.927 cv
133.047 163.927 132.833 163.749 132.833 163.53 cv
132.833 151.948 li
132.201 151.948 li
132.201 163.53 li
132.201 163.749 131.988 163.927 131.726 163.927 cv
131.463 163.927 131.251 163.749 131.251 163.53 cv
131.251 150.319 li
131.327 150.117 li
131.537 149.523 132.187 149.087 132.966 149.087 cv
133.254 149.087 li
132.016 118.811 li
132.016 118.205 132.972 116.709 133.732 116.286 cv
123.998 116.286 li
124.818 116.667 125.83 117.915 125.83 118.426 cv
124.38 146.302 li
127.339 146.615 129.621 149.879 129.621 154.679 cv
129.621 159.159 126.151 164.458 123.567 164.458 cv
121.059 164.458 117.515 159.013 117.515 154.679 cv
117.515 149.879 119.799 146.615 122.754 146.302 cv
121.306 118.426 li
121.306 117.915 122.317 116.667 123.136 116.286 cv
117.725 116.286 li
118.869 116.79 119.671 117.97 119.671 119.346 cv
119.671 119.346 119.661 119.576 119.642 119.813 cv
119.624 120.015 119.425 120.355 119.063 120.388 cv
119.02 120.392 118.976 120.394 118.933 120.394 cv
118.622 120.394 118.336 120.285 118.308 120.012 cv
118.157 118.515 117.642 117.729 116.442 117.729 cv
115.168 117.729 114.708 118.65 114.708 120.684 cv
114.708 120.896 li
114.708 150.385 li
114.714 150.522 li
114.714 155.325 111.25 159.22 106.976 159.22 cv
102.703 159.22 99.2382 155.325 99.2382 150.522 cv
99.2461 150.347 li
113.299 150.347 li
113.299 120.864 li
113.299 119.346 li
113.299 117.97 114.1 116.79 115.244 116.286 cv
22.9761 116.286 li
22.2817 117.685 20.8496 118.656 19.1782 118.656 cv
16.8315 118.656 14.9282 116.758 14.9282 114.417 cv
14.9282 112.076 16.8315 110.179 19.1782 110.179 cv
20.8403 110.179 22.2647 111.139 22.9629 112.525 cv
170.916 112.525 li
171.615 111.139 173.039 110.179 174.701 110.179 cv
177.048 110.179 178.952 112.076 178.952 114.417 cv
178.952 116.758 177.048 118.656 174.701 118.656 cv
173.03 118.656 171.598 117.685 170.903 116.286 cv
148.404 116.286 li
148.934 116.576 149.544 117.344 149.544 117.668 cv
148.581 136.204 li
150.547 136.412 152.064 138.582 152.064 141.772 cv
152.064 144.752 149.759 148.276 148.039 148.276 cv
146.372 148.276 144.015 144.654 144.015 141.772 cv
144.015 138.582 145.533 136.412 147.499 136.204 cv
146.537 117.668 li
146.537 117.344 147.147 116.576 147.676 116.286 cv
141.441 116.286 li
142.135 116.587 142.944 117.408 142.944 117.754 cv
142.071 134.439 li
142.267 134.606 142.507 134.978 142.507 135.47 cv
142.507 164.404 li
142.507 165.209 141.853 165.861 141.046 165.861 cv
f
123.49 187.741 mo
124.816 187.498 125.413 186.319 123.356 184.615 cv
120.67 182.389 124.52 180.728 124.52 180.728 cv
124.317 180.855 122.465 181.926 124.453 183.92 cv
128.166 187.642 123.49 187.741 123.49 187.741 cv
f
120.926 186.564 mo
120.368 186.564 119.9 186.236 119.842 185.777 cv
119.778 185.268 120.244 184.791 120.881 184.71 cv
120.94 184.703 120.999 184.699 121.057 184.699 cv
121.619 184.699 122.091 185.028 122.148 185.488 cv
122.212 185.998 121.746 186.476 121.11 186.553 cv
121.048 186.561 120.987 186.564 120.926 186.564 cv
f
127.034 183.028 mo
126.5 183.028 126.05 182.715 125.995 182.274 cv
125.935 181.787 126.38 181.332 126.989 181.257 cv
127.048 181.249 127.107 181.246 127.165 181.246 cv
127.699 181.246 128.146 181.56 128.202 181.999 cv
128.262 182.485 127.818 182.941 127.207 183.018 cv
127.149 183.025 127.091 183.028 127.034 183.028 cv
f
362.177 76.9536 mo
348.153 76.9536 336.785 65.6142 336.785 51.628 cv
336.785 37.6406 348.153 26.2998 362.177 26.2998 cv
376.202 26.2998 387.569 37.6406 387.569 51.628 cv
387.569 65.6142 376.202 76.9536 362.177 76.9536 cv
f
367.059 187.121 mo
358.686 189.173 li
359.685 172.348 li
367.059 172.348 li
367.059 187.121 li
370.169 168.464 mo
359.913 168.464 li
357.493 168.464 li
354.267 168.464 li
322.81 168.464 li
329.63 178.713 li
333.488 204.762 li
357.763 204.762 li
358.475 192.74 li
370.169 189.483 li
370.169 168.464 li
.4 .8 .4 rgb
f
349.545 178.467 mo
349.691 178.467 349.814 178.336 349.814 178.172 cv
349.814 178.009 349.691 177.878 349.545 177.878 cv
348.235 177.878 li
348.235 175.681 li
349.36 175.681 li
349.609 175.681 349.814 175.551 349.814 175.388 cv
349.814 175.224 349.609 175.092 349.36 175.092 cv
348.235 175.092 li
348.235 173.023 li
348.235 172.649 347.962 172.348 347.623 172.348 cv
347.282 172.348 347.009 172.649 347.009 173.023 cv
347.009 175.092 li
342.852 175.092 li
342.604 175.092 342.399 175.224 342.399 175.388 cv
342.399 175.551 342.604 175.681 342.852 175.681 cv
347.009 175.681 li
347.009 177.878 li
345.7 177.878 li
345.551 177.878 345.433 178.009 345.433 178.172 cv
345.433 178.336 345.551 178.467 345.7 178.467 cv
347.009 178.467 li
347.009 180.663 li
342.852 180.663 li
342.604 180.663 342.399 180.794 342.399 180.957 cv
342.399 181.122 342.604 181.253 342.852 181.253 cv
347.009 181.253 li
347.009 183.448 li
345.7 183.448 li
345.551 183.448 345.433 183.58 345.433 183.744 cv
345.433 183.907 345.551 184.039 345.7 184.039 cv
347.009 184.039 li
347.009 186.233 li
342.852 186.233 li
342.604 186.233 342.399 186.365 342.399 186.529 cv
342.399 186.691 342.604 186.823 342.852 186.823 cv
347.009 186.823 li
347.009 189.02 li
345.7 189.02 li
345.551 189.02 345.433 189.151 345.433 189.314 cv
345.433 189.479 345.551 189.608 345.7 189.608 cv
347.009 189.608 li
347.009 191.804 li
342.852 191.804 li
342.604 191.804 342.399 191.937 342.399 192.099 cv
342.399 192.263 342.604 192.395 342.852 192.395 cv
347.009 192.395 li
347.009 194.591 li
345.7 194.591 li
345.551 194.591 345.433 194.723 345.433 194.887 cv
345.433 195.05 345.551 195.18 345.7 195.18 cv
347.009 195.18 li
347.009 197.376 li
342.852 197.376 li
342.604 197.376 342.399 197.508 342.399 197.671 cv
342.399 197.834 342.604 197.966 342.852 197.966 cv
347.009 197.966 li
347.009 200.162 li
345.7 200.162 li
345.551 200.162 345.433 200.294 345.433 200.457 cv
345.433 200.618 345.551 200.751 345.7 200.751 cv
347.009 200.751 li
347.009 201.216 li
347.009 201.588 347.282 201.893 347.623 201.893 cv
347.962 201.893 348.235 201.588 348.235 201.216 cv
348.235 200.751 li
349.545 200.751 li
349.691 200.751 349.814 200.618 349.814 200.457 cv
349.814 200.294 349.691 200.162 349.545 200.162 cv
348.235 200.162 li
348.235 197.966 li
349.36 197.966 li
349.609 197.966 349.814 197.834 349.814 197.671 cv
349.814 197.508 349.609 197.376 349.36 197.376 cv
348.235 197.376 li
348.235 195.18 li
349.545 195.18 li
349.691 195.18 349.814 195.05 349.814 194.887 cv
349.814 194.723 349.691 194.591 349.545 194.591 cv
348.235 194.591 li
348.235 192.395 li
349.36 192.395 li
349.609 192.395 349.814 192.263 349.814 192.099 cv
349.814 191.937 349.609 191.804 349.36 191.804 cv
348.235 191.804 li
348.235 189.608 li
349.545 189.608 li
349.691 189.608 349.814 189.479 349.814 189.314 cv
349.814 189.151 349.691 189.02 349.545 189.02 cv
348.235 189.02 li
348.235 186.823 li
349.36 186.823 li
349.609 186.823 349.814 186.691 349.814 186.529 cv
349.814 186.365 349.609 186.233 349.36 186.233 cv
348.235 186.233 li
348.235 184.039 li
349.545 184.039 li
349.691 184.039 349.814 183.907 349.814 183.744 cv
349.814 183.58 349.691 183.448 349.545 183.448 cv
348.235 183.448 li
348.235 181.253 li
349.36 181.253 li
349.609 181.253 349.814 181.122 349.814 180.957 cv
349.814 180.794 349.609 180.663 349.36 180.663 cv
348.235 180.663 li
348.235 178.467 li
349.545 178.467 li
1 1 1 rgb
f
317.071 190.29 mo
314.869 190.29 li
314.869 175.419 li
317.071 175.419 li
317.071 190.29 li
1 .8 0 rgb
f
326.037 203.855 mo
326.037 189.154 li
326.037 184.623 322.396 180.95 317.905 180.95 cv
314.18 180.95 li
309.688 180.95 306.048 184.623 306.048 189.154 cv
306.048 203.855 li
326.037 203.855 li
f
328.407 203.226 mo
328.407 204.074 327.523 204.762 326.431 204.762 cv
305.653 204.762 li
304.562 204.762 303.677 204.074 303.677 203.226 cv
303.677 202.377 304.562 201.689 305.653 201.689 cv
326.431 201.689 li
327.523 201.689 328.407 202.377 328.407 203.226 cv
1 1 1 rgb
f
323.1 191.947 mo
323.1 195.879 319.94 199.068 316.041 199.068 cv
312.145 199.068 308.983 195.879 308.983 191.947 cv
308.983 188.014 312.145 184.824 316.041 184.824 cv
319.94 184.824 323.1 188.014 323.1 191.947 cv
f
303.159 173.967 mo
305.13 175.664 310.153 176.872 316.041 176.872 cv
321.931 176.872 326.955 175.664 328.926 173.967 cv
303.159 173.967 li
f
322.604 191.947 mo
322.604 192.185 322.413 192.377 322.18 192.377 cv
320.715 192.377 li
320.479 192.377 320.289 192.185 320.289 191.947 cv
320.289 191.71 320.479 191.518 320.715 191.518 cv
322.18 191.518 li
322.413 191.518 322.604 191.71 322.604 191.947 cv
1 .8 0 rgb
f
311.708 191.947 mo
311.708 192.185 311.516 192.377 311.281 192.377 cv
309.817 192.377 li
309.584 192.377 309.393 192.185 309.393 191.947 cv
309.393 191.71 309.584 191.518 309.817 191.518 cv
311.281 191.518 li
311.516 191.518 311.708 191.71 311.708 191.947 cv
f
316.041 185.28 mo
316.277 185.28 316.467 185.474 316.467 185.71 cv
316.467 187.188 li
316.467 187.423 316.277 187.617 316.041 187.617 cv
315.808 187.617 315.617 187.423 315.617 187.188 cv
315.617 185.71 li
315.617 185.474 315.808 185.28 316.041 185.28 cv
f
316.041 196.276 mo
316.277 196.276 316.467 196.469 316.467 196.706 cv
316.467 198.183 li
316.467 198.42 316.277 198.612 316.041 198.612 cv
315.808 198.612 315.617 198.42 315.617 198.183 cv
315.617 196.706 li
315.617 196.469 315.808 196.276 316.041 196.276 cv
f
317.144 191.947 mo
317.133 191.917 li
317.112 191.722 316.041 188.898 316.041 188.898 cv
316.041 188.898 314.971 191.722 314.952 191.917 cv
314.94 191.947 li
314.948 191.947 li
314.94 192.028 li
314.94 192.641 315.433 193.139 316.041 193.139 cv
316.65 193.139 317.144 192.641 317.144 192.028 cv
317.136 191.947 li
317.144 191.947 li
f
206.144 296.993 mo
105.495 296.993 li
105.495 204.762 li
206.144 204.762 li
206.144 296.993 li
.905882 .843137 .713726 rgb
f
153.481 236.59 mo
109.912 236.59 li
109.912 211.996 li
153.481 211.996 li
153.481 236.59 li
cp
.941176 .34902 .145098 rgb
f
157.732 236.59 mo
201.302 236.59 li
201.302 211.996 li
157.732 211.996 li
157.732 236.59 li
f
153.481 264.44 mo
109.912 264.44 li
109.912 239.847 li
153.481 239.847 li
153.481 264.44 li
cp
f
157.732 264.44 mo
201.302 264.44 li
201.302 239.847 li
157.732 239.847 li
157.732 264.44 li
f
153.481 292.29 mo
109.912 292.29 li
109.912 267.695 li
153.481 267.695 li
153.481 292.29 li
cp
f
157.732 292.29 mo
201.302 292.29 li
201.302 267.695 li
157.732 267.695 li
157.732 292.29 li
f
150.094 219.006 mo
150.094 220.909 148.681 222.45 146.938 222.45 cv
145.194 222.45 143.781 220.909 143.781 219.006 cv
143.781 217.104 145.194 215.563 146.938 215.563 cv
148.681 215.563 150.094 217.104 150.094 219.006 cv
cp
.133333 .117647 .121569 rgb
f
167.436 219.006 mo
167.436 220.909 166.022 222.45 164.28 222.45 cv
162.536 222.45 161.123 220.909 161.123 219.006 cv
161.123 217.104 162.536 215.563 164.28 215.563 cv
166.022 215.563 167.436 217.104 167.436 219.006 cv
cp
f
150.094 247.433 mo
150.094 249.336 148.681 250.877 146.938 250.877 cv
145.194 250.877 143.781 249.336 143.781 247.433 cv
143.781 245.531 145.194 243.989 146.938 243.989 cv
148.681 243.989 150.094 245.531 150.094 247.433 cv
cp
f
167.436 247.433 mo
167.436 249.336 166.022 250.877 164.28 250.877 cv
162.536 250.877 161.123 249.336 161.123 247.433 cv
161.123 245.531 162.536 243.989 164.28 243.989 cv
166.022 243.989 167.436 245.531 167.436 247.433 cv
cp
f
150.094 274.179 mo
150.094 276.079 148.681 277.62 146.938 277.62 cv
145.194 277.62 143.781 276.079 143.781 274.179 cv
143.781 272.274 145.194 270.733 146.938 270.733 cv
148.681 270.733 150.094 272.274 150.094 274.179 cv
cp
f
167.435 274.179 mo
167.435 276.079 166.022 277.62 164.28 277.62 cv
162.536 277.62 161.123 276.079 161.123 274.179 cv
161.123 272.274 162.536 270.733 164.28 270.733 cv
166.022 270.733 167.435 272.274 167.435 274.179 cv
f
193.43 108.087 mo
17.5947 108.087 li
17.5947 39.5552 li
193.43 39.5552 li
193.43 108.087 li
cp
.905882 .843137 .713726 rgb
f
102.487 102.22 mo
22.312 102.22 li
22.312 45.9395 li
102.487 45.9395 li
102.487 102.22 li
cp
.964706 .580392 .133333 rgb
f
107.793 102.22 mo
187.968 102.22 li
187.968 45.9395 li
107.793 45.9395 li
107.793 102.22 li
cp
f
65.3721 92.3604 mo
65.3721 94.5127 63.7734 96.2578 61.7998 96.2578 cv
59.8267 96.2578 58.228 94.5127 58.228 92.3604 cv
58.228 90.207 59.8267 88.4624 61.7998 88.4624 cv
63.7734 88.4624 65.3721 90.207 65.3721 92.3604 cv
cp
.133333 .117647 .121569 rgb
f
152.053 92.3604 mo
152.053 94.5127 150.454 96.2578 148.48 96.2578 cv
146.507 96.2578 144.909 94.5127 144.909 92.3604 cv
144.909 90.207 146.507 88.4624 148.48 88.4624 cv
150.454 88.4624 152.053 90.207 152.053 92.3604 cv
cp
f
378.912 296.993 mo
278.265 296.993 li
278.265 204.762 li
378.912 204.762 li
378.912 296.993 li
.905882 .843137 .713726 rgb
f
326.251 236.59 mo
282.682 236.59 li
282.682 211.996 li
326.251 211.996 li
326.251 236.59 li
.941176 .34902 .145098 rgb
f
330.502 236.59 mo
374.071 236.59 li
374.071 211.996 li
330.502 211.996 li
330.502 236.59 li
f
326.251 264.44 mo
282.682 264.44 li
282.682 239.847 li
326.251 239.847 li
326.251 264.44 li
f
330.502 264.44 mo
374.071 264.44 li
374.071 239.847 li
330.502 239.847 li
330.502 264.44 li
f
326.251 292.29 mo
282.682 292.29 li
282.682 267.695 li
326.251 267.695 li
326.251 292.29 li
f
330.502 292.29 mo
374.071 292.29 li
374.071 267.695 li
330.502 267.695 li
330.502 292.29 li
f
322.862 219.006 mo
322.862 220.909 321.451 222.45 319.706 222.45 cv
317.964 222.45 316.551 220.909 316.551 219.006 cv
316.551 217.104 317.964 215.563 319.706 215.563 cv
321.451 215.563 322.862 217.104 322.862 219.006 cv
.133333 .117647 .121569 rgb
f
340.205 219.006 mo
340.205 220.909 338.793 222.45 337.048 222.45 cv
335.306 222.45 333.893 220.909 333.893 219.006 cv
333.893 217.104 335.306 215.563 337.048 215.563 cv
338.793 215.563 340.205 217.104 340.205 219.006 cv
f
322.862 247.433 mo
322.862 249.336 321.451 250.877 319.706 250.877 cv
317.964 250.877 316.551 249.336 316.551 247.433 cv
316.551 245.531 317.964 243.989 319.706 243.989 cv
321.451 243.989 322.862 245.531 322.862 247.433 cv
f
340.205 247.433 mo
340.205 249.336 338.793 250.877 337.048 250.877 cv
335.306 250.877 333.893 249.336 333.893 247.433 cv
333.893 245.531 335.306 243.989 337.048 243.989 cv
338.793 243.989 340.205 245.531 340.205 247.433 cv
f
322.862 274.179 mo
322.862 276.079 321.451 277.62 319.706 277.62 cv
317.964 277.62 316.551 276.079 316.551 274.179 cv
316.551 272.274 317.964 270.733 319.706 270.733 cv
321.451 270.733 322.862 272.274 322.862 274.179 cv
f
340.205 274.179 mo
340.205 276.079 338.793 277.62 337.048 277.62 cv
335.306 277.62 333.893 276.079 333.893 274.179 cv
333.893 272.274 335.306 270.733 337.048 270.733 cv
338.793 270.733 340.205 272.274 340.205 274.179 cv
f
167.688 183.771 mo
167.688 185.999 165.899 187.806 163.691 187.806 cv
161.484 187.806 159.693 185.999 159.693 183.771 cv
159.693 181.542 161.484 179.736 163.691 179.736 cv
165.899 179.736 167.688 181.542 167.688 183.771 cv
cp
.4 .8 .4 rgb
f
180.024 200.332 mo
180.552 199.032 180.843 197.652 180.843 196.216 cv
180.843 188.777 173.163 182.749 163.691 182.749 cv
154.22 182.749 146.542 188.777 146.542 196.216 cv
146.542 197.652 146.829 199.032 147.358 200.332 cv
180.024 200.332 li
cp
1 .8 0 rgb
f
183.44 199.545 mo
183.412 199.206 182.946 198.647 182.445 198.863 cv
181.513 199.266 179.893 199.815 178.251 199.659 cv
149.132 199.659 li
147.488 199.815 145.87 199.266 144.937 198.863 cv
144.436 198.647 143.972 199.206 143.942 199.545 cv
143.58 203.55 147.842 204.762 149.132 204.762 cv
178.251 204.762 li
179.54 204.762 183.802 203.55 183.44 199.545 cv
cp
.4 .8 .4 rgb
f
158.058 187.817 mo
158.058 188.824 157.25 189.641 156.251 189.641 cv
155.253 189.641 154.445 188.824 154.445 187.817 cv
154.445 186.811 155.253 185.994 156.251 185.994 cv
157.25 185.994 158.058 186.811 158.058 187.817 cv
cp
1 1 1 rgb
f
157.327 147.864 mo
157.327 150.728 155.138 154.113 153.505 154.113 cv
151.922 154.113 149.683 150.635 149.683 147.864 cv
149.683 144.799 151.125 142.715 152.991 142.515 cv
152.079 124.707 li
152.079 124.319 152.977 123.262 153.505 123.262 cv
154.035 123.262 154.935 124.319 154.935 124.707 cv
154.02 142.515 li
155.886 142.715 157.327 144.799 157.327 147.864 cv
cp
f
130.266 169.661 mo
127.884 169.661 124.519 164.428 124.519 160.266 cv
124.519 155.653 126.687 152.519 129.494 152.217 cv
128.119 125.436 li
128.119 124.853 129.471 123.262 130.266 123.262 cv
131.063 123.262 132.413 124.853 132.413 125.436 cv
131.039 152.217 li
133.848 152.519 136.014 155.653 136.014 160.266 cv
136.014 164.57 132.72 169.661 130.266 169.661 cv
cp
f
142.522 169.149 mo
142.275 169.149 142.071 168.979 142.071 168.769 cv
142.071 157.642 li
141.471 157.642 li
141.471 168.769 li
141.471 168.979 141.269 169.149 141.02 169.149 cv
140.771 169.149 140.569 168.979 140.569 168.769 cv
140.569 157.642 li
139.969 157.642 li
139.969 168.769 li
139.969 168.979 139.766 169.149 139.516 169.149 cv
139.269 169.149 139.065 168.979 139.065 168.769 cv
139.065 157.642 li
138.466 157.642 li
138.466 168.769 li
138.466 168.979 138.263 169.149 138.014 169.149 cv
137.765 169.149 137.563 168.979 137.563 168.769 cv
137.563 156.076 li
137.635 155.882 li
137.834 155.312 138.451 154.893 139.191 154.893 cv
139.465 154.893 li
138.289 125.805 li
138.289 125.123 139.534 123.262 140.267 123.262 cv
141 123.262 142.248 125.123 142.248 125.805 cv
141.07 154.893 li
141.344 154.893 li
142.085 154.893 142.702 155.312 142.901 155.882 cv
142.973 156.076 li
142.973 168.769 li
142.973 168.979 142.773 169.149 142.522 169.149 cv
cp
f
148.252 141.81 mo
148.252 169.608 li
148.252 170.382 147.63 171.008 146.864 171.008 cv
145.702 170.737 144.496 167.995 144.404 164.058 cv
144.298 159.452 144.375 153.329 144.375 148.441 cv
144.375 144.069 145.257 142.022 145.978 141.104 cv
144.944 124.79 li
144.944 124.38 146.115 123.262 146.805 123.262 cv
147.495 123.262 148.667 124.38 148.667 124.79 cv
147.838 140.819 li
148.023 140.979 148.252 141.337 148.252 141.81 cv
cp
f
123.541 123.128 mo
121.869 123.128 120.515 124.557 120.515 126.319 cv
120.515 127.777 li
120.515 156.104 li
107.17 156.104 li
107.163 156.271 li
107.163 160.887 110.453 164.628 114.511 164.628 cv
118.569 164.628 121.859 160.887 121.859 156.271 cv
121.853 156.141 li
121.853 127.808 li
121.853 127.604 li
121.853 125.65 122.291 124.765 123.5 124.765 cv
124.64 124.765 125.129 125.521 125.272 126.958 cv
125.303 127.258 125.649 127.352 125.989 127.32 cv
126.333 127.289 126.522 126.962 126.539 126.768 cv
126.557 126.54 126.566 126.319 126.566 126.319 cv
126.566 124.557 125.211 123.128 123.541 123.128 cv
cp
f
278.264 212.42 mo
206.144 212.42 li
206.144 200.024 li
278.264 200.024 li
278.264 212.42 li
.733333 .741176 .74902 rgb
f
278.264 296.993 mo
206.144 296.993 li
206.144 284.597 li
278.264 284.597 li
278.264 296.993 li
.133333 .117647 .121569 rgb
f
278.264 290.795 mo
206.144 290.795 li
206.144 209.221 li
278.264 209.221 li
278.264 290.795 li
.898039 .905882 .913725 rgb
f
269.744 268.003 mo
269.744 275.952 263.357 282.397 255.479 282.397 cv
228.931 282.397 li
221.052 282.397 214.664 275.952 214.664 268.003 cv
214.664 248.408 li
214.664 240.458 221.052 234.014 228.931 234.014 cv
255.479 234.014 li
263.357 234.014 269.744 240.458 269.744 248.408 cv
269.744 268.003 li
.733333 .741176 .74902 rgb
f
228.93 234.644 mo
221.408 234.644 215.288 240.818 215.288 248.408 cv
215.288 268.003 li
215.288 275.592 221.408 281.768 228.93 281.768 cv
255.479 281.768 li
263 281.768 269.121 275.592 269.121 268.003 cv
269.121 248.408 li
269.121 240.818 263 234.644 255.479 234.644 cv
228.93 234.644 li
255.479 283.027 mo
228.93 283.027 li
220.719 283.027 214.039 276.287 214.039 268.003 cv
214.039 248.408 li
214.039 240.123 220.719 233.383 228.93 233.383 cv
255.479 233.383 li
263.69 233.383 270.369 240.123 270.369 248.408 cv
270.369 268.003 li
270.369 276.287 263.69 283.027 255.479 283.027 cv
1 1 1 rgb
f
273.112 227.069 mo
273.112 228.283 272.135 229.268 270.932 229.268 cv
213.475 229.268 li
212.271 229.268 211.293 228.283 211.293 227.069 cv
211.293 225.854 212.271 224.869 213.475 224.869 cv
270.932 224.869 li
272.135 224.869 273.112 225.854 273.112 227.069 cv
.133333 .117647 .121569 rgb
f
218.427 216.019 mo
218.427 218.005 216.83 219.618 214.86 219.618 cv
212.89 219.618 211.293 218.005 211.293 216.019 cv
211.293 214.031 212.89 212.42 214.86 212.42 cv
216.83 212.42 218.427 214.031 218.427 216.019 cv
1 1 1 rgb
f
229.126 216.019 mo
229.126 218.005 227.529 219.618 225.56 219.618 cv
223.59 219.618 221.993 218.005 221.993 216.019 cv
221.993 214.031 223.59 212.42 225.56 212.42 cv
227.529 212.42 229.126 214.031 229.126 216.019 cv
f
262.809 216.019 mo
262.809 218.005 261.213 219.618 259.242 219.618 cv
257.274 219.618 255.677 218.005 255.677 216.019 cv
255.677 214.031 257.274 212.42 259.242 212.42 cv
261.213 212.42 262.809 214.031 262.809 216.019 cv
f
273.508 216.019 mo
273.508 218.005 271.912 219.618 269.943 219.618 cv
267.972 219.618 266.376 218.005 266.376 216.019 cv
266.376 214.031 267.972 212.42 269.943 212.42 cv
271.912 212.42 273.508 214.031 273.508 216.019 cv
f
245.772 216.019 mo
245.772 218.005 244.175 219.618 242.206 219.618 cv
240.234 219.618 238.64 218.005 238.64 216.019 cv
238.64 214.031 240.234 212.42 242.206 212.42 cv
244.175 212.42 245.772 214.031 245.772 216.019 cv
f
264.693 198.775 mo
264.693 195.94 li
261.977 195.94 li
261.977 198.775 li
258.684 198.775 li
258.684 195.94 li
255.969 195.94 li
255.969 198.775 li
252.673 198.775 li
252.673 195.94 li
249.958 195.94 li
249.958 198.775 li
234.644 198.775 li
234.644 195.94 li
231.929 195.94 li
231.929 198.775 li
228.633 198.775 li
228.633 195.94 li
225.919 195.94 li
225.919 198.775 li
222.624 198.775 li
222.624 195.94 li
219.909 195.94 li
219.909 198.775 li
206.145 198.775 li
206.145 204.762 li
278.265 204.762 li
278.265 198.775 li
264.693 198.775 li
.133333 .117647 .121569 rgb
f
272.149 181.298 mo
272.149 182.634 271.311 183.716 270.276 183.716 cv
269.91 183.716 li
269.91 178.776 li
270.276 178.776 li
271.311 178.776 272.149 179.859 272.149 181.195 cv
272.149 181.298 li
245.095 183.716 mo
244.727 183.716 li
243.694 183.716 242.855 182.634 242.855 181.298 cv
242.855 181.195 li
242.855 179.859 243.694 178.776 244.727 178.776 cv
245.095 178.776 li
245.095 183.716 li
270.847 177.54 mo
269.91 177.54 li
269.91 173.967 li
255.474 173.967 li
245.407 173.967 li
245.095 173.967 li
245.095 177.54 li
244.159 177.54 li
242.607 177.54 241.349 179.165 241.349 181.169 cv
241.349 181.325 li
241.349 183.328 242.607 184.953 244.159 184.953 cv
245.095 184.953 li
245.095 195.94 li
245.407 195.94 li
255.474 195.94 li
269.91 195.94 li
269.91 184.953 li
270.847 184.953 li
272.396 184.953 273.656 183.328 273.656 181.325 cv
273.656 181.169 li
273.656 179.165 272.396 177.54 270.847 177.54 cv
1 .8 0 rgb
f
262.625 169.907 mo
262.625 169.907 256.495 167.636 264.945 162.714 cv
269.916 159.82 267.519 156.224 267.519 156.224 cv
267.519 156.224 272.957 160.06 268.335 164.031 cv
266.929 165.239 262.032 165.959 262.625 169.907 cv
1 1 1 rgb
f
217.73 190.067 mo
202.628 186.496 li
201.725 186.283 200.821 186.848 200.609 187.759 cv
200.398 188.67 200.958 189.582 201.861 189.794 cv
214.069 192.684 li
217.033 195.94 li
237.172 195.94 li
240.136 190.067 li
217.73 190.067 li
.839216 .101961 .121569 rgb
f
223.784 186.512 mo
223.784 186.512 217.532 184.035 226.149 178.668 cv
231.217 175.512 228.775 171.589 228.775 171.589 cv
228.775 171.589 234.32 175.772 229.607 180.104 cv
228.171 181.422 223.179 182.207 223.784 186.512 cv
1 1 1 rgb
f
230.862 187.995 mo
230.862 187.995 226.019 186.075 232.695 181.918 cv
236.62 179.473 234.73 176.434 234.73 176.434 cv
234.73 176.434 239.023 179.676 235.373 183.029 cv
234.261 184.051 230.395 184.658 230.862 187.995 cv
f
253.836 168.464 mo
253.836 168.464 244.93 165.166 257.205 158.018 cv
264.423 153.813 260.946 148.59 260.946 148.59 cv
260.946 148.59 268.843 154.163 262.131 159.93 cv
260.084 161.685 252.975 162.729 253.836 168.464 cv
f
496.193 100.711 mo
496.193 97.8696 493.91 95.5654 491.095 95.5654 cv
384.012 95.5654 li
381.195 95.5654 378.912 97.8696 378.912 100.711 cv
378.912 160.891 li
496.193 160.891 li
496.193 100.711 li
cp
.133333 .117647 .121569 rgb
f
496.193 94.2407 mo
496.193 91.3984 493.91 89.0947 491.095 89.0947 cv
384.012 89.0947 li
381.195 89.0947 378.912 91.3984 378.912 94.2407 cv
378.912 154.422 li
496.193 154.422 li
496.193 94.2407 li
cp
1 1 1 rgb
f
378.912 160.891 mo
378.912 291.847 li
378.912 294.688 381.195 296.993 384.012 296.993 cv
491.095 296.993 li
493.91 296.993 496.193 294.688 496.193 291.847 cv
496.193 160.891 li
378.912 160.891 li
f
407.932 169.779 mo
407.932 171.329 406.688 172.586 405.15 172.586 cv
390.604 172.586 li
389.068 172.586 387.822 171.329 387.822 169.779 cv
387.822 168.23 389.068 166.973 390.604 166.973 cv
405.15 166.973 li
406.688 166.973 407.932 168.23 407.932 169.779 cv
cp
.133333 .117647 .121569 rgb
f
407.932 145.573 mo
407.932 147.123 406.688 148.378 405.15 148.378 cv
390.604 148.378 li
389.068 148.378 387.822 147.123 387.822 145.573 cv
387.822 144.023 389.068 142.766 390.604 142.766 cv
405.15 142.766 li
406.688 142.766 407.932 144.023 407.932 145.573 cv
cp
f
105.495 296.993 mo
18.9761 296.993 li
18.9761 204.762 li
105.495 204.762 li
105.495 296.993 li
cp
.898039 .905882 .913725 rgb
f
100.422 292.29 mo
23.3931 292.29 li
23.3931 211.996 li
100.422 211.996 li
100.422 292.29 li
cp
1 1 1 rgb
f
95.4312 219.006 mo
95.4312 220.909 94.019 222.45 92.2759 222.45 cv
90.5317 222.45 89.1187 220.909 89.1187 219.006 cv
89.1187 217.104 90.5317 215.563 92.2759 215.563 cv
94.019 215.563 95.4312 217.104 95.4312 219.006 cv
cp
.133333 .117647 .121569 rgb
f
86.5068 201.619 mo
49.1416 201.619 li
49.5254 201.619 49.8354 201.307 49.8354 200.918 cv
49.8354 199.626 li
64.6709 188.81 75.6655 186.384 75.6655 186.384 cv
75.6655 187.682 li
80.5547 187.682 li
80.9883 184.951 79.6353 183.925 78.6445 183.598 cv
73.1519 181.784 54.46 192.894 49.8354 195.722 cv
49.8354 188.037 li
50.2212 187.577 50.4434 187.037 50.4434 186.462 cv
55.9966 186.462 li
56.3799 186.462 56.6914 186.268 56.6914 186.028 cv
56.6914 185.004 li
56.6914 184.766 56.3799 184.571 55.9966 184.571 cv
49.5352 184.571 li
48.7563 183.859 47.5488 183.401 46.1914 183.401 cv
43.8428 183.401 41.9395 184.771 41.9395 186.462 cv
41.9395 187.037 42.1616 187.577 42.5469 188.037 cv
42.5469 200.918 li
42.5469 201.307 42.8579 201.619 43.2412 201.619 cv
36.0586 201.619 li
35.6743 201.619 35.3647 201.933 35.3647 202.32 cv
35.3647 204.062 li
35.3647 204.448 35.6743 204.762 36.0586 204.762 cv
86.5068 204.762 li
86.8906 204.762 87.2012 204.448 87.2012 204.062 cv
87.2012 202.32 li
87.2012 201.933 86.8906 201.619 86.5068 201.619 cv
cp
f
414.082 312.534 mo
146.248 312.534 li
152.917 296.993 li
206.144 296.993 li
206.144 296.993 li
278.264 296.993 li
278.265 296.993 li
378.912 296.993 li
384.012 296.993 li
384.012 296.993 li
407.779 296.993 li
414.082 312.534 li
.976471 .694118 .0862745 rgb
f
279.418 204.762 mo
279.417 204.762 li
279.417 200.994 li
279.418 200.994 li
279.418 194.764 li
269.91 194.764 li
269.91 191.811 li
270.621 191.811 li
270.621 184.953 li
270.847 184.953 li
272.396 184.953 273.656 183.328 273.656 181.325 cv
273.656 181.169 li
273.656 180.613 273.559 180.087 273.386 179.616 cv
274.102 178.926 274.564 177.831 274.564 176.599 cv
274.564 176.435 li
274.564 174.351 273.24 172.66 271.606 172.66 cv
270.621 172.66 li
270.621 168.94 li
262.59 168.94 li
262.864 165.829 267.052 165.133 268.335 164.031 cv
270.886 161.839 270.372 159.688 269.4 158.201 cv
273.467 154.212 268.105 150.473 268.105 150.473 cv
268.105 150.473 270.627 154.216 265.393 157.229 cv
264.724 157.614 264.142 157.983 263.637 158.338 cv
265.249 156.155 265.016 154.074 264.21 152.4 cv
267.797 147.142 261.182 142.527 261.182 142.527 cv
261.182 142.527 263.165 145.471 261.184 148.77 cv
261.034 148.652 260.946 148.59 260.946 148.59 cv
260.946 148.59 261.016 148.694 261.114 148.884 cv
260.394 150.034 259.187 151.222 257.243 152.341 cv
248.412 157.422 249.99 160.635 251.876 162.16 cv
248.399 166.45 253.836 168.464 253.836 168.464 cv
253.836 168.464 li
253.836 168.464 li
253.067 163.343 258.655 161.962 261.316 160.475 cv
259.766 162.634 261.452 163.936 262.398 164.454 cv
259.846 166.587 260.295 168.066 261.142 168.94 cv
255.418 168.94 li
244.817 168.94 li
244.489 168.94 li
244.489 172.66 li
243.503 172.66 li
241.869 172.66 240.544 174.351 240.544 176.435 cv
240.544 176.599 li
240.544 177.787 240.974 178.848 241.647 179.54 cv
241.456 180.03 241.349 180.583 241.349 181.169 cv
241.349 181.325 li
241.349 183.328 242.607 184.953 244.159 184.953 cv
244.489 184.953 li
244.489 191.811 li
244.817 191.811 li
245.095 191.811 li
245.095 194.764 li
237.766 194.764 li
240.136 190.067 li
237.036 190.067 li
239.268 185.7 li
231.379 185.7 li
232.409 184.27 234.584 183.754 235.373 183.029 cv
238.095 180.529 236.401 178.091 235.362 177.012 cv
236.987 174.053 233.573 171.508 233.573 171.508 cv
233.573 171.508 235.565 174.671 231.431 177.216 cv
231.426 177.219 231.42 177.222 231.415 177.225 cv
231.809 175.393 230.842 173.779 229.97 172.752 cv
231.095 169.295 227.304 166.465 227.304 166.465 cv
227.304 166.465 229.874 170.55 224.538 173.834 cv
215.463 179.421 222.047 181.999 222.047 181.999 cv
221.41 177.517 226.668 176.699 228.179 175.328 cv
228.676 174.877 229.065 174.427 229.362 173.983 cv
229.327 175.353 228.66 177.104 226.149 178.668 cv
220.354 182.277 221.283 184.579 222.514 185.7 cv
215.671 185.7 li
202.04 182.512 li
266.581 32.0982 li
300.344 32.0982 li
353.521 163.213 li
326.327 163.213 li
329.862 168.464 li
322.81 168.464 li
323.127 168.94 li
305.634 168.94 li
307.571 170.589 312.305 171.793 317.967 171.946 cv
317.967 173.967 li
303.159 173.967 li
304.902 175.468 309.034 176.587 314.04 176.825 cv
311.439 177.87 309.47 180.153 308.868 182.942 cv
307.141 184.446 306.048 186.672 306.048 189.154 cv
306.048 200.994 li
279.418 200.994 li
279.418 204.762 li
280.232 46.001 mo
271.795 46.001 264.955 49.2818 264.955 53.3296 cv
264.955 57.3765 271.795 60.6567 280.232 60.6567 cv
288.671 60.6567 295.513 57.3765 295.513 53.3296 cv
295.513 49.2818 288.671 46.001 280.232 46.001 cv
203.471 204.762 mo
203.47 204.762 li
203.47 200.994 li
194.109 200.994 li
200.627 185.804 li
211.817 188.421 li
212.11 188.738 li
202.628 186.496 li
202.499 186.466 202.37 186.451 202.244 186.451 cv
201.481 186.451 200.791 186.978 200.609 187.759 cv
200.398 188.67 200.958 189.582 201.861 189.794 cv
214.069 192.684 li
215.962 194.764 li
203.472 194.764 li
203.472 196.061 li
203.471 196.061 li
203.471 204.762 li
368.844 200.994 mo
363.136 200.994 li
363.717 191.28 li
364.784 190.983 li
368.844 200.994 li
332.93 200.994 mo
330.141 200.994 li
331.291 200.994 332.223 200.277 332.223 199.395 cv
332.223 198.512 331.291 197.796 330.141 197.796 cv
329.726 197.796 li
329.726 184.749 li
329.726 180.523 326.646 177.013 322.603 176.329 cv
324.409 176.009 325.97 175.561 327.174 175.022 cv
329.63 178.713 li
332.93 200.994 li
229.177 185.7 mo
223.735 185.7 li
223.798 183.2 225.959 182.067 227.722 181.196 cv
227.571 182.785 229.501 183.541 229.501 183.541 cv
229.008 180.068 233.081 179.436 234.251 178.374 cv
234.601 178.057 234.881 177.741 235.102 177.428 cv
235.339 178.525 235.221 180.344 232.695 181.918 cv
230.163 183.495 229.288 184.75 229.177 185.7 cv
272.492 178.228 mo
272.029 177.795 271.461 177.54 270.847 177.54 cv
270.621 177.54 li
270.621 173.948 li
271.007 173.948 li
272.097 173.948 272.979 175.074 272.979 176.465 cv
272.979 176.571 li
272.979 177.206 272.795 177.785 272.492 178.228 cv
242.578 178.168 mo
242.299 177.734 242.131 177.178 242.131 176.571 cv
242.131 176.465 li
242.131 175.074 243.014 173.948 244.102 173.948 cv
244.489 173.948 li
244.489 177.54 li
244.159 177.54 li
243.573 177.54 243.029 177.772 242.578 178.168 cv
326.472 173.967 mo
320.284 173.967 li
320.284 171.95 li
321.909 171.911 323.459 171.786 324.889 171.588 cv
326.472 173.967 li
262.897 164.058 mo
262.891 161.125 266.102 160.119 267.998 159.184 cv
267.741 160.29 266.931 161.558 264.945 162.714 cv
264.135 163.186 263.458 163.634 262.897 164.058 cv
254.093 160.074 mo
255.214 157.72 258.089 156.541 260.271 155.538 cv
259.574 156.373 258.585 157.214 257.205 158.018 cv
255.961 158.742 254.934 159.427 254.093 160.074 cv
.156863 .776471 .831372 rgb
f
203.47 204.762 mo
192.493 204.762 li
194.109 200.994 li
203.47 200.994 li
203.47 204.762 li
.113725 .686274 .686274 rgb
f
278.265 296.993 mo
278.264 296.993 li
278.264 290.795 li
278.264 209.221 li
278.264 204.762 li
278.265 204.762 li
278.265 296.993 li
206.144 296.993 mo
206.144 296.993 li
206.144 204.762 li
203.471 204.762 li
203.471 196.061 li
203.472 196.061 li
203.472 194.764 li
215.962 194.764 li
217.033 195.94 li
219.909 195.94 li
219.909 198.775 li
206.145 198.775 li
206.145 200.024 li
206.144 200.024 li
206.144 212.42 li
206.144 284.597 li
206.144 296.993 li
279.417 204.762 mo
278.265 204.762 li
278.265 198.775 li
264.693 198.775 li
264.693 195.94 li
269.91 195.94 li
269.91 194.764 li
279.418 194.764 li
279.418 200.994 li
279.417 200.994 li
279.417 204.762 li
249.958 198.775 mo
234.644 198.775 li
234.644 195.94 li
237.172 195.94 li
237.766 194.764 li
245.095 194.764 li
245.095 195.94 li
245.407 195.94 li
249.958 195.94 li
249.958 198.775 li
270.621 191.811 mo
269.91 191.811 li
269.91 184.953 li
270.621 184.953 li
270.621 191.811 li
245.095 191.811 mo
244.817 191.811 li
244.489 191.811 li
244.489 184.953 li
245.095 184.953 li
245.095 191.811 li
237.036 190.067 mo
217.73 190.067 li
212.11 188.738 li
211.817 188.421 li
200.627 185.804 li
202.04 182.512 li
215.671 185.7 li
222.514 185.7 li
223.113 186.246 223.784 186.512 223.784 186.512 cv
223.784 186.512 li
223.784 186.512 li
223.744 186.226 223.728 185.956 223.735 185.7 cv
229.177 185.7 li
228.996 187.256 230.862 187.995 230.862 187.995 cv
230.862 187.995 li
230.862 187.995 li
230.726 187.025 230.956 186.286 231.379 185.7 cv
239.268 185.7 li
237.036 190.067 li
273.386 179.616 mo
273.183 179.061 272.873 178.584 272.492 178.228 cv
272.795 177.785 272.979 177.206 272.979 176.571 cv
272.979 176.465 li
272.979 175.074 272.097 173.948 271.007 173.948 cv
270.621 173.948 li
270.621 177.54 li
269.91 177.54 li
269.91 173.967 li
255.474 173.967 li
245.407 173.967 li
245.095 173.967 li
245.095 177.54 li
244.489 177.54 li
244.489 173.948 li
244.102 173.948 li
243.014 173.948 242.131 175.074 242.131 176.465 cv
242.131 176.571 li
242.131 177.178 242.299 177.734 242.578 178.168 cv
242.185 178.515 241.863 178.987 241.647 179.54 cv
240.974 178.848 240.544 177.787 240.544 176.599 cv
240.544 176.435 li
240.544 174.351 241.869 172.66 243.503 172.66 cv
244.489 172.66 li
244.489 168.94 li
244.817 168.94 li
255.418 168.94 li
261.142 168.94 li
261.773 169.591 262.625 169.907 262.625 169.907 cv
262.625 169.907 li
262.625 169.907 li
262.573 169.561 262.563 169.24 262.59 168.94 cv
270.621 168.94 li
270.621 172.66 li
271.606 172.66 li
273.24 172.66 274.564 174.351 274.564 176.435 cv
274.564 176.599 li
274.564 177.831 274.102 178.926 273.386 179.616 cv
f
262.398 164.454 mo
261.452 163.936 259.766 162.634 261.316 160.475 cv
261.635 160.297 261.912 160.117 262.131 159.93 cv
262.752 159.396 263.248 158.864 263.637 158.338 cv
264.142 157.983 264.724 157.614 265.393 157.229 cv
270.627 154.216 268.105 150.473 268.105 150.473 cv
268.105 150.473 273.467 154.212 269.4 158.201 cv
268.611 156.993 267.519 156.224 267.519 156.224 cv
267.519 156.224 268.384 157.521 267.998 159.184 cv
266.102 160.119 262.891 161.125 262.897 164.058 cv
262.719 164.192 262.553 164.325 262.398 164.454 cv
f
222.047 181.999 mo
222.047 181.999 215.463 179.421 224.538 173.834 cv
229.874 170.55 227.304 166.465 227.304 166.465 cv
227.304 166.465 231.095 169.295 229.97 172.752 cv
229.348 172.021 228.775 171.589 228.775 171.589 cv
228.775 171.589 229.397 172.588 229.362 173.983 cv
229.065 174.427 228.676 174.877 228.179 175.328 cv
226.668 176.699 221.41 177.517 222.047 181.999 cv
f
229.501 183.541 mo
229.501 183.541 227.571 182.785 227.722 181.196 cv
228.498 180.812 229.197 180.48 229.607 180.104 cv
230.676 179.121 231.217 178.146 231.415 177.225 cv
231.42 177.222 231.426 177.219 231.431 177.216 cv
235.565 174.671 233.573 171.508 233.573 171.508 cv
233.573 171.508 236.987 174.053 235.362 177.012 cv
235.008 176.643 234.73 176.434 234.73 176.434 cv
234.73 176.434 234.97 176.82 235.102 177.428 cv
234.881 177.741 234.601 178.057 234.251 178.374 cv
233.081 179.436 229.008 180.068 229.501 183.541 cv
f
251.876 162.16 mo
249.99 160.635 248.412 157.422 257.243 152.341 cv
259.187 151.222 260.394 150.034 261.114 148.884 cv
261.581 149.786 262.706 152.623 260.271 155.538 cv
258.089 156.541 255.214 157.72 254.093 160.074 cv
253.121 160.821 252.398 161.516 251.876 162.16 cv
264.21 152.4 mo
263.332 150.578 261.776 149.237 261.184 148.77 cv
263.165 145.471 261.182 142.527 261.182 142.527 cv
261.182 142.527 267.797 147.142 264.21 152.4 cv
f
384.012 296.993 mo
378.912 296.993 li
378.912 225.818 li
378.912 291.847 li
378.912 294.688 381.195 296.993 384.012 296.993 cv
370.372 204.762 mo
279.418 204.762 li
279.418 200.994 li
306.048 200.994 li
306.048 201.689 li
305.653 201.689 li
304.562 201.689 303.677 202.377 303.677 203.226 cv
303.677 204.074 304.562 204.762 305.653 204.762 cv
326.431 204.762 li
327.523 204.762 328.407 204.074 328.407 203.226 cv
328.407 202.377 327.523 201.689 326.431 201.689 cv
326.037 201.689 li
326.037 189.154 li
326.037 184.623 322.396 180.95 317.905 180.95 cv
317.071 180.95 li
317.071 176.86 li
319.063 176.811 320.937 176.625 322.603 176.329 cv
326.646 177.013 329.726 180.523 329.726 184.749 cv
329.726 197.796 li
330.141 197.796 li
331.291 197.796 332.223 198.512 332.223 199.395 cv
332.223 200.277 331.291 200.994 330.141 200.994 cv
332.93 200.994 li
333.488 204.762 li
357.763 204.762 li
358.475 192.74 li
363.717 191.28 li
363.136 200.994 li
368.844 200.994 li
370.372 204.762 li
358.686 189.173 mo
359.371 177.636 li
363.565 187.977 li
358.686 189.173 li
308.868 182.942 mo
309.47 180.153 311.439 177.87 314.04 176.825 cv
314.314 176.838 314.59 176.848 314.869 176.856 cv
314.869 180.95 li
314.18 180.95 li
312.149 180.95 310.293 181.701 308.868 182.942 cv
320.284 173.967 mo
317.967 173.967 li
317.967 171.946 li
312.305 171.793 307.571 170.589 305.634 168.94 cv
323.127 168.94 li
324.889 171.588 li
323.459 171.786 321.909 171.911 320.284 171.95 cv
320.284 173.967 li
355.651 168.464 mo
354.267 168.464 li
329.862 168.464 li
326.327 163.213 li
353.521 163.213 li
355.651 168.464 li
f
357.763 204.762 mo
333.488 204.762 li
332.93 200.994 li
329.63 178.713 li
327.174 175.022 li
327.894 174.7 328.486 174.346 328.926 173.967 cv
326.472 173.967 li
324.889 171.588 li
323.127 168.94 li
322.81 168.464 li
329.862 168.464 li
354.267 168.464 li
355.651 168.464 li
359.371 177.636 li
358.686 189.173 li
363.565 187.977 li
364.784 190.983 li
363.717 191.28 li
358.475 192.74 li
357.763 204.762 li
345.7 200.162 mo
345.551 200.162 345.433 200.294 345.433 200.457 cv
345.433 200.618 345.551 200.751 345.7 200.751 cv
347.009 200.751 li
347.009 201.216 li
347.009 201.588 347.282 201.893 347.623 201.893 cv
347.962 201.893 348.235 201.588 348.235 201.216 cv
348.235 200.751 li
349.545 200.751 li
349.691 200.751 349.814 200.618 349.814 200.457 cv
349.814 200.294 349.691 200.162 349.545 200.162 cv
348.235 200.162 li
348.235 197.966 li
349.36 197.966 li
349.609 197.966 349.814 197.834 349.814 197.671 cv
349.814 197.508 349.609 197.376 349.36 197.376 cv
348.235 197.376 li
348.235 195.18 li
349.545 195.18 li
349.691 195.18 349.814 195.05 349.814 194.887 cv
349.814 194.723 349.691 194.591 349.545 194.591 cv
348.235 194.591 li
348.235 192.395 li
349.36 192.395 li
349.609 192.395 349.814 192.263 349.814 192.099 cv
349.814 191.937 349.609 191.804 349.36 191.804 cv
348.235 191.804 li
348.235 189.608 li
349.545 189.608 li
349.691 189.608 349.814 189.479 349.814 189.314 cv
349.814 189.151 349.691 189.02 349.545 189.02 cv
348.235 189.02 li
348.235 186.823 li
349.36 186.823 li
349.609 186.823 349.814 186.691 349.814 186.529 cv
349.814 186.365 349.609 186.233 349.36 186.233 cv
348.235 186.233 li
348.235 184.039 li
349.545 184.039 li
349.691 184.039 349.814 183.907 349.814 183.744 cv
349.814 183.58 349.691 183.448 349.545 183.448 cv
348.235 183.448 li
348.235 181.253 li
349.36 181.253 li
349.609 181.253 349.814 181.122 349.814 180.957 cv
349.814 180.794 349.609 180.663 349.36 180.663 cv
348.235 180.663 li
348.235 178.467 li
349.545 178.467 li
349.691 178.467 349.814 178.336 349.814 178.172 cv
349.814 178.009 349.691 177.878 349.545 177.878 cv
348.235 177.878 li
348.235 175.681 li
349.36 175.681 li
349.609 175.681 349.814 175.551 349.814 175.388 cv
349.814 175.224 349.609 175.092 349.36 175.092 cv
348.235 175.092 li
348.235 173.023 li
348.235 172.649 347.962 172.348 347.623 172.348 cv
347.282 172.348 347.009 172.649 347.009 173.023 cv
347.009 175.092 li
342.852 175.092 li
342.604 175.092 342.399 175.224 342.399 175.388 cv
342.399 175.551 342.604 175.681 342.852 175.681 cv
347.009 175.681 li
347.009 177.878 li
345.7 177.878 li
345.551 177.878 345.433 178.009 345.433 178.172 cv
345.433 178.336 345.551 178.467 345.7 178.467 cv
347.009 178.467 li
347.009 180.663 li
342.852 180.663 li
342.604 180.663 342.399 180.794 342.399 180.957 cv
342.399 181.122 342.604 181.253 342.852 181.253 cv
347.009 181.253 li
347.009 183.448 li
345.7 183.448 li
345.551 183.448 345.433 183.58 345.433 183.744 cv
345.433 183.907 345.551 184.039 345.7 184.039 cv
347.009 184.039 li
347.009 186.233 li
342.852 186.233 li
342.604 186.233 342.399 186.365 342.399 186.529 cv
342.399 186.691 342.604 186.823 342.852 186.823 cv
347.009 186.823 li
347.009 189.02 li
345.7 189.02 li
345.551 189.02 345.433 189.151 345.433 189.314 cv
345.433 189.479 345.551 189.608 345.7 189.608 cv
347.009 189.608 li
347.009 191.804 li
342.852 191.804 li
342.604 191.804 342.399 191.937 342.399 192.099 cv
342.399 192.263 342.604 192.395 342.852 192.395 cv
347.009 192.395 li
347.009 194.591 li
345.7 194.591 li
345.551 194.591 345.433 194.723 345.433 194.887 cv
345.433 195.05 345.551 195.18 345.7 195.18 cv
347.009 195.18 li
347.009 197.376 li
342.852 197.376 li
342.604 197.376 342.399 197.508 342.399 197.671 cv
342.399 197.834 342.604 197.966 342.852 197.966 cv
347.009 197.966 li
347.009 200.162 li
345.7 200.162 li
.545098 .858823 .305882 rgb
f
347.623 201.893 mo
347.282 201.893 347.009 201.588 347.009 201.216 cv
347.009 200.751 li
345.7 200.751 li
345.551 200.751 345.433 200.618 345.433 200.457 cv
345.433 200.294 345.551 200.162 345.7 200.162 cv
347.009 200.162 li
347.009 197.966 li
342.852 197.966 li
342.604 197.966 342.399 197.834 342.399 197.671 cv
342.399 197.508 342.604 197.376 342.852 197.376 cv
347.009 197.376 li
347.009 195.18 li
345.7 195.18 li
345.551 195.18 345.433 195.05 345.433 194.887 cv
345.433 194.723 345.551 194.591 345.7 194.591 cv
347.009 194.591 li
347.009 192.395 li
342.852 192.395 li
342.604 192.395 342.399 192.263 342.399 192.099 cv
342.399 191.937 342.604 191.804 342.852 191.804 cv
347.009 191.804 li
347.009 189.608 li
345.7 189.608 li
345.551 189.608 345.433 189.479 345.433 189.314 cv
345.433 189.151 345.551 189.02 345.7 189.02 cv
347.009 189.02 li
347.009 186.823 li
342.852 186.823 li
342.604 186.823 342.399 186.691 342.399 186.529 cv
342.399 186.365 342.604 186.233 342.852 186.233 cv
347.009 186.233 li
347.009 184.039 li
345.7 184.039 li
345.551 184.039 345.433 183.907 345.433 183.744 cv
345.433 183.58 345.551 183.448 345.7 183.448 cv
347.009 183.448 li
347.009 181.253 li
342.852 181.253 li
342.604 181.253 342.399 181.122 342.399 180.957 cv
342.399 180.794 342.604 180.663 342.852 180.663 cv
347.009 180.663 li
347.009 178.467 li
345.7 178.467 li
345.551 178.467 345.433 178.336 345.433 178.172 cv
345.433 178.009 345.551 177.878 345.7 177.878 cv
347.009 177.878 li
347.009 175.681 li
342.852 175.681 li
342.604 175.681 342.399 175.551 342.399 175.388 cv
342.399 175.224 342.604 175.092 342.852 175.092 cv
347.009 175.092 li
347.009 173.023 li
347.009 172.649 347.282 172.348 347.623 172.348 cv
347.962 172.348 348.235 172.649 348.235 173.023 cv
348.235 175.092 li
349.36 175.092 li
349.609 175.092 349.814 175.224 349.814 175.388 cv
349.814 175.551 349.609 175.681 349.36 175.681 cv
348.235 175.681 li
348.235 177.878 li
349.545 177.878 li
349.691 177.878 349.814 178.009 349.814 178.172 cv
349.814 178.336 349.691 178.467 349.545 178.467 cv
348.235 178.467 li
348.235 180.663 li
349.36 180.663 li
349.609 180.663 349.814 180.794 349.814 180.957 cv
349.814 181.122 349.609 181.253 349.36 181.253 cv
348.235 181.253 li
348.235 183.448 li
349.545 183.448 li
349.691 183.448 349.814 183.58 349.814 183.744 cv
349.814 183.907 349.691 184.039 349.545 184.039 cv
348.235 184.039 li
348.235 186.233 li
349.36 186.233 li
349.609 186.233 349.814 186.365 349.814 186.529 cv
349.814 186.691 349.609 186.823 349.36 186.823 cv
348.235 186.823 li
348.235 189.02 li
349.545 189.02 li
349.691 189.02 349.814 189.151 349.814 189.314 cv
349.814 189.479 349.691 189.608 349.545 189.608 cv
348.235 189.608 li
348.235 191.804 li
349.36 191.804 li
349.609 191.804 349.814 191.937 349.814 192.099 cv
349.814 192.263 349.609 192.395 349.36 192.395 cv
348.235 192.395 li
348.235 194.591 li
349.545 194.591 li
349.691 194.591 349.814 194.723 349.814 194.887 cv
349.814 195.05 349.691 195.18 349.545 195.18 cv
348.235 195.18 li
348.235 197.376 li
349.36 197.376 li
349.609 197.376 349.814 197.508 349.814 197.671 cv
349.814 197.834 349.609 197.966 349.36 197.966 cv
348.235 197.966 li
348.235 200.162 li
349.545 200.162 li
349.691 200.162 349.814 200.294 349.814 200.457 cv
349.814 200.618 349.691 200.751 349.545 200.751 cv
348.235 200.751 li
348.235 201.216 li
348.235 201.588 347.962 201.893 347.623 201.893 cv
1 1 1 rgb
f
317.071 180.95 mo
314.869 180.95 li
314.869 176.856 li
315.255 176.867 315.646 176.872 316.041 176.872 cv
316.388 176.872 316.731 176.868 317.071 176.86 cv
317.071 180.95 li
1 .858823 0 rgb
f
326.037 201.689 mo
306.048 201.689 li
306.048 200.994 li
306.048 189.154 li
306.048 186.672 307.141 184.446 308.868 182.942 cv
310.293 181.701 312.149 180.95 314.18 180.95 cv
314.869 180.95 li
317.071 180.95 li
317.905 180.95 li
322.396 180.95 326.037 184.623 326.037 189.154 cv
326.037 201.689 li
316.041 184.824 mo
312.145 184.824 308.983 188.014 308.983 191.947 cv
308.983 195.879 312.145 199.068 316.041 199.068 cv
319.94 199.068 323.1 195.879 323.1 191.947 cv
323.1 188.014 319.94 184.824 316.041 184.824 cv
f
326.431 204.762 mo
305.653 204.762 li
304.562 204.762 303.677 204.074 303.677 203.226 cv
303.677 202.377 304.562 201.689 305.653 201.689 cv
306.048 201.689 li
326.037 201.689 li
326.431 201.689 li
327.523 201.689 328.407 202.377 328.407 203.226 cv
328.407 204.074 327.523 204.762 326.431 204.762 cv
1 1 1 rgb
f
316.041 199.068 mo
312.145 199.068 308.983 195.879 308.983 191.947 cv
308.983 188.014 312.145 184.824 316.041 184.824 cv
319.94 184.824 323.1 188.014 323.1 191.947 cv
323.1 195.879 319.94 199.068 316.041 199.068 cv
316.041 196.276 mo
315.808 196.276 315.617 196.469 315.617 196.706 cv
315.617 198.183 li
315.617 198.42 315.808 198.612 316.041 198.612 cv
316.277 198.612 316.467 198.42 316.467 198.183 cv
316.467 196.706 li
316.467 196.469 316.277 196.276 316.041 196.276 cv
316.041 188.898 mo
316.041 188.898 314.971 191.722 314.952 191.917 cv
314.94 191.947 li
314.948 191.947 li
314.94 192.028 li
314.94 192.641 315.433 193.139 316.041 193.139 cv
316.65 193.139 317.144 192.641 317.144 192.028 cv
317.136 191.947 li
317.144 191.947 li
317.133 191.917 li
317.112 191.722 316.041 188.898 316.041 188.898 cv
320.715 191.518 mo
320.479 191.518 320.289 191.71 320.289 191.947 cv
320.289 192.185 320.479 192.377 320.715 192.377 cv
322.18 192.377 li
322.413 192.377 322.604 192.185 322.604 191.947 cv
322.604 191.71 322.413 191.518 322.18 191.518 cv
320.715 191.518 li
309.817 191.518 mo
309.584 191.518 309.393 191.71 309.393 191.947 cv
309.393 192.185 309.584 192.377 309.817 192.377 cv
311.281 192.377 li
311.516 192.377 311.708 192.185 311.708 191.947 cv
311.708 191.71 311.516 191.518 311.281 191.518 cv
309.817 191.518 li
316.041 185.28 mo
315.808 185.28 315.617 185.474 315.617 185.71 cv
315.617 187.188 li
315.617 187.423 315.808 187.617 316.041 187.617 cv
316.277 187.617 316.467 187.423 316.467 187.188 cv
316.467 185.71 li
316.467 185.474 316.277 185.28 316.041 185.28 cv
f
316.041 176.872 mo
315.646 176.872 315.255 176.867 314.869 176.856 cv
314.59 176.848 314.314 176.838 314.04 176.825 cv
309.034 176.587 304.902 175.468 303.159 173.967 cv
317.967 173.967 li
320.284 173.967 li
326.472 173.967 li
328.926 173.967 li
328.486 174.346 327.894 174.7 327.174 175.022 cv
325.97 175.561 324.409 176.009 322.603 176.329 cv
320.937 176.625 319.063 176.811 317.071 176.86 cv
316.731 176.868 316.388 176.872 316.041 176.872 cv
f
322.18 192.377 mo
320.715 192.377 li
320.479 192.377 320.289 192.185 320.289 191.947 cv
320.289 191.71 320.479 191.518 320.715 191.518 cv
322.18 191.518 li
322.413 191.518 322.604 191.71 322.604 191.947 cv
322.604 192.185 322.413 192.377 322.18 192.377 cv
1 .858823 0 rgb
f
311.281 192.377 mo
309.817 192.377 li
309.584 192.377 309.393 192.185 309.393 191.947 cv
309.393 191.71 309.584 191.518 309.817 191.518 cv
311.281 191.518 li
311.516 191.518 311.708 191.71 311.708 191.947 cv
311.708 192.185 311.516 192.377 311.281 192.377 cv
f
316.041 187.617 mo
315.808 187.617 315.617 187.423 315.617 187.188 cv
315.617 185.71 li
315.617 185.474 315.808 185.28 316.041 185.28 cv
316.277 185.28 316.467 185.474 316.467 185.71 cv
316.467 187.188 li
316.467 187.423 316.277 187.617 316.041 187.617 cv
f
316.041 198.612 mo
315.808 198.612 315.617 198.42 315.617 198.183 cv
315.617 196.706 li
315.617 196.469 315.808 196.276 316.041 196.276 cv
316.277 196.276 316.467 196.469 316.467 196.706 cv
316.467 198.183 li
316.467 198.42 316.277 198.612 316.041 198.612 cv
f
316.041 193.139 mo
315.433 193.139 314.94 192.641 314.94 192.028 cv
314.948 191.947 li
314.94 191.947 li
314.952 191.917 li
314.971 191.722 316.041 188.898 316.041 188.898 cv
316.041 188.898 317.112 191.722 317.133 191.917 cv
317.144 191.947 li
317.136 191.947 li
317.144 192.028 li
317.144 192.641 316.65 193.139 316.041 193.139 cv
f
206.144 296.993 mo
152.917 296.993 li
157.732 285.772 li
157.732 292.29 li
201.302 292.29 li
201.302 267.695 li
165.488 267.695 li
166.885 264.44 li
201.302 264.44 li
201.302 239.847 li
177.438 239.847 li
178.835 236.59 li
201.302 236.59 li
201.302 211.996 li
189.388 211.996 li
192.493 204.762 li
203.47 204.762 li
203.471 204.762 li
206.144 204.762 li
206.144 296.993 li
.937255 .890196 .631373 rgb
f
201.302 236.59 mo
178.835 236.59 li
189.388 211.996 li
201.302 211.996 li
201.302 236.59 li
.956863 .501961 .0980392 rgb
f
201.302 264.44 mo
166.885 264.44 li
177.438 239.847 li
201.302 239.847 li
201.302 264.44 li
f
201.302 292.29 mo
157.732 292.29 li
157.732 285.772 li
161.795 276.302 li
162.373 277.104 163.271 277.62 164.28 277.62 cv
166.022 277.62 167.435 276.079 167.435 274.179 cv
167.435 272.274 166.022 270.733 164.28 270.733 cv
164.248 270.733 164.216 270.734 164.184 270.735 cv
165.488 267.695 li
201.302 267.695 li
201.302 292.29 li
f
164.28 277.62 mo
163.271 277.62 162.373 277.104 161.795 276.302 cv
164.184 270.735 li
164.216 270.734 164.248 270.733 164.28 270.733 cv
166.022 270.733 167.435 272.274 167.435 274.179 cv
167.435 276.079 166.022 277.62 164.28 277.62 cv
.27451 .25098 .0745098 rgb
f
378.912 296.993 mo
278.265 296.993 li
278.265 204.762 li
279.417 204.762 li
279.418 204.762 li
370.372 204.762 li
373.306 211.996 li
330.502 211.996 li
330.502 236.59 li
374.071 236.59 li
374.071 213.882 li
378.912 225.818 li
378.912 296.993 li
330.502 267.695 mo
330.502 292.29 li
374.071 292.29 li
374.071 267.695 li
330.502 267.695 li
282.682 267.695 mo
282.682 292.29 li
326.251 292.29 li
326.251 267.695 li
282.682 267.695 li
330.502 239.847 mo
330.502 264.44 li
374.071 264.44 li
374.071 239.847 li
330.502 239.847 li
282.682 239.847 mo
282.682 264.44 li
326.251 264.44 li
326.251 239.847 li
282.682 239.847 li
282.682 211.996 mo
282.682 236.59 li
326.251 236.59 li
326.251 211.996 li
282.682 211.996 li
.937255 .890196 .631373 rgb
f
326.251 236.59 mo
282.682 236.59 li
282.682 211.996 li
326.251 211.996 li
326.251 236.59 li
319.706 215.563 mo
317.964 215.563 316.551 217.104 316.551 219.006 cv
316.551 220.909 317.964 222.45 319.706 222.45 cv
321.451 222.45 322.862 220.909 322.862 219.006 cv
322.862 217.104 321.451 215.563 319.706 215.563 cv
.956863 .501961 .0980392 rgb
f
374.071 236.59 mo
330.502 236.59 li
330.502 211.996 li
373.306 211.996 li
374.071 213.882 li
374.071 236.59 li
337.048 215.563 mo
335.306 215.563 333.893 217.104 333.893 219.006 cv
333.893 220.909 335.306 222.45 337.048 222.45 cv
338.793 222.45 340.205 220.909 340.205 219.006 cv
340.205 217.104 338.793 215.563 337.048 215.563 cv
f
326.251 264.44 mo
282.682 264.44 li
282.682 239.847 li
326.251 239.847 li
326.251 264.44 li
319.706 243.989 mo
317.964 243.989 316.551 245.531 316.551 247.433 cv
316.551 249.336 317.964 250.877 319.706 250.877 cv
321.451 250.877 322.862 249.336 322.862 247.433 cv
322.862 245.531 321.451 243.989 319.706 243.989 cv
f
374.071 264.44 mo
330.502 264.44 li
330.502 239.847 li
374.071 239.847 li
374.071 264.44 li
337.048 243.989 mo
335.306 243.989 333.893 245.531 333.893 247.433 cv
333.893 249.336 335.306 250.877 337.048 250.877 cv
338.793 250.877 340.205 249.336 340.205 247.433 cv
340.205 245.531 338.793 243.989 337.048 243.989 cv
f
326.251 292.29 mo
282.682 292.29 li
282.682 267.695 li
326.251 267.695 li
326.251 292.29 li
319.706 270.733 mo
317.964 270.733 316.551 272.274 316.551 274.179 cv
316.551 276.079 317.964 277.62 319.706 277.62 cv
321.451 277.62 322.862 276.079 322.862 274.179 cv
322.862 272.274 321.451 270.733 319.706 270.733 cv
f
374.071 292.29 mo
330.502 292.29 li
330.502 267.695 li
374.071 267.695 li
374.071 292.29 li
337.048 270.733 mo
335.306 270.733 333.893 272.274 333.893 274.179 cv
333.893 276.079 335.306 277.62 337.048 277.62 cv
338.793 277.62 340.205 276.079 340.205 274.179 cv
340.205 272.274 338.793 270.733 337.048 270.733 cv
f
319.706 222.45 mo
317.964 222.45 316.551 220.909 316.551 219.006 cv
316.551 217.104 317.964 215.563 319.706 215.563 cv
321.451 215.563 322.862 217.104 322.862 219.006 cv
322.862 220.909 321.451 222.45 319.706 222.45 cv
.27451 .25098 .0745098 rgb
f
337.048 222.45 mo
335.306 222.45 333.893 220.909 333.893 219.006 cv
333.893 217.104 335.306 215.563 337.048 215.563 cv
338.793 215.563 340.205 217.104 340.205 219.006 cv
340.205 220.909 338.793 222.45 337.048 222.45 cv
f
319.706 250.877 mo
317.964 250.877 316.551 249.336 316.551 247.433 cv
316.551 245.531 317.964 243.989 319.706 243.989 cv
321.451 243.989 322.862 245.531 322.862 247.433 cv
322.862 249.336 321.451 250.877 319.706 250.877 cv
f
337.048 250.877 mo
335.306 250.877 333.893 249.336 333.893 247.433 cv
333.893 245.531 335.306 243.989 337.048 243.989 cv
338.793 243.989 340.205 245.531 340.205 247.433 cv
340.205 249.336 338.793 250.877 337.048 250.877 cv
f
261.977 198.775 mo
258.684 198.775 li
258.684 195.94 li
261.977 195.94 li
261.977 198.775 li
255.969 198.775 mo
252.673 198.775 li
252.673 195.94 li
255.474 195.94 li
255.969 195.94 li
255.969 198.775 li
231.929 198.775 mo
228.633 198.775 li
228.633 195.94 li
231.929 195.94 li
231.929 198.775 li
225.919 198.775 mo
222.624 198.775 li
222.624 195.94 li
225.919 195.94 li
225.919 198.775 li
.113725 .686274 .686274 rgb
f
319.706 277.62 mo
317.964 277.62 316.551 276.079 316.551 274.179 cv
316.551 272.274 317.964 270.733 319.706 270.733 cv
321.451 270.733 322.862 272.274 322.862 274.179 cv
322.862 276.079 321.451 277.62 319.706 277.62 cv
.27451 .25098 .0745098 rgb
f
337.048 277.62 mo
335.306 277.62 333.893 276.079 333.893 274.179 cv
333.893 272.274 335.306 270.733 337.048 270.733 cv
338.793 270.733 340.205 272.274 340.205 274.179 cv
340.205 276.079 338.793 277.62 337.048 277.62 cv
f
206.144 212.42 mo
206.144 212.42 li
206.144 200.024 li
206.145 204.762 li
278.265 204.762 li
278.264 209.221 li
206.144 209.221 li
206.144 212.42 li
.807843 .815686 .67451 rgb
f
278.264 296.993 mo
206.144 296.993 li
206.144 284.597 li
206.144 290.795 li
278.264 290.795 li
278.264 296.993 li
.27451 .25098 .0745098 rgb
f
278.264 290.795 mo
278.264 290.795 li
206.144 290.795 li
206.144 284.597 li
206.144 212.42 li
206.144 209.221 li
278.264 209.221 li
278.264 290.795 li
228.93 233.383 mo
220.719 233.383 214.039 240.123 214.039 248.408 cv
214.039 268.003 li
214.039 276.287 220.719 283.027 228.93 283.027 cv
255.479 283.027 li
263.69 283.027 270.369 276.287 270.369 268.003 cv
270.369 248.408 li
270.369 240.123 263.69 233.383 255.479 233.383 cv
228.93 233.383 li
213.475 224.869 mo
212.271 224.869 211.293 225.854 211.293 227.069 cv
211.293 228.283 212.271 229.268 213.475 229.268 cv
270.932 229.268 li
272.135 229.268 273.112 228.283 273.112 227.069 cv
273.112 225.854 272.135 224.869 270.932 224.869 cv
213.475 224.869 li
269.943 212.42 mo
267.972 212.42 266.376 214.031 266.376 216.019 cv
266.376 218.005 267.972 219.618 269.943 219.618 cv
271.912 219.618 273.508 218.005 273.508 216.019 cv
273.508 214.031 271.912 212.42 269.943 212.42 cv
259.242 212.42 mo
257.274 212.42 255.677 214.031 255.677 216.019 cv
255.677 218.005 257.274 219.618 259.242 219.618 cv
261.213 219.618 262.809 218.005 262.809 216.019 cv
262.809 214.031 261.213 212.42 259.242 212.42 cv
242.206 212.42 mo
240.234 212.42 238.64 214.031 238.64 216.019 cv
238.64 218.005 240.234 219.618 242.206 219.618 cv
244.175 219.618 245.772 218.005 245.772 216.019 cv
245.772 214.031 244.175 212.42 242.206 212.42 cv
225.56 212.42 mo
223.59 212.42 221.993 214.031 221.993 216.019 cv
221.993 218.005 223.59 219.618 225.56 219.618 cv
227.529 219.618 229.126 218.005 229.126 216.019 cv
229.126 214.031 227.529 212.42 225.56 212.42 cv
214.86 212.42 mo
212.89 212.42 211.293 214.031 211.293 216.019 cv
211.293 218.005 212.89 219.618 214.86 219.618 cv
216.83 219.618 218.427 218.005 218.427 216.019 cv
218.427 214.031 216.83 212.42 214.86 212.42 cv
.929412 .937255 .878431 rgb
f
255.479 281.768 mo
228.93 281.768 li
221.408 281.768 215.288 275.592 215.288 268.003 cv
215.288 248.408 li
215.288 240.818 221.408 234.644 228.93 234.644 cv
255.479 234.644 li
263 234.644 269.121 240.818 269.121 248.408 cv
269.121 268.003 li
269.121 275.592 263 281.768 255.479 281.768 cv
.807843 .815686 .67451 rgb
f
255.479 283.027 mo
228.93 283.027 li
220.719 283.027 214.039 276.287 214.039 268.003 cv
214.039 248.408 li
214.039 240.123 220.719 233.383 228.93 233.383 cv
255.479 233.383 li
263.69 233.383 270.369 240.123 270.369 248.408 cv
270.369 268.003 li
270.369 276.287 263.69 283.027 255.479 283.027 cv
228.93 234.644 mo
221.408 234.644 215.288 240.818 215.288 248.408 cv
215.288 268.003 li
215.288 275.592 221.408 281.768 228.93 281.768 cv
255.479 281.768 li
263 281.768 269.121 275.592 269.121 268.003 cv
269.121 248.408 li
269.121 240.818 263 234.644 255.479 234.644 cv
228.93 234.644 li
1 1 1 rgb
f
270.932 229.268 mo
213.475 229.268 li
212.271 229.268 211.293 228.283 211.293 227.069 cv
211.293 225.854 212.271 224.869 213.475 224.869 cv
270.932 224.869 li
272.135 224.869 273.112 225.854 273.112 227.069 cv
273.112 228.283 272.135 229.268 270.932 229.268 cv
.27451 .25098 .0745098 rgb
f
214.86 219.618 mo
212.89 219.618 211.293 218.005 211.293 216.019 cv
211.293 214.031 212.89 212.42 214.86 212.42 cv
216.83 212.42 218.427 214.031 218.427 216.019 cv
218.427 218.005 216.83 219.618 214.86 219.618 cv
1 1 1 rgb
f
225.56 219.618 mo
223.59 219.618 221.993 218.005 221.993 216.019 cv
221.993 214.031 223.59 212.42 225.56 212.42 cv
227.529 212.42 229.126 214.031 229.126 216.019 cv
229.126 218.005 227.529 219.618 225.56 219.618 cv
f
259.242 219.618 mo
257.274 219.618 255.677 218.005 255.677 216.019 cv
255.677 214.031 257.274 212.42 259.242 212.42 cv
261.213 212.42 262.809 214.031 262.809 216.019 cv
262.809 218.005 261.213 219.618 259.242 219.618 cv
f
269.943 219.618 mo
267.972 219.618 266.376 218.005 266.376 216.019 cv
266.376 214.031 267.972 212.42 269.943 212.42 cv
271.912 212.42 273.508 214.031 273.508 216.019 cv
273.508 218.005 271.912 219.618 269.943 219.618 cv
f
242.206 219.618 mo
240.234 219.618 238.64 218.005 238.64 216.019 cv
238.64 214.031 240.234 212.42 242.206 212.42 cv
244.175 212.42 245.772 214.031 245.772 216.019 cv
245.772 218.005 244.175 219.618 242.206 219.618 cv
f
278.265 204.762 mo
278.265 204.762 li
206.145 204.762 li
206.145 200.024 li
206.145 198.775 li
219.909 198.775 li
219.909 195.94 li
222.624 195.94 li
222.624 198.775 li
225.919 198.775 li
225.919 195.94 li
228.633 195.94 li
228.633 198.775 li
231.929 198.775 li
231.929 195.94 li
234.644 195.94 li
234.644 198.775 li
249.958 198.775 li
249.958 195.94 li
252.673 195.94 li
252.673 198.775 li
255.969 198.775 li
255.969 195.94 li
258.684 195.94 li
258.684 198.775 li
261.977 198.775 li
261.977 195.94 li
264.693 195.94 li
264.693 198.775 li
278.265 198.775 li
278.265 204.762 li
.27451 .25098 .0745098 rgb
f
270.621 183.675 mo
270.621 180.376 li
271.606 180.376 li
271.75 180.376 271.891 180.363 272.028 180.338 cv
272.107 180.604 272.149 180.893 272.149 181.195 cv
272.149 181.298 li
272.149 182.482 271.491 183.466 270.621 183.675 cv
271.007 179.089 mo
270.621 179.089 li
270.621 178.817 li
270.822 178.865 271.011 178.955 271.184 179.079 cv
271.126 179.085 271.066 179.089 271.007 179.089 cv
.156863 .776471 .831372 rgb
f
270.276 183.716 mo
269.91 183.716 li
269.91 178.776 li
270.276 178.776 li
270.394 178.776 270.509 178.79 270.621 178.817 cv
270.621 179.089 li
271.007 179.089 li
271.066 179.089 271.126 179.085 271.184 179.079 cv
271.569 179.355 271.87 179.801 272.028 180.338 cv
271.891 180.363 271.75 180.376 271.606 180.376 cv
270.621 180.376 li
270.621 183.675 li
270.509 183.702 270.394 183.716 270.276 183.716 cv
.113725 .686274 .686274 rgb
f
244.489 183.697 mo
243.569 183.546 242.855 182.53 242.855 181.298 cv
242.855 181.195 li
242.855 180.886 242.901 180.59 242.983 180.318 cv
243.152 180.356 243.325 180.376 243.503 180.376 cv
244.489 180.376 li
244.489 183.697 li
244.489 179.089 mo
244.102 179.089 li
244.012 179.089 243.924 179.081 243.838 179.066 cv
244.036 178.928 244.256 178.834 244.489 178.796 cv
244.489 179.089 li
.156863 .776471 .831372 rgb
f
245.095 183.716 mo
244.727 183.716 li
244.646 183.716 244.567 183.709 244.489 183.697 cv
244.489 180.376 li
243.503 180.376 li
243.325 180.376 243.152 180.356 242.983 180.318 cv
243.144 179.781 243.45 179.338 243.838 179.066 cv
243.924 179.081 244.012 179.089 244.102 179.089 cv
244.489 179.089 li
244.489 178.796 li
244.567 178.783 244.646 178.776 244.727 178.776 cv
245.095 178.776 li
245.095 183.716 li
.113725 .686274 .686274 rgb
f
269.91 195.94 mo
264.693 195.94 li
261.977 195.94 li
258.684 195.94 li
255.969 195.94 li
255.474 195.94 li
252.673 195.94 li
249.958 195.94 li
245.407 195.94 li
245.095 195.94 li
245.095 194.764 li
245.095 191.811 li
245.095 184.953 li
244.489 184.953 li
244.159 184.953 li
242.607 184.953 241.349 183.328 241.349 181.325 cv
241.349 181.169 li
241.349 180.583 241.456 180.03 241.647 179.54 cv
241.863 178.987 242.185 178.515 242.578 178.168 cv
243.029 177.772 243.573 177.54 244.159 177.54 cv
244.489 177.54 li
245.095 177.54 li
245.095 173.967 li
245.407 173.967 li
255.474 173.967 li
269.91 173.967 li
269.91 177.54 li
270.621 177.54 li
270.847 177.54 li
271.461 177.54 272.029 177.795 272.492 178.228 cv
272.873 178.584 273.183 179.061 273.386 179.616 cv
273.559 180.087 273.656 180.613 273.656 181.169 cv
273.656 181.325 li
273.656 183.328 272.396 184.953 270.847 184.953 cv
270.621 184.953 li
269.91 184.953 li
269.91 191.811 li
269.91 194.764 li
269.91 195.94 li
269.91 178.776 mo
269.91 183.716 li
270.276 183.716 li
270.394 183.716 270.509 183.702 270.621 183.675 cv
271.491 183.466 272.149 182.482 272.149 181.298 cv
272.149 181.195 li
272.149 180.893 272.107 180.604 272.028 180.338 cv
271.87 179.801 271.569 179.355 271.184 179.079 cv
271.011 178.955 270.822 178.865 270.621 178.817 cv
270.509 178.79 270.394 178.776 270.276 178.776 cv
269.91 178.776 li
244.489 183.697 mo
244.567 183.709 244.646 183.716 244.727 183.716 cv
245.095 183.716 li
245.095 178.776 li
244.727 178.776 li
244.646 178.776 244.567 178.783 244.489 178.796 cv
244.256 178.834 244.036 178.928 243.838 179.066 cv
243.45 179.338 243.144 179.781 242.983 180.318 cv
242.901 180.59 242.855 180.886 242.855 181.195 cv
242.855 181.298 li
242.855 182.53 243.569 183.546 244.489 183.697 cv
1 .858823 0 rgb
f
262.625 169.907 mo
262.625 169.907 261.773 169.591 261.142 168.94 cv
260.295 168.066 259.846 166.587 262.398 164.454 cv
262.553 164.325 262.719 164.192 262.897 164.058 cv
263.458 163.634 264.135 163.186 264.945 162.714 cv
266.931 161.558 267.741 160.29 267.998 159.184 cv
268.384 157.521 267.519 156.224 267.519 156.224 cv
267.519 156.224 268.611 156.993 269.4 158.201 cv
270.372 159.688 270.886 161.839 268.335 164.031 cv
267.052 165.133 262.864 165.829 262.59 168.94 cv
262.563 169.24 262.573 169.561 262.625 169.907 cv
1 1 1 rgb
f
237.172 195.94 mo
234.644 195.94 li
231.929 195.94 li
228.633 195.94 li
225.919 195.94 li
222.624 195.94 li
219.909 195.94 li
217.033 195.94 li
215.962 194.764 li
214.069 192.684 li
201.861 189.794 li
200.958 189.582 200.398 188.67 200.609 187.759 cv
200.791 186.978 201.481 186.451 202.244 186.451 cv
202.37 186.451 202.499 186.466 202.628 186.496 cv
212.11 188.738 li
217.73 190.067 li
237.036 190.067 li
240.136 190.067 li
237.766 194.764 li
237.172 195.94 li
.890196 .227451 .0745098 rgb
f
223.784 186.512 mo
223.784 186.512 223.113 186.246 222.514 185.7 cv
221.283 184.579 220.354 182.277 226.149 178.668 cv
228.66 177.104 229.327 175.353 229.362 173.983 cv
229.397 172.588 228.775 171.589 228.775 171.589 cv
228.775 171.589 229.348 172.021 229.97 172.752 cv
230.842 173.779 231.809 175.393 231.415 177.225 cv
231.217 178.146 230.676 179.121 229.607 180.104 cv
229.197 180.48 228.498 180.812 227.722 181.196 cv
225.959 182.067 223.798 183.2 223.735 185.7 cv
223.728 185.956 223.744 186.226 223.784 186.512 cv
1 1 1 rgb
f
230.862 187.995 mo
230.862 187.995 228.996 187.256 229.177 185.7 cv
229.288 184.75 230.163 183.495 232.695 181.918 cv
235.221 180.344 235.339 178.525 235.102 177.428 cv
234.97 176.82 234.73 176.434 234.73 176.434 cv
234.73 176.434 235.008 176.643 235.362 177.012 cv
236.401 178.091 238.095 180.529 235.373 183.029 cv
234.584 183.754 232.409 184.27 231.379 185.7 cv
230.956 186.286 230.726 187.025 230.862 187.995 cv
f
253.836 168.464 mo
253.836 168.464 248.399 166.45 251.876 162.16 cv
252.398 161.516 253.121 160.821 254.093 160.074 cv
254.934 159.427 255.961 158.742 257.205 158.018 cv
258.585 157.214 259.574 156.373 260.271 155.538 cv
262.706 152.623 261.581 149.786 261.114 148.884 cv
261.016 148.694 260.946 148.59 260.946 148.59 cv
260.946 148.59 261.034 148.652 261.184 148.77 cv
261.776 149.237 263.332 150.578 264.21 152.4 cv
265.016 154.074 265.249 156.155 263.637 158.338 cv
263.248 158.864 262.752 159.396 262.131 159.93 cv
261.912 160.117 261.635 160.297 261.316 160.475 cv
258.655 161.962 253.067 163.343 253.836 168.464 cv
f
407.779 296.993 mo
384.012 296.993 li
384.012 296.993 li
384.012 296.993 li
381.195 296.993 378.912 294.688 378.912 291.847 cv
378.912 225.818 li
407.779 296.993 li
f
280.232 60.6567 mo
271.795 60.6567 264.955 57.3765 264.955 53.3296 cv
264.955 49.2818 271.795 46.001 280.232 46.001 cv
288.671 46.001 295.513 49.2818 295.513 53.3296 cv
295.513 57.3765 288.671 60.6567 280.232 60.6567 cv
1 1 .329412 rgb
f
284.352 15.48 mo
284.352 0 li
275.84 0 li
275.84 15.48 li
266.137 16.9814 243.111 23.7451 242 54.1582 cv
280.095 54.1582 li
318.189 54.1582 li
317.08 23.7451 294.055 16.9814 284.352 15.48 cv
cp
.968627 .545098 .74902 rgb
f
448.622 77.4932 mo
447.84 78.2051 447.622 78.7827 447.355 78.7827 cv
447.092 78.7827 446.875 78.2051 446.875 77.4932 cv
446.875 53.8335 li
446.875 53.1211 447.092 52.5435 447.355 52.5435 cv
447.622 52.5435 447.84 53.1211 448.622 53.8335 cv
448.622 77.4932 li
cp
.4 .8 .4 rgb
f
447.637 71.3853 mo
447.637 71.3853 445.712 66.3711 451.945 61.4185 cv
458.184 56.4658 456.28 56.418 455.481 54.8433 cv
455.481 54.8433 461.914 58.0415 454.792 62.6704 cv
447.666 67.2993 447.27 69.5552 447.637 71.3853 cv
cp
f
447.859 71.3853 mo
447.859 71.3853 449.785 66.3711 443.551 61.4185 cv
437.315 56.4658 439.217 56.418 440.015 54.8433 cv
440.015 54.8433 433.582 58.0415 440.704 62.6704 cv
447.83 67.2993 448.228 69.5552 447.859 71.3853 cv
cp
f
446.977 76.189 mo
446.977 76.189 445.444 69.4331 454.308 64.2881 cv
463.174 59.1436 460.756 58.7256 460.029 56.5664 cv
460.029 56.5664 467.643 61.8535 457.706 66.4189 cv
447.769 70.9839 446.844 73.7861 446.977 76.189 cv
cp
f
448.52 76.189 mo
448.52 76.189 450.052 69.4331 441.188 64.2881 cv
432.323 59.1436 434.74 58.7256 435.468 56.5664 cv
435.468 56.5664 427.853 61.8535 437.791 66.4189 cv
447.729 70.9839 448.652 73.7861 448.52 76.189 cv
cp
f
436.095 71.0947 mo
459.485 71.0947 li
459.485 71.0947 459.534 89.4702 447.79 89.0894 cv
436.044 88.707 436.095 71.0947 436.095 71.0947 cv
cp
.964706 .580392 .133333 rgb
f
454.238 52.5435 mo
454.238 54.7388 451.292 56.5181 447.658 56.5181 cv
444.025 56.5181 441.079 54.7388 441.079 52.5435 cv
441.079 50.3477 444.025 48.5684 447.658 48.5684 cv
451.292 48.5684 454.238 50.3477 454.238 52.5435 cv
cp
1 .4 .2 rgb
f
451.042 52.6162 mo
451.042 54.002 449.485 55.1255 447.566 55.1255 cv
445.646 55.1255 444.091 54.002 444.091 52.6162 cv
444.091 51.2305 445.646 50.1069 447.566 50.1069 cv
449.485 50.1069 451.042 51.2305 451.042 52.6162 cv
cp
1 .976471 .2 rgb
f
178.824 117.511 mo
177.245 117.511 175.894 118.434 175.23 119.767 cv
34.7319 119.767 li
34.0674 118.434 32.7163 117.511 31.1372 117.511 cv
28.9087 117.511 27.1025 119.334 27.1025 121.584 cv
27.1025 123.833 28.9087 125.656 31.1372 125.656 cv
32.7251 125.656 34.084 124.724 34.7437 123.379 cv
175.218 123.379 li
175.877 124.724 177.236 125.656 178.824 125.656 cv
181.053 125.656 182.86 123.833 182.86 121.584 cv
182.86 119.334 181.053 117.511 178.824 117.511 cv
cp
1 1 1 rgb
f
131.171 185.29 mo
131.171 185.29 127.515 186.886 130.066 189.025 cv
132.018 190.664 131.453 191.796 130.193 192.029 cv
130.193 192.029 134.634 191.933 131.107 188.358 cv
129.219 186.442 130.977 185.412 131.171 185.29 cv
cp
f
128.919 189.866 mo
128.979 190.355 128.537 190.813 127.932 190.889 cv
127.328 190.965 126.789 190.63 126.729 190.142 cv
126.667 189.653 127.11 189.194 127.715 189.118 cv
128.319 189.043 128.859 189.378 128.919 189.866 cv
cp
f
134.667 186.514 mo
134.724 186.98 134.302 187.417 133.724 187.492 cv
133.145 187.563 132.63 187.244 132.572 186.777 cv
132.515 186.311 132.938 185.871 133.515 185.8 cv
134.095 185.726 134.608 186.046 134.667 186.514 cv
cp
f
136.07 204.762 mo
125.469 204.762 li
125.469 203.479 li
136.07 203.479 li
136.07 204.762 li
cp
.898039 .905882 .913725 rgb
f
124.722 198.538 mo
124.722 197.78 125.155 197.12 125.796 196.771 cv
125.691 197.858 125.724 199.247 126.26 200.494 cv
125.372 200.252 124.722 199.47 124.722 198.538 cv
cp
135.628 194.503 mo
126.312 194.503 li
126.242 194.614 126.188 194.729 126.156 194.847 cv
126.156 194.847 126.031 195.244 125.919 195.868 cv
125.755 195.815 125.584 195.783 125.41 195.783 cv
124.241 195.783 123.293 197.018 123.293 198.538 cv
123.293 200.06 124.241 201.295 125.41 201.295 cv
125.796 201.295 126.156 201.157 126.468 200.92 cv
127.179 202.224 128.308 203.589 130.971 203.589 cv
138.28 203.021 135.785 194.847 135.785 194.847 cv
135.744 194.726 135.69 194.612 135.628 194.503 cv
cp
.964706 .580392 .133333 rgb
f
380.965 61.2588 mo
380.965 74.6963 370.17 85.5913 356.854 85.5913 cv
343.535 85.5913 332.74 74.6963 332.74 61.2588 cv
332.74 47.8203 343.535 36.9258 356.854 36.9258 cv
370.17 36.9258 380.965 47.8203 380.965 61.2588 cv
cp
.133333 .117647 .121569 rgb
f
372.513 48.1123 mo
368.759 43.6138 363.14 40.7524 356.854 40.7524 cv
345.55 40.7524 336.389 49.9976 336.389 61.4023 cv
336.389 69.5684 341.086 76.6245 347.901 79.9746 cv
350.606 81.3062 353.643 82.0537 356.854 82.0537 cv
368.155 82.0537 377.318 72.8081 377.318 61.4023 cv
377.318 56.3394 375.508 51.7046 372.513 48.1123 cv
cp
1 1 1 rgb
f
357.266 48.8857 mo
357.266 48.999 357.081 49.0903 356.854 49.0903 cv
356.625 49.0903 356.438 48.999 356.438 48.8857 cv
356.438 43.1021 li
356.438 42.9883 356.625 42.897 356.854 42.897 cv
357.081 42.897 357.266 42.9883 357.266 43.1021 cv
357.266 48.8857 li
cp
.478431 .568627 .619608 rgb
f
357.266 80.0991 mo
357.266 80.2124 357.081 80.3047 356.854 80.3047 cv
356.625 80.3047 356.438 80.2124 356.438 80.0991 cv
356.438 74.3149 li
356.438 74.2017 356.625 74.1094 356.854 74.1094 cv
357.081 74.1094 357.266 74.2017 357.266 74.3149 cv
357.266 80.0991 li
cp
f
369.643 62.0161 mo
369.531 62.0161 369.439 61.8306 369.439 61.6006 cv
369.439 61.3701 369.531 61.1831 369.643 61.1831 cv
375.375 61.1831 li
375.487 61.1831 375.576 61.3701 375.576 61.6006 cv
375.576 61.8306 375.487 62.0161 375.375 62.0161 cv
369.643 62.0161 li
cp
f
355.796 61.4497 mo
356.334 62.4341 li
343.974 69.3218 li
342.69 69.4224 li
343.433 68.3379 li
355.796 61.4497 li
cp
.890196 .203922 .0745098 rgb
f
338.413 62.0161 mo
338.303 62.0161 338.212 61.8306 338.212 61.6006 cv
338.212 61.3701 338.303 61.1831 338.413 61.1831 cv
344.146 61.1831 li
344.258 61.1831 344.349 61.3701 344.349 61.6006 cv
344.349 61.8306 344.258 62.0161 344.146 62.0161 cv
338.413 62.0161 li
cp
.478431 .568627 .619608 rgb
f
356.277 60.4565 mo
357.37 60.4565 358.253 61.3501 358.253 62.4517 cv
358.253 63.5522 357.37 64.4453 356.277 64.4453 cv
355.186 64.4453 354.299 63.5522 354.299 62.4517 cv
354.299 61.3501 355.186 60.4565 356.277 60.4565 cv
cp
.027451 .113725 .160784 rgb
f
356.42 60.9673 mo
354.755 62.4517 li
349.74 56.6484 li
349.74 54.8354 li
351.405 55.1636 li
356.42 60.9673 li
cp
f
357.216 62.5439 mo
356.277 61.1069 li
369.747 52.145 li
371.311 52.0898 li
370.688 53.582 li
357.216 62.5439 li
cp
f
19.7021 333.672 mo
27.583 319.192 li
28.2012 319.084 28.7744 319.017 29.2998 318.989 cv
29.8257 318.962 30.3037 318.948 30.7349 318.948 cv
31.1929 318.948 31.7046 318.976 32.2705 319.03 cv
32.8364 319.084 33.4282 319.139 34.0493 319.192 cv
26.0874 333.268 li
34.7354 348.355 li
34.1157 348.409 33.5166 348.463 32.9375 348.519 cv
32.3574 348.571 31.8394 348.598 31.3818 348.598 cv
30.9502 348.598 30.4722 348.584 29.9463 348.559 cv
29.4214 348.531 28.8354 348.463 28.1885 348.355 cv
19.7021 333.672 li
cp
12.9531 319.151 mo
13.4648 319.07 13.9634 319.017 14.4482 318.989 cv
14.9331 318.962 15.4316 318.948 15.9434 318.948 cv
16.4014 318.948 16.873 318.962 17.3584 318.989 cv
17.8428 319.017 18.3413 319.07 18.8535 319.151 cv
18.8535 348.396 li
18.3413 348.478 17.8428 348.531 17.3584 348.559 cv
16.873 348.584 16.3882 348.598 15.9028 348.598 cv
15.4185 348.598 14.9331 348.584 14.4482 348.559 cv
13.9634 348.531 13.4648 348.478 12.9531 348.396 cv
12.9531 319.151 li
cp
0 0 0 rgb
f
37.9683 319.192 mo
38.9648 319.03 39.9482 318.948 40.918 318.948 cv
41.8882 318.948 42.8848 319.03 43.9097 319.192 cv
43.9097 348.355 li
42.8848 348.519 41.9019 348.598 40.959 348.598 cv
39.9614 348.598 38.9648 348.519 37.9683 348.355 cv
37.9683 319.192 li
cp
f
55.2241 324.222 mo
47.9902 324.222 li
47.8281 323.41 47.7476 322.559 47.7476 321.667 cv
47.7476 320.829 47.8281 320.004 47.9902 319.192 cv
68.3989 319.192 li
68.5605 320.004 68.6416 320.829 68.6416 321.667 cv
68.6416 322.559 68.5605 323.41 68.3989 324.222 cv
61.1655 324.222 li
61.1655 348.355 li
60.6802 348.409 60.1943 348.457 59.71 348.498 cv
59.2246 348.538 58.7529 348.559 58.2949 348.559 cv
57.8374 348.559 57.3457 348.544 56.8198 348.519 cv
56.2949 348.491 55.7627 348.438 55.2241 348.355 cv
55.2241 324.222 li
cp
f
90.1416 342.839 mo
90.4912 343.597 90.7808 344.374 91.0103 345.17 cv
91.2388 345.97 91.4067 346.772 91.5151 347.585 cv
90.1143 348.098 88.854 348.438 87.7368 348.598 cv
86.6182 348.76 85.4126 348.842 84.1201 348.842 cv
81.8291 348.842 79.8223 348.472 78.0981 347.726 cv
76.3735 346.984 74.9258 345.942 73.7534 344.604 cv
72.5815 343.265 71.6992 341.676 71.106 339.837 cv
70.5142 337.999 70.2173 335.998 70.2173 333.835 cv
70.2173 331.672 70.5269 329.663 71.147 327.811 cv
71.7661 325.959 72.6626 324.357 73.835 323.005 cv
75.0063 321.652 76.4473 320.599 78.1582 319.841 cv
79.8696 319.084 81.8164 318.705 83.9985 318.705 cv
85.292 318.705 86.4844 318.785 87.5747 318.948 cv
88.666 319.111 89.8447 319.448 91.1108 319.963 cv
91.0576 320.773 90.8955 321.564 90.6265 322.335 cv
90.3569 323.106 90.0601 323.883 89.7378 324.669 cv
88.7944 324.342 87.959 324.113 87.2319 323.979 cv
86.5039 323.844 85.6411 323.775 84.645 323.775 cv
82.0591 323.775 80.0713 324.62 78.6846 326.311 cv
77.2964 328 76.6025 330.508 76.6025 333.835 cv
76.6025 340.434 79.3916 343.731 84.9688 343.731 cv
85.9648 343.731 86.8403 343.664 87.5952 343.528 cv
88.3491 343.395 89.1978 343.163 90.1416 342.839 cv
cp
f
95.9204 319.192 mo
96.9165 319.03 97.9009 318.948 98.8701 318.948 cv
99.8403 318.948 100.837 319.03 101.862 319.192 cv
101.862 330.631 li
111.6 330.631 li
111.6 319.192 li
112.598 319.03 113.581 318.948 114.551 318.948 cv
115.521 318.948 116.517 319.03 117.542 319.192 cv
117.542 348.355 li
116.517 348.519 115.535 348.598 114.592 348.598 cv
113.594 348.598 112.598 348.519 111.6 348.355 cv
111.6 335.74 li
101.862 335.74 li
101.862 348.355 li
100.837 348.519 99.8535 348.598 98.9106 348.598 cv
97.9136 348.598 96.9165 348.519 95.9204 348.355 cv
95.9204 319.192 li
cp
f
123.199 319.192 mo
139.688 319.192 li
139.85 320.004 139.93 320.829 139.93 321.667 cv
139.93 322.559 139.85 323.41 139.688 324.222 cv
129.099 324.222 li
129.099 330.549 li
137.505 330.549 li
137.667 331.415 137.747 332.253 137.747 333.063 cv
137.747 333.931 137.667 334.781 137.505 335.618 cv
129.099 335.618 li
129.099 343.326 li
139.97 343.326 li
140.132 344.136 140.213 344.963 140.213 345.8 cv
140.213 346.691 140.132 347.544 139.97 348.355 cv
123.199 348.355 li
123.199 319.192 li
cp
f
144.658 319.192 mo
145.492 319.03 146.287 318.948 147.042 318.948 cv
147.85 318.948 148.685 319.03 149.548 319.192 cv
160.783 337.769 li
160.783 319.192 li
161.752 319.03 162.683 318.948 163.571 318.948 cv
164.406 318.948 165.214 319.03 165.996 319.192 cv
165.996 348.355 li
165.133 348.519 164.352 348.598 163.652 348.598 cv
162.897 348.598 162.076 348.519 161.187 348.355 cv
149.871 329.818 li
149.871 348.355 li
149.008 348.519 148.133 348.598 147.244 348.598 cv
146.355 348.598 145.492 348.519 144.658 348.355 cv
144.658 319.192 li
cp
f
180.544 319.192 mo
181.541 319.03 182.524 318.948 183.494 318.948 cv
184.465 318.948 185.461 319.03 186.485 319.192 cv
186.485 348.355 li
185.461 348.519 184.478 348.598 183.535 348.598 cv
182.538 348.598 181.541 348.519 180.544 348.355 cv
180.544 319.192 li
cp
f
192.142 319.192 mo
192.977 319.03 193.771 318.948 194.526 318.948 cv
195.334 318.948 196.17 319.03 197.033 319.192 cv
208.268 337.769 li
208.268 319.192 li
209.237 319.03 210.167 318.948 211.056 318.948 cv
211.89 318.948 212.699 319.03 213.48 319.192 cv
213.48 348.355 li
212.618 348.519 211.837 348.598 211.136 348.598 cv
210.382 348.598 209.561 348.519 208.671 348.355 cv
197.355 329.818 li
197.355 348.355 li
196.493 348.519 195.618 348.598 194.729 348.598 cv
193.84 348.598 192.977 348.519 192.142 348.355 cv
192.142 319.192 li
cp
f
224.796 324.222 mo
217.562 324.222 li
217.4 323.41 217.319 322.559 217.319 321.667 cv
217.319 320.829 217.4 320.004 217.562 319.192 cv
237.97 319.192 li
238.131 320.004 238.213 320.829 238.213 321.667 cv
238.213 322.559 238.131 323.41 237.97 324.222 cv
230.736 324.222 li
230.736 348.355 li
230.251 348.409 229.767 348.457 229.282 348.498 cv
228.797 348.538 228.324 348.559 227.867 348.559 cv
227.409 348.559 226.917 348.544 226.392 348.519 cv
225.866 348.491 225.334 348.438 224.796 348.355 cv
224.796 324.222 li
cp
f
242.052 319.192 mo
258.541 319.192 li
258.701 320.004 258.783 320.829 258.783 321.667 cv
258.783 322.559 258.701 323.41 258.541 324.222 cv
247.954 324.222 li
247.954 330.549 li
256.358 330.549 li
256.521 331.415 256.599 332.253 256.599 333.063 cv
256.599 333.931 256.521 334.781 256.358 335.618 cv
247.954 335.618 li
247.954 343.326 li
258.822 343.326 li
258.985 344.136 259.067 344.963 259.067 345.8 cv
259.067 346.691 258.985 347.544 258.822 348.355 cv
242.052 348.355 li
242.052 319.192 li
cp
f
263.793 319.192 mo
264.979 319.058 266.09 318.941 267.127 318.848 cv
268.164 318.753 269.316 318.705 270.584 318.705 cv
272.064 318.705 273.527 318.842 274.969 319.111 cv
276.409 319.382 277.708 319.86 278.867 320.551 cv
280.027 321.241 280.962 322.174 281.679 323.349 cv
282.391 324.525 282.748 326.02 282.748 327.831 cv
282.748 328.913 282.613 329.866 282.343 330.691 cv
282.074 331.516 281.729 332.24 281.313 332.861 cv
280.894 333.483 280.444 334.017 279.959 334.464 cv
279.475 334.909 279.016 335.268 278.586 335.537 cv
277.898 335.984 li
284.971 348.314 li
284.431 348.369 283.865 348.423 283.272 348.478 cv
282.68 348.531 282.074 348.559 281.454 348.559 cv
280.43 348.559 279.421 348.478 278.424 348.314 cv
270.825 334.768 li
271.795 334.281 li
272.171 334.091 272.63 333.849 273.169 333.55 cv
273.707 333.253 274.227 332.881 274.726 332.435 cv
275.224 331.987 275.647 331.449 275.999 330.813 cv
276.348 330.178 276.525 329.428 276.525 328.562 cv
276.525 326.857 276.04 325.607 275.069 324.81 cv
274.101 324.013 272.847 323.613 271.311 323.613 cv
270.718 323.613 270.179 323.654 269.692 323.734 cv
269.692 348.355 li
269.209 348.409 268.724 348.457 268.239 348.498 cv
267.754 348.538 267.282 348.559 266.825 348.559 cv
266.367 348.559 265.883 348.544 265.371 348.519 cv
264.857 348.491 264.332 348.438 263.793 348.355 cv
263.793 319.192 li
cp
f
288.204 319.192 mo
289.198 319.03 290.185 318.948 291.154 318.948 cv
292.123 318.948 293.12 319.03 294.146 319.192 cv
294.146 348.355 li
293.12 348.519 292.137 348.598 291.194 348.598 cv
290.195 348.598 289.198 348.519 288.204 348.355 cv
288.204 319.192 li
cp
f
311.642 343.895 mo
315.816 343.895 317.905 340.541 317.905 333.835 cv
317.905 330.481 317.4 327.967 316.39 326.29 cv
315.379 324.613 313.81 323.775 311.683 323.775 cv
307.452 323.775 305.337 327.129 305.337 333.835 cv
305.337 340.541 307.438 343.895 311.642 343.895 cv
cp
311.642 348.842 mo
309.46 348.842 307.575 348.463 305.985 347.706 cv
304.395 346.95 303.089 345.901 302.064 344.563 cv
301.041 343.224 300.278 341.642 299.78 339.817 cv
299.282 337.992 299.034 335.998 299.034 333.835 cv
299.034 331.672 299.282 329.663 299.78 327.811 cv
300.278 325.959 301.041 324.357 302.064 323.005 cv
303.089 321.652 304.395 320.599 305.985 319.841 cv
307.575 319.084 309.46 318.705 311.642 318.705 cv
313.825 318.705 315.711 319.084 317.301 319.841 cv
318.889 320.599 320.196 321.652 321.221 323.005 cv
322.245 324.357 323.004 325.959 323.503 327.811 cv
324.001 329.663 324.252 331.672 324.252 333.835 cv
324.252 335.998 324.001 337.992 323.503 339.817 cv
323.004 341.642 322.245 343.224 321.221 344.563 cv
320.196 345.901 318.889 346.95 317.301 347.706 cv
315.711 348.463 313.825 348.842 311.642 348.842 cv
cp
f
329.425 319.192 mo
330.608 319.058 331.721 318.941 332.758 318.848 cv
333.795 318.753 334.947 318.705 336.213 318.705 cv
337.695 318.705 339.155 318.842 340.6 319.111 cv
342.041 319.382 343.34 319.86 344.498 320.551 cv
345.655 321.241 346.594 322.174 347.307 323.349 cv
348.021 324.525 348.377 326.02 348.377 327.831 cv
348.377 328.913 348.242 329.866 347.974 330.691 cv
347.703 331.516 347.361 332.24 346.943 332.861 cv
346.526 333.483 346.076 334.017 345.59 334.464 cv
345.105 334.909 344.646 335.268 344.214 335.537 cv
343.529 335.984 li
350.603 348.314 li
350.063 348.369 349.497 348.423 348.903 348.478 cv
348.311 348.531 347.703 348.559 347.086 348.559 cv
346.062 348.559 345.051 348.478 344.055 348.314 cv
336.457 334.768 li
337.427 334.281 li
337.803 334.091 338.262 333.849 338.8 333.55 cv
339.339 333.253 339.858 332.881 340.356 332.435 cv
340.854 331.987 341.277 331.449 341.63 330.813 cv
341.979 330.178 342.156 329.428 342.156 328.562 cv
342.156 326.857 341.668 325.607 340.699 324.81 cv
339.729 324.013 338.478 323.613 336.942 323.613 cv
336.348 323.613 335.81 323.654 335.324 323.734 cv
335.324 348.355 li
334.841 348.409 334.354 348.457 333.869 348.498 cv
333.385 348.538 332.914 348.559 332.455 348.559 cv
331.995 348.559 331.512 348.544 331.002 348.519 cv
330.489 348.491 329.964 348.438 329.425 348.355 cv
329.425 319.192 li
cp
f
159.331 373.189 mo
159.433 373.171 159.541 373.157 159.656 373.146 cv
159.772 373.138 159.894 373.134 160.023 373.134 cv
160.143 373.134 160.264 373.138 160.383 373.146 cv
160.503 373.157 160.619 373.171 160.73 373.189 cv
160.73 381.937 li
164.637 381.937 li
164.656 382.038 164.667 382.146 164.672 382.256 cv
164.677 382.368 164.679 382.471 164.679 382.563 cv
164.679 382.785 164.665 382.993 164.637 383.188 cv
159.331 383.188 li
159.331 373.189 li
cp
f
168.961 382.256 mo
169.598 382.256 170.069 382.024 170.374 381.561 cv
170.678 381.099 170.831 380.454 170.831 379.629 cv
170.831 378.804 170.678 378.16 170.374 377.702 cv
170.069 377.243 169.598 377.013 168.961 377.013 cv
168.323 377.013 167.854 377.243 167.554 377.702 cv
167.254 378.16 167.104 378.804 167.104 379.629 cv
167.104 380.454 167.254 381.099 167.554 381.561 cv
167.854 382.024 168.323 382.256 168.961 382.256 cv
cp
168.961 383.355 mo
168.406 383.355 167.922 383.261 167.505 383.07 cv
167.09 382.88 166.744 382.617 166.466 382.285 cv
166.189 381.95 165.983 381.558 165.85 381.103 cv
165.716 380.647 165.649 380.156 165.649 379.629 cv
165.649 379.101 165.716 378.608 165.85 378.154 cv
165.983 377.7 166.189 377.306 166.466 376.972 cv
166.744 376.639 167.09 376.374 167.505 376.18 cv
167.922 375.984 168.406 375.889 168.961 375.889 cv
169.515 375.889 170 375.984 170.415 376.18 cv
170.831 376.374 171.177 376.639 171.455 376.972 cv
171.731 377.306 171.937 377.7 172.071 378.154 cv
172.205 378.608 172.272 379.101 172.272 379.629 cv
172.272 380.156 172.205 380.647 172.071 381.103 cv
171.937 381.558 171.731 381.95 171.455 382.285 cv
171.177 382.617 170.831 382.88 170.415 383.07 cv
170 383.261 169.515 383.355 168.961 383.355 cv
cp
f
174.073 376.054 mo
174.175 376.035 174.271 376.021 174.364 376.013 cv
174.457 376.004 174.553 375.999 174.655 375.999 cv
174.756 375.999 174.858 376.004 174.96 376.013 cv
175.062 376.021 175.154 376.035 175.237 376.054 cv
175.265 376.193 175.292 376.377 175.32 376.604 cv
175.348 376.831 175.362 377.022 175.362 377.18 cv
175.556 376.865 175.812 376.592 176.131 376.36 cv
176.45 376.128 176.859 376.013 177.357 376.013 cv
177.585 376.019 li
177.787 376.04 li
177.805 376.123 177.818 376.211 177.828 376.304 cv
177.837 376.396 177.842 376.494 177.842 376.597 cv
177.842 376.708 177.834 376.824 177.821 376.943 cv
177.807 377.064 177.792 377.18 177.772 377.291 cv
177.544 377.265 li
177.357 377.265 li
177.108 377.265 176.87 377.298 176.643 377.369 cv
176.417 377.438 176.214 377.561 176.034 377.737 cv
175.854 377.913 175.71 378.154 175.604 378.459 cv
175.498 378.766 175.445 379.16 175.445 379.642 cv
175.445 383.188 li
175.343 383.206 175.23 383.221 175.105 383.231 cv
174.981 383.239 174.868 383.244 174.766 383.244 cv
174.664 383.244 174.552 383.239 174.426 383.231 cv
174.302 383.221 174.185 383.206 174.073 383.188 cv
174.073 376.054 li
cp
f
183.564 378.933 mo
183.564 378.673 183.53 378.425 183.46 378.189 cv
183.392 377.952 183.289 377.747 183.155 377.569 cv
183.021 377.394 182.851 377.253 182.643 377.146 cv
182.435 377.04 182.188 376.986 181.901 376.986 cv
181.337 376.986 180.906 377.157 180.606 377.499 cv
180.306 377.843 180.124 378.32 180.059 378.933 cv
183.564 378.933 li
cp
180.045 379.962 mo
180.063 380.741 180.264 381.311 180.647 381.672 cv
181.03 382.032 181.597 382.215 182.345 382.215 cv
183 382.215 183.624 382.099 184.215 381.867 cv
184.289 382.006 184.35 382.176 184.396 382.375 cv
184.442 382.573 184.47 382.771 184.479 382.966 cv
184.174 383.095 183.838 383.192 183.474 383.258 cv
183.109 383.322 182.705 383.355 182.261 383.355 cv
181.615 383.355 181.061 383.264 180.599 383.083 cv
180.137 382.902 179.756 382.648 179.456 382.317 cv
179.155 381.99 178.937 381.601 178.798 381.151 cv
178.659 380.701 178.59 380.207 178.59 379.671 cv
178.59 379.14 178.657 378.647 178.791 378.189 cv
178.924 377.73 179.131 377.332 179.407 376.992 cv
179.685 376.655 180.033 376.386 180.454 376.187 cv
180.874 375.987 181.37 375.889 181.943 375.889 cv
182.433 375.889 182.862 375.971 183.232 376.138 cv
183.601 376.304 183.91 376.533 184.16 376.825 cv
184.41 377.117 184.599 377.465 184.728 377.869 cv
184.857 378.271 184.922 378.711 184.922 379.184 cv
184.922 379.313 184.917 379.45 184.908 379.593 cv
184.899 379.736 184.89 379.859 184.881 379.962 cv
180.045 379.962 li
cp
f
186.723 376.054 mo
186.825 376.035 186.923 376.021 187.021 376.013 cv
187.118 376.004 187.217 375.999 187.319 375.999 cv
187.421 375.999 187.516 376.004 187.603 376.013 cv
187.691 376.021 187.786 376.035 187.887 376.054 cv
187.915 376.193 187.943 376.377 187.97 376.604 cv
187.998 376.831 188.012 377.022 188.012 377.18 cv
188.095 377.013 188.199 376.854 188.324 376.701 cv
188.448 376.548 188.596 376.411 188.767 376.291 cv
188.938 376.171 189.134 376.074 189.356 375.999 cv
189.577 375.924 189.823 375.889 190.09 375.889 cv
190.645 375.889 191.071 376.001 191.372 376.228 cv
191.672 376.455 191.9 376.772 192.058 377.18 cv
192.15 377.022 192.263 376.865 192.397 376.708 cv
192.53 376.551 192.682 376.411 192.848 376.291 cv
193.015 376.171 193.203 376.074 193.416 375.999 cv
193.628 375.924 193.868 375.889 194.136 375.889 cv
194.958 375.889 195.557 376.118 195.931 376.582 cv
196.304 377.047 196.492 377.732 196.492 378.64 cv
196.492 383.188 li
196.39 383.206 196.274 383.221 196.145 383.231 cv
196.016 383.239 195.9 383.244 195.799 383.244 cv
195.698 383.244 195.583 383.239 195.459 383.231 cv
195.334 383.221 195.221 383.206 195.12 383.188 cv
195.12 379.043 li
195.12 378.405 195.023 377.925 194.829 377.604 cv
194.635 377.284 194.317 377.125 193.873 377.125 cv
193.402 377.125 193.021 377.296 192.73 377.64 cv
192.439 377.982 192.293 378.487 192.293 379.155 cv
192.293 383.188 li
192.191 383.206 192.079 383.221 191.954 383.231 cv
191.829 383.239 191.716 383.244 191.614 383.244 cv
191.513 383.244 191.399 383.239 191.274 383.231 cv
191.15 383.221 191.037 383.206 190.935 383.188 cv
190.935 378.945 li
190.935 378.325 190.843 377.859 190.659 377.55 cv
190.474 377.239 190.178 377.083 189.771 377.083 cv
189.541 377.083 189.323 377.134 189.121 377.236 cv
188.917 377.338 188.74 377.491 188.587 377.694 cv
188.434 377.899 188.314 378.156 188.227 378.466 cv
188.139 378.778 188.095 379.136 188.095 379.544 cv
188.095 383.188 li
187.993 383.206 187.88 383.221 187.756 383.231 cv
187.63 383.239 187.518 383.244 187.416 383.244 cv
187.314 383.244 187.199 383.239 187.069 383.231 cv
186.94 383.221 186.825 383.206 186.723 383.188 cv
186.723 376.054 li
cp
f
201.951 374.482 mo
201.933 374.372 201.92 374.251 201.916 374.12 cv
201.912 373.991 201.909 373.875 201.909 373.774 cv
201.909 373.672 201.912 373.556 201.916 373.426 cv
201.92 373.297 201.933 373.181 201.951 373.078 cv
202.071 373.06 202.2 373.045 202.339 373.036 cv
202.478 373.026 202.597 373.021 202.699 373.021 cv
202.8 373.021 202.921 373.026 203.06 373.036 cv
203.198 373.045 203.323 373.06 203.433 373.078 cv
203.452 373.181 203.463 373.297 203.468 373.426 cv
203.472 373.556 203.475 373.672 203.475 373.774 cv
203.475 373.875 203.472 373.991 203.468 374.12 cv
203.463 374.251 203.452 374.372 203.433 374.482 cv
203.323 374.501 203.2 374.515 203.065 374.524 cv
202.932 374.534 202.813 374.538 202.712 374.538 cv
202.602 374.538 202.478 374.534 202.339 374.524 cv
202.2 374.515 202.071 374.501 201.951 374.482 cv
cp
202.255 377.139 mo
201.354 377.139 li
201.336 377.064 201.322 376.979 201.313 376.882 cv
201.305 376.784 201.3 376.689 201.3 376.597 cv
201.3 376.504 201.305 376.408 201.313 376.312 cv
201.322 376.214 201.336 376.128 201.354 376.054 cv
203.599 376.054 li
203.599 383.188 li
203.498 383.206 203.385 383.221 203.26 383.231 cv
203.136 383.239 203.022 383.244 202.921 383.244 cv
202.828 383.244 202.72 383.239 202.595 383.231 cv
202.47 383.221 202.356 383.206 202.255 383.188 cv
202.255 377.139 li
cp
f
207.189 382.02 mo
207.364 382.085 207.544 382.13 207.729 382.159 cv
207.914 382.188 208.153 382.2 208.449 382.2 cv
208.782 382.2 209.086 382.147 209.363 382.04 cv
209.641 381.934 209.878 381.77 210.078 381.547 cv
210.276 381.325 210.433 381.044 210.548 380.706 cv
210.664 380.367 210.722 379.967 210.722 379.503 cv
210.722 378.761 210.584 378.173 210.313 377.737 cv
210.04 377.301 209.594 377.083 208.976 377.083 cv
208.745 377.083 208.523 377.125 208.311 377.208 cv
208.098 377.291 207.909 377.417 207.742 377.584 cv
207.577 377.75 207.443 377.962 207.34 378.218 cv
207.238 378.473 207.189 378.775 207.189 379.127 cv
207.189 382.02 li
cp
205.817 376.054 mo
205.909 376.035 206.003 376.021 206.101 376.013 cv
206.197 376.004 206.297 375.999 206.399 375.999 cv
206.491 375.999 206.587 376.004 206.69 376.013 cv
206.792 376.021 206.888 376.035 206.98 376.054 cv
206.989 376.074 207.001 376.13 207.015 376.228 cv
207.029 376.325 207.042 376.429 207.057 376.541 cv
207.07 376.651 207.084 376.76 207.098 376.861 cv
207.112 376.963 207.119 377.027 207.119 377.056 cv
207.211 376.906 207.322 376.765 207.452 376.623 cv
207.582 376.486 207.735 376.36 207.916 376.249 cv
208.096 376.138 208.298 376.048 208.526 375.984 cv
208.751 375.919 209.003 375.889 209.281 375.889 cv
209.696 375.889 210.082 375.955 210.438 376.097 cv
210.793 376.234 211.098 376.451 211.352 376.742 cv
211.606 377.034 211.805 377.405 211.948 377.854 cv
212.091 378.306 212.162 378.835 212.162 379.447 cv
212.162 380.671 211.832 381.628 211.172 382.317 cv
210.512 383.011 209.577 383.355 208.366 383.355 cv
208.163 383.355 207.955 383.342 207.742 383.313 cv
207.53 383.285 207.345 383.249 207.189 383.202 cv
207.189 386.47 li
207.078 386.488 206.959 386.503 206.835 386.512 cv
206.71 386.521 206.597 386.526 206.496 386.526 cv
206.394 386.526 206.281 386.521 206.156 386.512 cv
206.031 386.503 205.918 386.488 205.817 386.47 cv
205.817 376.054 li
cp
f
213.881 381.896 mo
214.13 381.997 214.405 382.078 214.705 382.139 cv
215.005 382.198 215.304 382.228 215.599 382.228 cv
215.812 382.228 216.016 382.205 216.208 382.159 cv
216.403 382.112 216.571 382.043 216.714 381.95 cv
216.858 381.857 216.973 381.744 217.061 381.61 cv
217.148 381.475 217.193 381.325 217.193 381.157 cv
217.193 380.972 217.158 380.82 217.088 380.699 cv
217.019 380.578 216.926 380.476 216.812 380.393 cv
216.696 380.31 216.562 380.237 216.41 380.177 cv
216.257 380.117 216.094 380.06 215.918 380.003 cv
215.433 379.823 li
214.841 379.601 214.413 379.351 214.145 379.072 cv
213.876 378.794 213.742 378.418 213.742 377.945 cv
213.742 377.314 213.966 376.813 214.414 376.443 cv
214.862 376.074 215.521 375.889 216.389 375.889 cv
216.749 375.889 217.102 375.921 217.449 375.992 cv
217.795 376.062 218.098 376.141 218.356 376.234 cv
218.338 376.42 218.303 376.605 218.253 376.791 cv
218.201 376.977 218.139 377.149 218.065 377.306 cv
217.862 377.231 217.62 377.16 217.338 377.089 cv
217.056 377.021 216.753 376.986 216.43 376.986 cv
216.089 376.986 215.786 377.047 215.522 377.167 cv
215.26 377.286 215.128 377.499 215.128 377.807 cv
215.128 377.964 215.16 378.098 215.225 378.21 cv
215.29 378.32 215.377 378.416 215.488 378.496 cv
215.599 378.573 215.726 378.64 215.87 378.696 cv
216.013 378.752 216.167 378.808 216.333 378.863 cv
216.943 379.072 li
217.165 379.146 217.375 379.232 217.573 379.335 cv
217.772 379.438 217.943 379.566 218.086 379.718 cv
218.229 379.871 218.344 380.057 218.433 380.274 cv
218.521 380.491 218.564 380.754 218.564 381.06 cv
218.564 381.403 218.495 381.717 218.356 382 cv
218.218 382.282 218.022 382.523 217.767 382.723 cv
217.513 382.921 217.207 383.076 216.846 383.188 cv
216.486 383.299 216.089 383.355 215.655 383.355 cv
215.211 383.355 214.823 383.326 214.491 383.264 cv
214.158 383.203 213.849 383.124 213.563 383.021 cv
213.581 382.837 213.62 382.648 213.68 382.459 cv
213.74 382.269 213.807 382.081 213.881 381.896 cv
cp
f
220.227 376.054 mo
220.329 376.035 220.443 376.021 220.573 376.013 cv
220.702 376.004 220.813 375.999 220.906 375.999 cv
221.007 375.999 221.123 376.004 221.252 376.013 cv
221.382 376.021 221.496 376.035 221.6 376.054 cv
221.6 379.962 li
221.6 380.407 221.64 380.774 221.724 381.066 cv
221.807 381.358 221.931 381.59 222.098 381.756 cv
222.264 381.922 222.467 382.038 222.708 382.103 cv
222.948 382.169 223.224 382.2 223.539 382.2 cv
224.01 382.2 224.412 382.15 224.745 382.048 cv
224.745 376.054 li
224.846 376.035 224.959 376.021 225.084 376.013 cv
225.209 376.004 225.322 375.999 225.423 375.999 cv
225.524 375.999 225.639 376.004 225.763 376.013 cv
225.888 376.021 226 376.035 226.102 376.054 cv
226.102 382.966 li
225.778 383.059 225.393 383.146 224.945 383.231 cv
224.497 383.313 224.033 383.355 223.552 383.355 cv
223.1 383.355 222.673 383.315 222.271 383.237 cv
221.869 383.158 221.516 382.997 221.211 382.758 cv
220.906 382.515 220.666 382.178 220.49 381.741 cv
220.314 381.307 220.227 380.731 220.227 380.017 cv
220.227 376.054 li
cp
f
228.263 376.054 mo
228.365 376.035 228.464 376.021 228.561 376.013 cv
228.658 376.004 228.757 375.999 228.858 375.999 cv
228.96 375.999 229.055 376.004 229.143 376.013 cv
229.231 376.021 229.326 376.035 229.427 376.054 cv
229.455 376.193 229.483 376.377 229.511 376.604 cv
229.538 376.831 229.552 377.022 229.552 377.18 cv
229.635 377.013 229.738 376.854 229.863 376.701 cv
229.988 376.548 230.137 376.411 230.307 376.291 cv
230.478 376.171 230.674 376.074 230.896 375.999 cv
231.117 375.924 231.362 375.889 231.631 375.889 cv
232.185 375.889 232.61 376.001 232.911 376.228 cv
233.213 376.455 233.441 376.772 233.599 377.18 cv
233.689 377.022 233.804 376.865 233.937 376.708 cv
234.07 376.551 234.221 376.411 234.389 376.291 cv
234.555 376.171 234.742 376.074 234.957 375.999 cv
235.169 375.924 235.407 375.889 235.677 375.889 cv
236.499 375.889 237.096 376.118 237.471 376.582 cv
237.847 377.047 238.033 377.732 238.033 378.64 cv
238.033 383.188 li
237.931 383.206 237.814 383.221 237.686 383.231 cv
237.558 383.239 237.438 383.244 237.338 383.244 cv
237.236 383.244 237.124 383.239 236.999 383.231 cv
236.875 383.221 236.761 383.206 236.659 383.188 cv
236.659 379.043 li
236.659 378.405 236.562 377.925 236.368 377.604 cv
236.175 377.284 235.856 377.125 235.412 377.125 cv
234.943 377.125 234.562 377.296 234.271 377.64 cv
233.98 377.982 233.833 378.487 233.833 379.155 cv
233.833 383.188 li
233.732 383.206 233.619 383.221 233.495 383.231 cv
233.369 383.239 233.256 383.244 233.154 383.244 cv
233.053 383.244 232.94 383.239 232.814 383.231 cv
232.69 383.221 232.577 383.206 232.476 383.188 cv
232.476 378.945 li
232.476 378.325 232.384 377.859 232.198 377.55 cv
232.013 377.239 231.718 377.083 231.312 377.083 cv
231.08 377.083 230.863 377.134 230.661 377.236 cv
230.457 377.338 230.28 377.491 230.128 377.694 cv
229.974 377.899 229.854 378.156 229.767 378.466 cv
229.678 378.778 229.635 379.136 229.635 379.544 cv
229.635 383.188 li
229.533 383.206 229.42 383.221 229.295 383.231 cv
229.171 383.239 229.058 383.244 228.956 383.244 cv
228.854 383.244 228.739 383.239 228.609 383.231 cv
228.48 383.221 228.365 383.206 228.263 383.188 cv
228.263 376.054 li
cp
f
247.939 377.265 mo
247.754 377.189 247.556 377.134 247.342 377.097 cv
247.131 377.06 246.9 377.041 246.649 377.041 cv
246.271 377.041 245.944 377.11 245.666 377.25 cv
245.389 377.389 245.161 377.579 244.98 377.82 cv
244.801 378.062 244.665 378.347 244.579 378.675 cv
244.492 379.005 244.446 379.364 244.446 379.754 cv
244.455 380.635 244.662 381.264 245.071 381.644 cv
245.477 382.024 246.032 382.215 246.732 382.215 cv
246.972 382.215 247.196 382.203 247.398 382.181 cv
247.602 382.158 247.781 382.122 247.939 382.076 cv
247.939 377.265 li
cp
247.939 372.995 mo
248.041 372.976 248.156 372.962 248.285 372.952 cv
248.413 372.943 248.526 372.938 248.618 372.938 cv
248.72 372.938 248.833 372.943 248.957 372.952 cv
249.082 372.962 249.195 372.976 249.298 372.995 cv
249.298 382.993 li
248.945 383.095 248.553 383.181 248.117 383.251 cv
247.685 383.32 247.201 383.355 246.664 383.355 cv
246.165 383.355 245.691 383.292 245.245 383.168 cv
244.796 383.042 244.406 382.837 244.071 382.549 cv
243.74 382.262 243.476 381.891 243.282 381.435 cv
243.089 380.981 242.992 380.421 242.992 379.754 cv
242.992 379.179 243.077 378.654 243.248 378.183 cv
243.421 377.709 243.661 377.304 243.975 376.965 cv
244.29 376.626 244.665 376.365 245.104 376.18 cv
245.545 375.994 246.032 375.901 246.566 375.901 cv
246.808 375.901 247.048 375.919 247.295 375.955 cv
247.538 375.994 247.754 376.04 247.939 376.097 cv
247.939 372.995 li
cp
f
254.383 382.256 mo
255.019 382.256 255.491 382.024 255.794 381.561 cv
256.099 381.099 256.252 380.454 256.252 379.629 cv
256.252 378.804 256.099 378.16 255.794 377.702 cv
255.491 377.243 255.019 377.013 254.383 377.013 cv
253.744 377.013 253.275 377.243 252.976 377.702 cv
252.675 378.16 252.524 378.804 252.524 379.629 cv
252.524 380.454 252.675 381.099 252.976 381.561 cv
253.275 382.024 253.744 382.256 254.383 382.256 cv
cp
254.383 383.355 mo
253.829 383.355 253.344 383.261 252.926 383.07 cv
252.511 382.88 252.165 382.617 251.888 382.285 cv
251.611 381.95 251.406 381.558 251.271 381.103 cv
251.138 380.647 251.069 380.156 251.069 379.629 cv
251.069 379.101 251.138 378.608 251.271 378.154 cv
251.406 377.7 251.611 377.306 251.888 376.972 cv
252.165 376.639 252.511 376.374 252.926 376.18 cv
253.344 375.984 253.829 375.889 254.383 375.889 cv
254.936 375.889 255.421 375.984 255.838 376.18 cv
256.252 376.374 256.599 376.639 256.876 376.972 cv
257.152 377.306 257.36 377.7 257.493 378.154 cv
257.627 378.608 257.692 379.101 257.692 379.629 cv
257.692 380.156 257.627 380.647 257.493 381.103 cv
257.36 381.558 257.152 381.95 256.876 382.285 cv
256.599 382.617 256.252 382.88 255.838 383.07 cv
255.421 383.261 254.936 383.355 254.383 383.355 cv
cp
f
259.467 372.995 mo
259.567 372.976 259.683 372.962 259.806 372.952 cv
259.931 372.943 260.043 372.938 260.145 372.938 cv
260.246 372.938 260.36 372.943 260.485 372.952 cv
260.609 372.962 260.723 372.976 260.824 372.995 cv
260.824 381.032 li
260.824 381.293 260.848 381.497 260.894 381.644 cv
260.94 381.793 261.002 381.907 261.082 381.985 cv
261.159 382.065 261.252 382.114 261.359 382.139 cv
261.464 382.162 261.577 382.174 261.698 382.174 cv
261.779 382.174 261.875 382.169 261.98 382.159 cv
262.089 382.15 262.178 382.136 262.251 382.117 cv
262.335 382.442 262.377 382.793 262.377 383.174 cv
262.246 383.221 262.091 383.251 261.906 383.264 cv
261.721 383.278 261.551 383.285 261.392 383.285 cv
261.125 383.285 260.875 383.253 260.645 383.188 cv
260.413 383.124 260.21 383.017 260.035 382.868 cv
259.857 382.721 259.722 382.52 259.619 382.271 cv
259.518 382.02 259.467 381.71 259.467 381.339 cv
259.467 372.995 li
cp
f
266.505 382.256 mo
267.143 382.256 267.613 382.024 267.919 381.561 cv
268.223 381.099 268.376 380.454 268.376 379.629 cv
268.376 378.804 268.223 378.16 267.919 377.702 cv
267.613 377.243 267.143 377.013 266.505 377.013 cv
265.869 377.013 265.399 377.243 265.101 377.702 cv
264.8 378.16 264.648 378.804 264.648 379.629 cv
264.648 380.454 264.8 381.099 265.101 381.561 cv
265.399 382.024 265.869 382.256 266.505 382.256 cv
cp
266.505 383.355 mo
265.951 383.355 265.467 383.261 265.05 383.07 cv
264.634 382.88 264.287 382.617 264.011 382.285 cv
263.735 381.95 263.527 381.558 263.395 381.103 cv
263.261 380.647 263.194 380.156 263.194 379.629 cv
263.194 379.101 263.261 378.608 263.395 378.154 cv
263.527 377.7 263.735 377.306 264.011 376.972 cv
264.287 376.639 264.634 376.374 265.05 376.18 cv
265.467 375.984 265.951 375.889 266.505 375.889 cv
267.059 375.889 267.544 375.984 267.959 376.18 cv
268.376 376.374 268.721 376.639 268.998 376.972 cv
269.276 377.306 269.481 377.7 269.617 378.154 cv
269.749 378.608 269.817 379.101 269.817 379.629 cv
269.817 380.156 269.749 380.647 269.617 381.103 cv
269.481 381.558 269.276 381.95 268.998 382.285 cv
268.721 382.617 268.376 382.88 267.959 383.07 cv
267.544 383.261 267.059 383.355 266.505 383.355 cv
cp
f
271.617 376.054 mo
271.719 376.035 271.815 376.021 271.908 376.013 cv
272.001 376.004 272.098 375.999 272.198 375.999 cv
272.301 375.999 272.401 376.004 272.506 376.013 cv
272.606 376.021 272.7 376.035 272.781 376.054 cv
272.811 376.193 272.837 376.377 272.863 376.604 cv
272.893 376.831 272.907 377.022 272.907 377.18 cv
273.102 376.865 273.356 376.592 273.675 376.36 cv
273.993 376.128 274.402 376.013 274.902 376.013 cv
275.131 376.019 li
275.331 376.04 li
275.349 376.123 275.363 376.211 275.371 376.304 cv
275.381 376.396 275.388 376.494 275.388 376.597 cv
275.388 376.708 275.379 376.824 275.365 376.943 cv
275.352 377.064 275.336 377.18 275.317 377.291 cv
275.087 377.265 li
274.902 377.265 li
274.652 377.265 274.414 377.298 274.188 377.369 cv
273.962 377.438 273.76 377.561 273.58 377.737 cv
273.398 377.913 273.255 378.154 273.147 378.459 cv
273.043 378.766 272.99 379.16 272.99 379.642 cv
272.99 383.188 li
272.89 383.206 272.774 383.221 272.649 383.231 cv
272.526 383.239 272.413 383.244 272.313 383.244 cv
272.208 383.244 272.095 383.239 271.972 383.231 cv
271.848 383.221 271.729 383.206 271.617 383.188 cv
271.617 376.054 li
cp
f
279.932 381.896 mo
280.18 381.997 280.456 382.078 280.755 382.139 cv
281.055 382.198 281.355 382.228 281.65 382.228 cv
281.863 382.228 282.065 382.205 282.259 382.159 cv
282.454 382.112 282.621 382.043 282.765 381.95 cv
282.906 381.857 283.023 381.744 283.112 381.61 cv
283.197 381.475 283.243 381.325 283.243 381.157 cv
283.243 380.972 283.209 380.82 283.139 380.699 cv
283.068 380.578 282.977 380.476 282.861 380.393 cv
282.748 380.31 282.611 380.237 282.461 380.177 cv
282.308 380.117 282.145 380.06 281.968 380.003 cv
281.483 379.823 li
280.893 379.601 280.462 379.351 280.196 379.072 cv
279.927 378.794 279.793 378.418 279.793 377.945 cv
279.793 377.314 280.018 376.813 280.464 376.443 cv
280.913 376.074 281.571 375.889 282.439 375.889 cv
282.798 375.889 283.153 375.921 283.501 375.992 cv
283.845 376.062 284.146 376.141 284.406 376.234 cv
284.388 376.42 284.352 376.605 284.303 376.791 cv
284.251 376.977 284.19 377.149 284.115 377.306 cv
283.912 377.231 283.669 377.16 283.387 377.089 cv
283.104 377.021 282.803 376.986 282.48 376.986 cv
282.141 376.986 281.837 377.047 281.574 377.167 cv
281.31 377.286 281.179 377.499 281.179 377.807 cv
281.179 377.964 281.21 378.098 281.275 378.21 cv
281.339 378.32 281.428 378.416 281.54 378.496 cv
281.65 378.573 281.776 378.64 281.922 378.696 cv
282.063 378.752 282.217 378.808 282.384 378.863 cv
282.993 379.072 li
283.217 379.146 283.426 379.232 283.624 379.335 cv
283.821 379.438 283.994 379.566 284.135 379.718 cv
284.28 379.871 284.395 380.057 284.482 380.274 cv
284.571 380.491 284.614 380.754 284.614 381.06 cv
284.614 381.403 284.544 381.717 284.406 382 cv
284.269 382.282 284.07 382.523 283.816 382.723 cv
283.563 382.921 283.256 383.076 282.896 383.188 cv
282.536 383.299 282.141 383.355 281.704 383.355 cv
281.263 383.355 280.875 383.326 280.541 383.264 cv
280.209 383.203 279.897 383.124 279.613 383.021 cv
279.632 382.837 279.671 382.648 279.732 382.459 cv
279.791 382.269 279.857 382.081 279.932 381.896 cv
cp
f
286.473 374.482 mo
286.454 374.372 286.443 374.251 286.438 374.12 cv
286.432 373.991 286.43 373.875 286.43 373.774 cv
286.43 373.672 286.432 373.556 286.438 373.426 cv
286.443 373.297 286.454 373.181 286.473 373.078 cv
286.592 373.06 286.723 373.045 286.86 373.036 cv
286.998 373.026 287.119 373.021 287.221 373.021 cv
287.322 373.021 287.442 373.026 287.579 373.036 cv
287.719 373.045 287.843 373.06 287.954 373.078 cv
287.972 373.181 287.986 373.297 287.99 373.426 cv
287.994 373.556 287.996 373.672 287.996 373.774 cv
287.996 373.875 287.994 373.991 287.99 374.12 cv
287.986 374.251 287.972 374.372 287.954 374.482 cv
287.843 374.501 287.722 374.515 287.588 374.524 cv
287.454 374.534 287.335 374.538 287.235 374.538 cv
287.124 374.538 286.998 374.534 286.86 374.524 cv
286.723 374.515 286.592 374.501 286.473 374.482 cv
cp
286.776 377.139 mo
285.877 377.139 li
285.856 377.064 285.843 376.979 285.834 376.882 cv
285.825 376.784 285.82 376.689 285.82 376.597 cv
285.82 376.504 285.825 376.408 285.834 376.312 cv
285.843 376.214 285.856 376.128 285.877 376.054 cv
288.12 376.054 li
288.12 383.188 li
288.02 383.206 287.906 383.221 287.782 383.231 cv
287.655 383.239 287.544 383.244 287.442 383.244 cv
287.35 383.244 287.241 383.239 287.116 383.231 cv
286.991 383.221 286.878 383.206 286.776 383.188 cv
286.776 377.139 li
cp
f
290.615 377.152 mo
289.534 377.152 li
289.478 376.959 li
291.861 374.287 li
291.973 374.287 li
291.973 376.054 li
293.773 376.054 li
293.811 376.211 293.829 376.389 293.829 376.582 cv
293.829 376.685 293.824 376.782 293.815 376.875 cv
293.806 376.967 293.793 377.06 293.773 377.152 cv
291.973 377.152 li
291.973 380.407 li
291.973 380.797 291.988 381.107 292.022 381.339 cv
292.054 381.57 292.109 381.748 292.187 381.875 cv
292.266 382 292.371 382.083 292.508 382.124 cv
292.639 382.166 292.81 382.188 293.013 382.188 cv
293.17 382.188 293.316 382.176 293.456 382.152 cv
293.594 382.129 293.718 382.103 293.829 382.076 cv
293.895 382.262 293.933 382.45 293.949 382.646 cv
293.962 382.842 293.969 383.012 293.969 383.161 cv
293.783 383.206 293.59 383.241 293.388 383.264 cv
293.183 383.287 292.965 383.299 292.734 383.299 cv
292.07 383.299 291.551 383.137 291.177 382.812 cv
290.802 382.488 290.615 381.95 290.615 381.2 cv
290.615 377.152 li
cp
f
302.351 379.836 mo
302.212 379.818 302.035 379.799 301.823 379.781 cv
301.611 379.764 301.431 379.754 301.284 379.754 cv
300.711 379.754 300.273 379.859 299.975 380.073 cv
299.674 380.286 299.523 380.611 299.523 381.047 cv
299.523 381.325 299.576 381.542 299.676 381.7 cv
299.778 381.857 299.903 381.979 300.058 382.062 cv
300.21 382.146 300.378 382.195 300.563 382.215 cv
300.747 382.233 300.924 382.243 301.09 382.243 cv
301.303 382.243 301.521 382.229 301.748 382.207 cv
301.975 382.186 302.176 382.15 302.351 382.103 cv
302.351 379.836 li
cp
302.351 378.487 mo
302.351 377.94 302.212 377.561 301.934 377.348 cv
301.659 377.134 301.255 377.027 300.729 377.027 cv
300.406 377.027 300.104 377.054 299.823 377.104 cv
299.542 377.155 299.266 377.222 298.998 377.306 cv
298.822 376.999 298.733 376.634 298.733 376.207 cv
299.047 376.105 299.394 376.025 299.773 375.971 cv
300.151 375.915 300.519 375.889 300.867 375.889 cv
301.792 375.889 302.494 376.099 302.974 376.519 cv
303.454 376.942 303.694 377.616 303.694 378.543 cv
303.694 383.008 li
303.37 383.081 302.978 383.158 302.518 383.237 cv
302.056 383.315 301.585 383.355 301.104 383.355 cv
300.65 383.355 300.242 383.313 299.877 383.231 cv
299.513 383.146 299.202 383.012 298.948 382.826 cv
298.696 382.641 298.5 382.404 298.358 382.117 cv
298.223 381.829 298.152 381.483 298.152 381.073 cv
298.152 380.676 298.233 380.327 298.396 380.024 cv
298.555 379.724 298.777 379.474 299.055 379.274 cv
299.328 379.074 299.648 378.925 300.008 378.828 cv
300.369 378.73 300.747 378.683 301.146 378.683 cv
301.44 378.683 301.684 378.69 301.872 378.703 cv
302.062 378.718 302.22 378.732 302.351 378.752 cv
302.351 378.487 li
cp
f
305.759 376.054 mo
305.859 376.035 305.959 376.021 306.056 376.013 cv
306.153 376.004 306.253 375.999 306.354 375.999 cv
306.455 375.999 306.549 376.004 306.639 376.013 cv
306.727 376.021 306.82 376.035 306.923 376.054 cv
306.952 376.193 306.979 376.377 307.006 376.604 cv
307.035 376.831 307.05 377.022 307.05 377.18 cv
307.132 377.013 307.236 376.854 307.36 376.701 cv
307.484 376.548 307.633 376.411 307.805 376.291 cv
307.973 376.171 308.169 376.074 308.394 375.999 cv
308.614 375.924 308.857 375.889 309.125 375.889 cv
309.681 375.889 310.106 376.001 310.409 376.228 cv
310.709 376.455 310.937 376.772 311.095 377.18 cv
311.188 377.022 311.3 376.865 311.433 376.708 cv
311.568 376.551 311.717 376.411 311.884 376.291 cv
312.051 376.171 312.239 376.074 312.452 375.999 cv
312.665 375.924 312.903 375.889 313.173 375.889 cv
313.995 375.889 314.592 376.118 314.966 376.582 cv
315.342 377.047 315.529 377.732 315.529 378.64 cv
315.529 383.188 li
315.427 383.206 315.312 383.221 315.182 383.231 cv
315.053 383.239 314.937 383.244 314.836 383.244 cv
314.732 383.244 314.618 383.239 314.495 383.231 cv
314.371 383.221 314.259 383.206 314.157 383.188 cv
314.157 379.043 li
314.157 378.405 314.06 377.925 313.865 377.604 cv
313.671 377.284 313.353 377.125 312.91 377.125 cv
312.438 377.125 312.058 377.296 311.767 377.64 cv
311.477 377.982 311.329 378.487 311.329 379.155 cv
311.329 383.188 li
311.228 383.206 311.114 383.221 310.991 383.231 cv
310.864 383.239 310.752 383.244 310.65 383.244 cv
310.548 383.244 310.437 383.239 310.313 383.231 cv
310.187 383.221 310.072 383.206 309.971 383.188 cv
309.971 378.945 li
309.971 378.325 309.879 377.859 309.694 377.55 cv
309.509 377.239 309.214 377.083 308.809 377.083 cv
308.578 377.083 308.359 377.134 308.155 377.236 cv
307.953 377.338 307.774 377.491 307.623 377.694 cv
307.47 377.899 307.351 378.156 307.264 378.466 cv
307.176 378.778 307.132 379.136 307.132 379.544 cv
307.132 383.188 li
307.028 383.206 306.916 383.221 306.792 383.231 cv
306.668 383.239 306.552 383.244 306.452 383.244 cv
306.35 383.244 306.235 383.239 306.106 383.231 cv
305.976 383.221 305.859 383.206 305.759 383.188 cv
305.759 376.054 li
cp
f
322.138 378.933 mo
322.138 378.673 322.102 378.425 322.031 378.189 cv
321.966 377.952 321.863 377.747 321.729 377.569 cv
321.595 377.394 321.424 377.253 321.216 377.146 cv
321.008 377.04 320.76 376.986 320.474 376.986 cv
319.91 376.986 319.479 377.157 319.179 377.499 cv
318.88 377.843 318.697 378.32 318.632 378.933 cv
322.138 378.933 li
cp
318.617 379.962 mo
318.637 380.741 318.836 381.311 319.22 381.672 cv
319.604 382.032 320.169 382.215 320.919 382.215 cv
321.574 382.215 322.197 382.099 322.788 381.867 cv
322.862 382.006 322.923 382.176 322.969 382.375 cv
323.016 382.573 323.043 382.771 323.052 382.966 cv
322.748 383.095 322.411 383.192 322.048 383.258 cv
321.684 383.322 321.278 383.355 320.835 383.355 cv
320.187 383.355 319.633 383.264 319.172 383.083 cv
318.71 382.902 318.328 382.648 318.029 382.317 cv
317.729 381.99 317.508 381.601 317.371 381.151 cv
317.232 380.701 317.163 380.207 317.163 379.671 cv
317.163 379.14 317.228 378.647 317.364 378.189 cv
317.497 377.73 317.702 377.332 317.979 376.992 cv
318.258 376.655 318.606 376.386 319.026 376.187 cv
319.448 375.987 319.943 375.889 320.517 375.889 cv
321.006 375.889 321.435 375.971 321.805 376.138 cv
322.175 376.304 322.483 376.533 322.733 376.825 cv
322.981 377.117 323.171 377.465 323.303 377.869 cv
323.431 378.271 323.496 378.711 323.496 379.184 cv
323.496 379.313 323.491 379.45 323.479 379.593 cv
323.472 379.736 323.462 379.859 323.453 379.962 cv
318.617 379.962 li
cp
f
325.559 377.152 mo
324.479 377.152 li
324.423 376.959 li
326.807 374.287 li
326.917 374.287 li
326.917 376.054 li
328.718 376.054 li
328.755 376.211 328.773 376.389 328.773 376.582 cv
328.773 376.685 328.769 376.782 328.759 376.875 cv
328.75 376.967 328.736 377.06 328.718 377.152 cv
326.917 377.152 li
326.917 380.407 li
326.917 380.797 326.933 381.107 326.967 381.339 cv
326.998 381.57 327.055 381.748 327.131 381.875 cv
327.211 382 327.316 382.083 327.451 382.124 cv
327.585 382.166 327.754 382.188 327.957 382.188 cv
328.115 382.188 328.261 382.176 328.401 382.152 cv
328.538 382.129 328.663 382.103 328.773 382.076 cv
328.839 382.262 328.876 382.45 328.893 382.646 cv
328.907 382.842 328.913 383.012 328.913 383.161 cv
328.728 383.206 328.533 383.241 328.331 383.264 cv
328.128 383.287 327.908 383.299 327.68 383.299 cv
327.015 383.299 326.495 383.137 326.12 382.812 cv
325.747 382.488 325.559 381.95 325.559 381.2 cv
325.559 377.152 li
cp
f
330.244 381.658 mo
330.354 381.64 330.467 381.624 330.581 381.61 cv
330.696 381.596 330.806 381.59 330.909 381.59 cv
331.12 381.59 331.356 381.612 331.615 381.658 cv
330.742 384.76 li
330.632 384.778 330.517 384.79 330.401 384.795 cv
330.287 384.8 330.178 384.802 330.076 384.802 cv
329.967 384.802 329.855 384.8 329.743 384.795 cv
329.632 384.79 329.526 384.778 329.425 384.76 cv
330.244 381.658 li
cp
f
341.231 381.95 mo
341.303 382.081 341.369 382.243 341.425 382.438 cv
341.479 382.633 341.511 382.831 341.522 383.036 cv
340.977 383.249 340.352 383.355 339.65 383.355 cv
338.469 383.355 337.577 383.019 336.976 382.347 cv
336.376 381.675 336.075 380.769 336.075 379.629 cv
336.075 379.101 336.15 378.608 336.296 378.154 cv
336.445 377.7 336.664 377.306 336.955 376.972 cv
337.246 376.639 337.608 376.374 338.043 376.18 cv
338.478 375.984 338.98 375.889 339.553 375.889 cv
339.94 375.889 340.283 375.911 340.579 375.955 cv
340.874 376.004 341.156 376.077 341.425 376.18 cv
341.425 376.336 341.402 376.519 341.361 376.728 cv
341.318 376.937 341.262 377.12 341.188 377.277 cv
340.734 377.12 340.218 377.041 339.637 377.041 cv
338.926 377.041 338.394 377.277 338.043 377.75 cv
337.693 378.224 337.517 378.849 337.517 379.629 cv
337.517 380.519 337.715 381.17 338.111 381.582 cv
338.51 381.995 339.055 382.2 339.746 382.2 cv
340.023 382.2 340.281 382.183 340.516 382.146 cv
340.752 382.107 340.99 382.043 341.231 381.95 cv
cp
f
345.789 382.256 mo
346.425 382.256 346.896 382.024 347.2 381.561 cv
347.507 381.099 347.658 380.454 347.658 379.629 cv
347.658 378.804 347.507 378.16 347.2 377.702 cv
346.896 377.243 346.425 377.013 345.789 377.013 cv
345.15 377.013 344.682 377.243 344.382 377.702 cv
344.081 378.16 343.931 378.804 343.931 379.629 cv
343.931 380.454 344.081 381.099 344.382 381.561 cv
344.682 382.024 345.15 382.256 345.789 382.256 cv
cp
345.789 383.355 mo
345.234 383.355 344.749 383.261 344.334 383.07 cv
343.917 382.88 343.571 382.617 343.294 382.285 cv
343.017 381.95 342.813 381.558 342.677 381.103 cv
342.543 380.647 342.476 380.156 342.476 379.629 cv
342.476 379.101 342.543 378.608 342.677 378.154 cv
342.813 377.7 343.017 377.306 343.294 376.972 cv
343.571 376.639 343.917 376.374 344.334 376.18 cv
344.749 375.984 345.234 375.889 345.789 375.889 cv
346.342 375.889 346.829 375.984 347.244 376.18 cv
347.658 376.374 348.005 376.639 348.282 376.972 cv
348.561 377.306 348.765 377.7 348.898 378.154 cv
349.032 378.608 349.099 379.101 349.099 379.629 cv
349.099 380.156 349.032 380.647 348.898 381.103 cv
348.765 381.558 348.561 381.95 348.282 382.285 cv
348.005 382.617 347.658 382.88 347.244 383.07 cv
346.829 383.261 346.342 383.355 345.789 383.355 cv
cp
f
350.9 376.054 mo
351.003 376.035 351.103 376.021 351.199 376.013 cv
351.296 376.004 351.396 375.999 351.496 375.999 cv
351.599 375.999 351.692 376.004 351.78 376.013 cv
351.868 376.021 351.963 376.035 352.064 376.054 cv
352.092 376.193 352.119 376.382 352.148 376.616 cv
352.175 376.854 352.189 377.052 352.189 377.208 cv
352.281 377.052 352.398 376.894 352.543 376.736 cv
352.686 376.579 352.85 376.436 353.034 376.312 cv
353.22 376.187 353.431 376.085 353.673 376.006 cv
353.911 375.926 354.176 375.889 354.463 375.889 cv
355.274 375.889 355.875 376.121 356.261 376.589 cv
356.652 377.058 356.846 377.75 356.846 378.668 cv
356.846 383.188 li
356.742 383.206 356.628 383.221 356.498 383.231 cv
356.37 383.239 356.253 383.244 356.151 383.244 cv
356.05 383.244 355.938 383.239 355.813 383.231 cv
355.689 383.221 355.574 383.206 355.472 383.188 cv
355.472 379.043 li
355.472 378.386 355.372 377.901 355.168 377.591 cv
354.966 377.279 354.643 377.125 354.198 377.125 cv
353.938 377.125 353.695 377.172 353.463 377.265 cv
353.233 377.357 353.029 377.499 352.854 377.694 cv
352.678 377.89 352.538 378.143 352.433 378.452 cv
352.327 378.764 352.271 379.136 352.271 379.573 cv
352.271 383.188 li
352.172 383.206 352.058 383.221 351.932 383.231 cv
351.808 383.239 351.695 383.244 351.594 383.244 cv
351.491 383.244 351.378 383.239 351.246 383.231 cv
351.118 383.221 351.003 383.206 350.9 383.188 cv
350.9 376.054 li
cp
f
358.783 381.896 mo
359.033 381.997 359.309 382.078 359.609 382.139 cv
359.908 382.198 360.207 382.228 360.502 382.228 cv
360.716 382.228 360.919 382.205 361.113 382.159 cv
361.307 382.112 361.474 382.043 361.618 381.95 cv
361.76 381.857 361.876 381.744 361.966 381.61 cv
362.052 381.475 362.096 381.325 362.096 381.157 cv
362.096 380.972 362.063 380.82 361.992 380.699 cv
361.922 380.578 361.83 380.476 361.716 380.393 cv
361.6 380.31 361.465 380.237 361.313 380.177 cv
361.16 380.117 360.996 380.06 360.821 380.003 cv
360.336 379.823 li
359.743 379.601 359.315 379.351 359.048 379.072 cv
358.778 378.794 358.645 378.418 358.645 377.945 cv
358.645 377.314 358.869 376.813 359.317 376.443 cv
359.767 376.074 360.423 375.889 361.294 375.889 cv
361.652 375.889 362.006 375.921 362.354 375.992 cv
362.697 376.062 363.001 376.141 363.259 376.234 cv
363.241 376.42 363.205 376.605 363.157 376.791 cv
363.104 376.977 363.043 377.149 362.969 377.306 cv
362.766 377.231 362.522 377.16 362.24 377.089 cv
361.959 377.021 361.655 376.986 361.334 376.986 cv
360.992 376.986 360.688 377.047 360.428 377.167 cv
360.163 377.286 360.029 377.499 360.029 377.807 cv
360.029 377.964 360.063 378.098 360.127 378.21 cv
360.193 378.32 360.28 378.416 360.392 378.496 cv
360.502 378.573 360.63 378.64 360.772 378.696 cv
360.917 378.752 361.069 378.808 361.237 378.863 cv
361.845 379.072 li
362.069 379.146 362.279 379.232 362.477 379.335 cv
362.675 379.438 362.848 379.566 362.989 379.718 cv
363.133 379.871 363.248 380.057 363.337 380.274 cv
363.425 380.491 363.467 380.754 363.467 381.06 cv
363.467 381.403 363.397 381.717 363.259 382 cv
363.123 382.282 362.923 382.523 362.671 382.723 cv
362.416 382.921 362.109 383.076 361.749 383.188 cv
361.39 383.299 360.992 383.355 360.558 383.355 cv
360.114 383.355 359.726 383.326 359.396 383.264 cv
359.061 383.203 358.752 383.124 358.465 383.021 cv
358.483 382.837 358.523 382.648 358.582 382.459 cv
358.643 382.269 358.71 382.081 358.783 381.896 cv
cp
f
369.759 378.933 mo
369.759 378.673 369.724 378.425 369.653 378.189 cv
369.586 377.952 369.484 377.747 369.349 377.569 cv
369.216 377.394 369.045 377.253 368.837 377.146 cv
368.629 377.04 368.381 376.986 368.095 376.986 cv
367.53 376.986 367.101 377.157 366.801 377.499 cv
366.5 377.843 366.318 378.32 366.252 378.933 cv
369.759 378.933 li
cp
366.239 379.962 mo
366.257 380.741 366.458 381.311 366.841 381.672 cv
367.224 382.032 367.79 382.215 368.538 382.215 cv
369.195 382.215 369.818 382.099 370.408 381.867 cv
370.482 382.006 370.544 382.176 370.59 382.375 cv
370.637 382.573 370.664 382.771 370.672 382.966 cv
370.368 383.095 370.032 383.192 369.669 383.258 cv
369.305 383.322 368.9 383.355 368.456 383.355 cv
367.809 383.355 367.253 383.264 366.794 383.083 cv
366.332 382.902 365.95 382.648 365.649 382.317 cv
365.351 381.99 365.129 381.601 364.992 381.151 cv
364.854 380.701 364.784 380.207 364.784 379.671 cv
364.784 379.14 364.85 378.647 364.984 378.189 cv
365.117 377.73 365.323 377.332 365.601 376.992 cv
365.878 376.655 366.228 376.386 366.648 376.187 cv
367.068 375.987 367.564 375.889 368.138 375.889 cv
368.627 375.889 369.056 375.971 369.426 376.138 cv
369.795 376.304 370.104 376.533 370.354 376.825 cv
370.604 377.117 370.793 377.465 370.922 377.869 cv
371.051 378.271 371.117 378.711 371.117 379.184 cv
371.117 379.313 371.112 379.45 371.102 379.593 cv
371.092 379.736 371.083 379.859 371.074 379.962 cv
366.239 379.962 li
cp
f
377.657 381.95 mo
377.729 382.081 377.795 382.243 377.852 382.438 cv
377.904 382.633 377.937 382.831 377.948 383.036 cv
377.402 383.249 376.778 383.355 376.075 383.355 cv
374.895 383.355 374.003 383.019 373.4 382.347 cv
372.802 381.675 372.502 380.769 372.502 379.629 cv
372.502 379.101 372.576 378.608 372.723 378.154 cv
372.871 377.7 373.09 377.306 373.381 376.972 cv
373.672 376.639 374.035 376.374 374.468 376.18 cv
374.904 375.984 375.407 375.889 375.979 375.889 cv
376.367 375.889 376.71 375.911 377.006 375.955 cv
377.301 376.004 377.583 376.077 377.852 376.18 cv
377.852 376.336 377.828 376.519 377.788 376.728 cv
377.745 376.937 377.688 377.12 377.613 377.277 cv
377.161 377.12 376.645 377.041 376.063 377.041 cv
375.352 377.041 374.819 377.277 374.468 377.75 cv
374.119 378.224 373.942 378.849 373.942 379.629 cv
373.942 380.519 374.141 381.17 374.538 381.582 cv
374.935 381.995 375.48 382.2 376.173 382.2 cv
376.45 382.2 376.708 382.183 376.942 382.146 cv
377.179 382.107 377.416 382.043 377.657 381.95 cv
cp
f
379.805 377.152 mo
378.724 377.152 li
378.668 376.959 li
381.052 374.287 li
381.161 374.287 li
381.161 376.054 li
382.963 376.054 li
383 376.211 383.018 376.389 383.018 376.582 cv
383.018 376.685 383.013 376.782 383.004 376.875 cv
382.995 376.967 382.98 377.06 382.963 377.152 cv
381.161 377.152 li
381.161 380.407 li
381.161 380.797 381.178 381.107 381.212 381.339 cv
381.243 381.57 381.3 381.748 381.375 381.875 cv
381.455 382 381.562 382.083 381.695 382.124 cv
381.829 382.166 381.999 382.188 382.201 382.188 cv
382.359 382.188 382.505 382.176 382.646 382.152 cv
382.783 382.129 382.908 382.103 383.018 382.076 cv
383.083 382.262 383.122 382.45 383.137 382.646 cv
383.151 382.842 383.158 383.012 383.158 383.161 cv
382.973 383.206 382.778 383.241 382.575 383.264 cv
382.373 383.287 382.153 383.299 381.924 383.299 cv
381.259 383.299 380.74 383.137 380.366 382.812 cv
379.992 382.488 379.805 381.95 379.805 381.2 cv
379.805 377.152 li
cp
f
389.046 378.933 mo
389.046 378.673 389.012 378.425 388.942 378.189 cv
388.872 377.952 388.771 377.747 388.637 377.569 cv
388.503 377.394 388.333 377.253 388.124 377.146 cv
387.916 377.04 387.67 376.986 387.384 376.986 cv
386.819 376.986 386.388 377.157 386.087 377.499 cv
385.787 377.843 385.605 378.32 385.542 378.933 cv
389.046 378.933 li
cp
385.525 379.962 mo
385.546 380.741 385.746 381.311 386.13 381.672 cv
386.514 382.032 387.079 382.215 387.825 382.215 cv
388.482 382.215 389.106 382.099 389.697 381.867 cv
389.771 382.006 389.831 382.176 389.879 382.375 cv
389.923 382.573 389.949 382.771 389.961 382.966 cv
389.654 383.095 389.32 383.192 388.955 383.258 cv
388.59 383.322 388.188 383.355 387.743 383.355 cv
387.097 383.355 386.543 383.264 386.081 383.083 cv
385.617 382.902 385.237 382.648 384.937 382.317 cv
384.637 381.99 384.419 381.601 384.277 381.151 cv
384.141 380.701 384.071 380.207 384.071 379.671 cv
384.071 379.14 384.138 378.647 384.271 378.189 cv
384.407 377.73 384.611 377.332 384.89 376.992 cv
385.167 376.655 385.515 376.386 385.936 376.187 cv
386.355 375.987 386.852 375.889 387.425 375.889 cv
387.913 375.889 388.345 375.971 388.715 376.138 cv
389.082 376.304 389.393 376.533 389.641 376.825 cv
389.891 377.117 390.081 377.465 390.209 377.869 cv
390.338 378.271 390.404 378.711 390.404 379.184 cv
390.404 379.313 390.399 379.45 390.39 379.593 cv
390.382 379.736 390.372 379.859 390.362 379.962 cv
385.525 379.962 li
cp
f
392.469 377.152 mo
391.388 377.152 li
391.332 376.959 li
393.715 374.287 li
393.827 374.287 li
393.827 376.054 li
395.627 376.054 li
395.664 376.211 395.684 376.389 395.684 376.582 cv
395.684 376.685 395.679 376.782 395.669 376.875 cv
395.661 376.967 395.645 377.06 395.627 377.152 cv
393.827 377.152 li
393.827 380.407 li
393.827 380.797 393.843 381.107 393.874 381.339 cv
393.905 381.57 393.962 381.748 394.041 381.875 cv
394.121 382 394.226 382.083 394.359 382.124 cv
394.492 382.166 394.661 382.188 394.864 382.188 cv
395.022 382.188 395.171 382.176 395.309 382.152 cv
395.446 382.129 395.571 382.103 395.684 382.076 cv
395.749 382.262 395.787 382.45 395.8 382.646 cv
395.813 382.842 395.819 383.012 395.819 383.161 cv
395.635 383.206 395.441 383.241 395.238 383.264 cv
395.035 383.287 394.818 383.299 394.59 383.299 cv
393.924 383.299 393.402 383.137 393.028 382.812 cv
392.653 382.488 392.469 381.95 392.469 381.2 cv
392.469 377.152 li
cp
f
397.081 376.054 mo
397.183 376.035 397.3 376.021 397.428 376.013 cv
397.557 376.004 397.668 375.999 397.761 375.999 cv
397.861 375.999 397.979 376.004 398.107 376.013 cv
398.236 376.021 398.354 376.035 398.455 376.054 cv
398.455 379.962 li
398.455 380.407 398.494 380.774 398.579 381.066 cv
398.662 381.358 398.786 381.59 398.954 381.756 cv
399.119 381.922 399.322 382.038 399.562 382.103 cv
399.804 382.169 400.08 382.2 400.395 382.2 cv
400.865 382.2 401.267 382.15 401.598 382.048 cv
401.598 376.054 li
401.699 376.035 401.815 376.021 401.938 376.013 cv
402.063 376.004 402.176 375.999 402.277 375.999 cv
402.379 375.999 402.493 376.004 402.618 376.013 cv
402.741 376.021 402.854 376.035 402.956 376.054 cv
402.956 382.966 li
402.633 383.059 402.248 383.146 401.799 383.231 cv
401.353 383.313 400.888 383.355 400.407 383.355 cv
399.955 383.355 399.527 383.315 399.127 383.237 cv
398.723 383.158 398.371 382.997 398.066 382.758 cv
397.761 382.515 397.521 382.178 397.346 381.741 cv
397.169 381.307 397.081 380.731 397.081 380.017 cv
397.081 376.054 li
cp
f
405.119 376.054 mo
405.22 376.035 405.317 376.021 405.409 376.013 cv
405.502 376.004 405.6 375.999 405.7 375.999 cv
405.803 375.999 405.903 376.004 406.005 376.013 cv
406.106 376.021 406.198 376.035 406.282 376.054 cv
406.309 376.193 406.337 376.377 406.366 376.604 cv
406.394 376.831 406.406 377.022 406.406 377.18 cv
406.601 376.865 406.857 376.592 407.176 376.36 cv
407.494 376.128 407.904 376.013 408.402 376.013 cv
408.629 376.019 li
408.831 376.04 li
408.851 376.123 408.865 376.211 408.873 376.304 cv
408.882 376.396 408.887 376.494 408.887 376.597 cv
408.887 376.708 408.881 376.824 408.866 376.943 cv
408.854 377.064 408.836 377.18 408.818 377.291 cv
408.59 377.265 li
408.402 377.265 li
408.152 377.265 407.915 377.298 407.688 377.369 cv
407.463 377.438 407.258 377.561 407.078 377.737 cv
406.898 377.913 406.755 378.154 406.65 378.459 cv
406.544 378.766 406.49 379.16 406.49 379.642 cv
406.49 383.188 li
406.389 383.206 406.274 383.221 406.15 383.231 cv
406.024 383.239 405.913 383.244 405.811 383.244 cv
405.71 383.244 405.597 383.239 405.47 383.231 cv
405.347 383.221 405.229 383.206 405.119 383.188 cv
405.119 376.054 li
cp
f
417.311 379.836 mo
417.172 379.818 416.997 379.799 416.785 379.781 cv
416.574 379.764 416.392 379.754 416.244 379.754 cv
415.671 379.754 415.235 379.859 414.937 380.073 cv
414.633 380.286 414.484 380.611 414.484 381.047 cv
414.484 381.325 414.533 381.542 414.638 381.7 cv
414.74 381.857 414.866 381.979 415.017 382.062 cv
415.17 382.146 415.339 382.195 415.524 382.215 cv
415.709 382.233 415.883 382.243 416.05 382.243 cv
416.262 382.243 416.482 382.229 416.708 382.207 cv
416.934 382.186 417.136 382.15 417.311 382.103 cv
417.311 379.836 li
cp
417.311 378.487 mo
417.311 377.94 417.172 377.561 416.895 377.348 cv
416.617 377.134 416.217 377.027 415.689 377.027 cv
415.366 377.027 415.064 377.054 414.782 377.104 cv
414.5 377.155 414.225 377.222 413.957 377.306 cv
413.782 376.999 413.694 376.634 413.694 376.207 cv
414.008 376.105 414.355 376.025 414.735 375.971 cv
415.111 375.915 415.477 375.889 415.828 375.889 cv
416.751 375.889 417.454 376.099 417.936 376.519 cv
418.416 376.942 418.654 377.616 418.654 378.543 cv
418.654 383.008 li
418.332 383.081 417.94 383.158 417.478 383.237 cv
417.015 383.315 416.543 383.355 416.063 383.355 cv
415.611 383.355 415.202 383.313 414.839 383.231 cv
414.473 383.146 414.164 383.012 413.909 382.826 cv
413.654 382.641 413.458 382.404 413.321 382.117 cv
413.182 381.829 413.114 381.483 413.114 381.073 cv
413.114 380.676 413.191 380.327 413.354 380.024 cv
413.518 379.724 413.735 379.474 414.013 379.274 cv
414.29 379.074 414.608 378.925 414.971 378.828 cv
415.33 378.73 415.709 378.683 416.105 378.683 cv
416.401 378.683 416.642 378.69 416.832 378.703 cv
417.021 378.718 417.182 378.732 417.311 378.752 cv
417.311 378.487 li
cp
f
425.277 377.265 mo
425.093 377.189 424.895 377.134 424.682 377.097 cv
424.471 377.06 424.238 377.041 423.99 377.041 cv
423.61 377.041 423.283 377.11 423.008 377.25 cv
422.729 377.389 422.499 377.579 422.319 377.82 cv
422.141 378.062 422.005 378.347 421.918 378.675 cv
421.83 379.005 421.786 379.364 421.786 379.754 cv
421.796 380.635 422.004 381.264 422.41 381.644 cv
422.817 382.024 423.37 382.215 424.074 382.215 cv
424.313 382.215 424.534 382.203 424.738 382.181 cv
424.941 382.158 425.12 382.122 425.277 382.076 cv
425.277 377.265 li
cp
425.277 372.995 mo
425.38 372.976 425.494 372.962 425.625 372.952 cv
425.753 372.943 425.865 372.938 425.958 372.938 cv
426.058 372.938 426.172 372.943 426.297 372.952 cv
426.422 372.962 426.533 372.976 426.636 372.995 cv
426.636 382.993 li
426.285 383.095 425.892 383.181 425.459 383.251 cv
425.022 383.32 424.539 383.355 424.004 383.355 cv
423.506 383.355 423.031 383.292 422.583 383.168 cv
422.134 383.042 421.744 382.837 421.412 382.549 cv
421.081 382.262 420.817 381.891 420.623 381.435 cv
420.43 380.981 420.333 380.421 420.333 379.754 cv
420.333 379.179 420.418 378.654 420.588 378.183 cv
420.759 377.709 421.002 377.304 421.315 376.965 cv
421.629 376.626 422.005 376.365 422.445 376.18 cv
422.884 375.994 423.37 375.901 423.906 375.901 cv
424.146 375.901 424.39 375.919 424.633 375.955 cv
424.879 375.994 425.093 376.04 425.277 376.097 cv
425.277 372.995 li
cp
f
428.948 374.482 mo
428.931 374.372 428.919 374.251 428.915 374.12 cv
428.911 373.991 428.909 373.875 428.909 373.774 cv
428.909 373.672 428.911 373.556 428.915 373.426 cv
428.919 373.297 428.931 373.181 428.948 373.078 cv
429.072 373.06 429.199 373.045 429.338 373.036 cv
429.478 373.026 429.597 373.021 429.699 373.021 cv
429.799 373.021 429.921 373.026 430.059 373.036 cv
430.197 373.045 430.323 373.06 430.434 373.078 cv
430.452 373.181 430.463 373.297 430.468 373.426 cv
430.473 373.556 430.475 373.672 430.475 373.774 cv
430.475 373.875 430.473 373.991 430.468 374.12 cv
430.463 374.251 430.452 374.372 430.434 374.482 cv
430.323 374.501 430.199 374.515 430.065 374.524 cv
429.933 374.534 429.813 374.538 429.711 374.538 cv
429.602 374.538 429.478 374.534 429.338 374.524 cv
429.199 374.515 429.072 374.501 428.948 374.482 cv
cp
429.257 377.139 mo
428.354 377.139 li
428.337 377.064 428.322 376.979 428.314 376.882 cv
428.305 376.784 428.3 376.689 428.3 376.597 cv
428.3 376.504 428.305 376.408 428.314 376.312 cv
428.322 376.214 428.337 376.128 428.354 376.054 cv
430.601 376.054 li
430.601 383.188 li
430.497 383.206 430.384 383.221 430.26 383.231 cv
430.137 383.239 430.022 383.244 429.921 383.244 cv
429.828 383.244 429.718 383.239 429.595 383.231 cv
429.471 383.221 429.357 383.206 429.257 383.188 cv
429.257 377.139 li
cp
f
434.189 382.02 mo
434.364 382.085 434.544 382.13 434.728 382.159 cv
434.912 382.188 435.153 382.2 435.448 382.2 cv
435.781 382.2 436.088 382.147 436.362 382.04 cv
436.64 381.934 436.879 381.77 437.078 381.547 cv
437.275 381.325 437.434 381.044 437.549 380.706 cv
437.664 380.367 437.723 379.967 437.723 379.503 cv
437.723 378.761 437.584 378.173 437.312 377.737 cv
437.039 377.301 436.595 377.083 435.975 377.083 cv
435.744 377.083 435.523 377.125 435.313 377.208 cv
435.098 377.291 434.908 377.417 434.743 377.584 cv
434.576 377.75 434.44 377.962 434.34 378.218 cv
434.238 378.473 434.189 378.775 434.189 379.127 cv
434.189 382.02 li
cp
432.817 376.054 mo
432.91 376.035 433.004 376.021 433.102 376.013 cv
433.198 376.004 433.298 375.999 433.399 375.999 cv
433.491 375.999 433.589 376.004 433.689 376.013 cv
433.791 376.021 433.889 376.035 433.98 376.054 cv
433.989 376.074 434 376.13 434.015 376.228 cv
434.028 376.325 434.041 376.429 434.058 376.541 cv
434.07 376.651 434.085 376.76 434.098 376.861 cv
434.111 376.963 434.119 377.027 434.119 377.056 cv
434.212 376.906 434.32 376.765 434.452 376.623 cv
434.58 376.486 434.736 376.36 434.914 376.249 cv
435.095 376.138 435.298 376.048 435.526 375.984 cv
435.752 375.919 436.004 375.889 436.281 375.889 cv
436.696 375.889 437.081 375.955 437.438 376.097 cv
437.792 376.234 438.097 376.451 438.352 376.742 cv
438.606 377.034 438.805 377.405 438.947 377.854 cv
439.09 378.306 439.163 378.835 439.163 379.447 cv
439.163 380.671 438.832 381.628 438.172 382.317 cv
437.51 383.011 436.576 383.355 435.365 383.355 cv
435.163 383.355 434.955 383.342 434.743 383.313 cv
434.528 383.285 434.345 383.249 434.189 383.202 cv
434.189 386.47 li
434.077 386.488 433.961 386.503 433.834 386.512 cv
433.711 386.521 433.597 386.526 433.496 386.526 cv
433.395 386.526 433.278 386.521 433.155 386.512 cv
433.031 386.503 432.918 386.488 432.817 386.47 cv
432.817 376.054 li
cp
f
441.116 374.482 mo
441.098 374.372 441.087 374.251 441.083 374.12 cv
441.075 373.991 441.073 373.875 441.073 373.774 cv
441.073 373.672 441.075 373.556 441.083 373.426 cv
441.087 373.297 441.098 373.181 441.116 373.078 cv
441.235 373.06 441.367 373.045 441.505 373.036 cv
441.642 373.026 441.763 373.021 441.865 373.021 cv
441.967 373.021 442.086 373.026 442.225 373.036 cv
442.363 373.045 442.487 373.06 442.598 373.078 cv
442.615 373.181 442.63 373.297 442.635 373.426 cv
442.638 373.556 442.641 373.672 442.641 373.774 cv
442.641 373.875 442.638 373.991 442.635 374.12 cv
442.63 374.251 442.615 374.372 442.598 374.482 cv
442.487 374.501 442.365 374.515 442.232 374.524 cv
442.098 374.534 441.98 374.538 441.879 374.538 cv
441.768 374.538 441.642 374.534 441.505 374.524 cv
441.367 374.515 441.235 374.501 441.116 374.482 cv
cp
441.421 377.139 mo
440.521 377.139 li
440.501 377.064 440.487 376.979 440.478 376.882 cv
440.468 376.784 440.465 376.689 440.465 376.597 cv
440.465 376.504 440.468 376.408 440.478 376.312 cv
440.487 376.214 440.501 376.128 440.521 376.054 cv
442.765 376.054 li
442.765 383.188 li
442.664 383.206 442.55 383.221 442.427 383.231 cv
442.3 383.239 442.188 383.244 442.086 383.244 cv
441.994 383.244 441.885 383.239 441.761 383.231 cv
441.635 383.221 441.522 383.206 441.421 383.188 cv
441.421 377.139 li
cp
f
444.871 381.896 mo
445.121 381.997 445.396 382.078 445.697 382.139 cv
445.996 382.198 446.294 382.228 446.59 382.228 cv
446.803 382.228 447.005 382.205 447.198 382.159 cv
447.393 382.112 447.563 382.043 447.703 381.95 cv
447.849 381.857 447.963 381.744 448.051 381.61 cv
448.139 381.475 448.182 381.325 448.182 381.157 cv
448.182 380.972 448.147 380.82 448.078 380.699 cv
448.01 380.578 447.917 380.476 447.801 380.393 cv
447.686 380.31 447.553 380.237 447.399 380.177 cv
447.249 380.117 447.083 380.06 446.907 380.003 cv
446.423 379.823 li
445.832 379.601 445.401 379.351 445.136 379.072 cv
444.866 378.794 444.733 378.418 444.733 377.945 cv
444.733 377.314 444.957 376.813 445.405 376.443 cv
445.853 376.074 446.511 375.889 447.378 375.889 cv
447.74 375.889 448.093 375.921 448.438 375.992 cv
448.787 376.062 449.089 376.141 449.346 376.234 cv
449.327 376.42 449.293 376.605 449.241 376.791 cv
449.193 376.977 449.13 377.149 449.055 377.306 cv
448.853 377.231 448.61 377.16 448.328 377.089 cv
448.047 377.021 447.744 376.986 447.419 376.986 cv
447.079 376.986 446.777 377.047 446.514 377.167 cv
446.249 377.286 446.119 377.499 446.119 377.807 cv
446.119 377.964 446.15 378.098 446.216 378.21 cv
446.28 378.32 446.369 378.416 446.479 378.496 cv
446.59 378.573 446.717 378.64 446.86 378.696 cv
447.002 378.752 447.157 378.808 447.323 378.863 cv
447.934 379.072 li
448.154 379.146 448.365 379.232 448.563 379.335 cv
448.761 379.438 448.934 379.566 449.077 379.718 cv
449.219 379.871 449.334 380.057 449.422 380.274 cv
449.511 380.491 449.555 380.754 449.555 381.06 cv
449.555 381.403 449.484 381.717 449.346 382 cv
449.207 382.282 449.011 382.523 448.757 382.723 cv
448.505 382.921 448.197 383.076 447.837 383.188 cv
447.476 383.299 447.079 383.355 446.644 383.355 cv
446.202 383.355 445.813 383.326 445.479 383.264 cv
445.148 383.203 444.84 383.124 444.553 383.021 cv
444.571 382.837 444.61 382.648 444.671 382.459 cv
444.729 382.269 444.797 382.081 444.871 381.896 cv
cp
f
451.411 374.482 mo
451.394 374.372 451.382 374.251 451.377 374.12 cv
451.37 373.991 451.367 373.875 451.367 373.774 cv
451.367 373.672 451.37 373.556 451.377 373.426 cv
451.382 373.297 451.394 373.181 451.411 373.078 cv
451.531 373.06 451.661 373.045 451.8 373.036 cv
451.937 373.026 452.059 373.021 452.159 373.021 cv
452.262 373.021 452.381 373.026 452.519 373.036 cv
452.658 373.045 452.782 373.06 452.894 373.078 cv
452.911 373.181 452.925 373.297 452.93 373.426 cv
452.935 373.556 452.936 373.672 452.936 373.774 cv
452.936 373.875 452.935 373.991 452.93 374.12 cv
452.925 374.251 452.911 374.372 452.894 374.482 cv
452.782 374.501 452.661 374.515 452.527 374.524 cv
452.393 374.534 452.274 374.538 452.174 374.538 cv
452.063 374.538 451.937 374.534 451.8 374.524 cv
451.661 374.515 451.531 374.501 451.411 374.482 cv
cp
451.715 377.139 mo
450.815 377.139 li
450.797 377.064 450.782 376.979 450.773 376.882 cv
450.765 376.784 450.76 376.689 450.76 376.597 cv
450.76 376.504 450.765 376.408 450.773 376.312 cv
450.782 376.214 450.797 376.128 450.815 376.054 cv
453.061 376.054 li
453.061 383.188 li
452.958 383.206 452.846 383.221 452.721 383.231 cv
452.595 383.239 452.482 383.244 452.381 383.244 cv
452.288 383.244 452.181 383.239 452.056 383.231 cv
451.931 383.221 451.817 383.206 451.715 383.188 cv
451.715 377.139 li
cp
f
460.031 381.95 mo
460.103 382.081 460.168 382.243 460.224 382.438 cv
460.279 382.633 460.311 382.831 460.321 383.036 cv
459.776 383.249 459.151 383.355 458.45 383.355 cv
457.269 383.355 456.378 383.019 455.775 382.347 cv
455.175 381.675 454.875 380.769 454.875 379.629 cv
454.875 379.101 454.949 378.608 455.097 378.154 cv
455.245 377.7 455.464 377.306 455.755 376.972 cv
456.045 376.639 456.409 376.374 456.842 376.18 cv
457.276 375.984 457.779 375.889 458.353 375.889 cv
458.741 375.889 459.084 375.911 459.378 375.955 cv
459.674 376.004 459.956 376.077 460.224 376.18 cv
460.224 376.336 460.202 376.519 460.162 376.728 cv
460.119 376.937 460.062 377.12 459.988 377.277 cv
459.534 377.12 459.019 377.041 458.436 377.041 cv
457.727 377.041 457.194 377.277 456.842 377.75 cv
456.492 378.224 456.316 378.849 456.316 379.629 cv
456.316 380.519 456.516 381.17 456.912 381.582 cv
457.309 381.995 457.854 382.2 458.548 382.2 cv
458.824 382.2 459.082 382.183 459.315 382.146 cv
459.553 382.107 459.789 382.043 460.031 381.95 cv
cp
f
462.024 374.482 mo
462.007 374.372 461.995 374.251 461.991 374.12 cv
461.986 373.991 461.983 373.875 461.983 373.774 cv
461.983 373.672 461.986 373.556 461.991 373.426 cv
461.995 373.297 462.007 373.181 462.024 373.078 cv
462.146 373.06 462.275 373.045 462.412 373.036 cv
462.552 373.026 462.671 373.021 462.773 373.021 cv
462.874 373.021 462.996 373.026 463.134 373.036 cv
463.271 373.045 463.397 373.06 463.509 373.078 cv
463.526 373.181 463.538 373.297 463.543 373.426 cv
463.547 373.556 463.549 373.672 463.549 373.774 cv
463.549 373.875 463.547 373.991 463.543 374.12 cv
463.538 374.251 463.526 374.372 463.509 374.482 cv
463.397 374.501 463.273 374.515 463.14 374.524 cv
463.008 374.534 462.889 374.538 462.787 374.538 cv
462.676 374.538 462.552 374.534 462.412 374.524 cv
462.275 374.515 462.146 374.501 462.024 374.482 cv
cp
462.33 377.139 mo
461.43 377.139 li
461.411 377.064 461.397 376.979 461.388 376.882 cv
461.38 376.784 461.375 376.689 461.375 376.597 cv
461.375 376.504 461.38 376.408 461.388 376.312 cv
461.397 376.214 461.411 376.128 461.43 376.054 cv
463.674 376.054 li
463.674 383.188 li
463.572 383.206 463.458 383.221 463.335 383.231 cv
463.21 383.239 463.098 383.244 462.996 383.244 cv
462.903 383.244 462.794 383.239 462.67 383.231 cv
462.545 383.221 462.433 383.206 462.33 383.188 cv
462.33 377.139 li
cp
f
465.905 376.054 mo
466.007 376.035 466.106 376.021 466.203 376.013 cv
466.301 376.004 466.399 375.999 466.501 375.999 cv
466.602 375.999 466.697 376.004 466.785 376.013 cv
466.873 376.021 466.968 376.035 467.069 376.054 cv
467.096 376.193 467.123 376.382 467.152 376.616 cv
467.18 376.854 467.192 377.052 467.192 377.208 cv
467.285 377.052 467.403 376.894 467.547 376.736 cv
467.689 376.579 467.854 376.436 468.038 376.312 cv
468.224 376.187 468.437 376.085 468.678 376.006 cv
468.917 375.926 469.181 375.889 469.467 375.889 cv
470.278 375.889 470.878 376.121 471.267 376.589 cv
471.655 377.058 471.851 377.75 471.851 378.668 cv
471.851 383.188 li
471.746 383.206 471.632 383.221 471.503 383.231 cv
471.375 383.239 471.257 383.244 471.155 383.244 cv
471.054 383.244 470.941 383.239 470.817 383.231 cv
470.693 383.221 470.578 383.206 470.478 383.188 cv
470.478 379.043 li
470.478 378.386 470.375 377.901 470.173 377.591 cv
469.97 377.279 469.646 377.125 469.202 377.125 cv
468.944 377.125 468.699 377.172 468.467 377.265 cv
468.237 377.357 468.035 377.499 467.858 377.694 cv
467.683 377.89 467.543 378.143 467.437 378.452 cv
467.331 378.764 467.277 379.136 467.277 379.573 cv
467.277 383.188 li
467.175 383.206 467.063 383.221 466.937 383.231 cv
466.813 383.239 466.699 383.244 466.597 383.244 cv
466.497 383.244 466.381 383.239 466.25 383.231 cv
466.122 383.221 466.007 383.206 465.905 383.188 cv
465.905 376.054 li
cp
f
476.491 379.892 mo
476.99 379.892 477.36 379.754 477.599 379.476 cv
477.84 379.196 477.96 378.84 477.96 378.405 cv
477.96 377.959 477.84 377.596 477.599 377.313 cv
477.36 377.029 476.99 376.889 476.491 376.889 cv
475.99 376.889 475.626 377.029 475.389 377.313 cv
475.154 377.596 475.035 377.959 475.035 378.405 cv
475.035 378.84 475.154 379.196 475.389 379.476 cv
475.626 379.754 475.99 379.892 476.491 379.892 cv
cp
475.854 383.368 mo
475.438 383.359 475.125 383.471 474.917 383.703 cv
474.71 383.935 474.605 384.213 474.605 384.536 cv
474.605 384.741 474.646 384.907 474.729 385.038 cv
474.814 385.168 474.931 385.272 475.084 385.352 cv
475.237 385.43 475.416 385.485 475.626 385.517 cv
475.833 385.551 476.061 385.566 476.311 385.566 cv
477.049 385.566 477.626 385.442 478.044 385.197 cv
478.458 384.952 478.665 384.644 478.665 384.272 cv
478.665 383.994 478.578 383.78 478.401 383.634 cv
478.229 383.483 477.902 383.406 477.432 383.396 cv
475.854 383.368 li
cp
477.723 382.271 mo
478.547 382.288 479.141 382.466 479.511 382.798 cv
479.881 383.134 480.065 383.592 480.065 384.176 cv
480.065 384.556 479.97 384.896 479.775 385.197 cv
479.581 385.499 479.313 385.759 478.97 385.976 cv
478.629 386.192 478.226 386.36 477.76 386.477 cv
477.292 386.593 476.787 386.65 476.24 386.65 cv
475.29 386.65 474.566 386.503 474.065 386.206 cv
473.565 385.909 473.317 385.44 473.317 384.802 cv
473.317 384.422 473.42 384.081 473.623 383.778 cv
473.825 383.478 474.09 383.239 474.413 383.063 cv
474.227 382.943 474.071 382.791 473.947 382.61 cv
473.823 382.431 473.761 382.205 473.761 381.937 cv
473.761 381.594 473.837 381.298 473.991 381.047 cv
474.142 380.797 474.347 380.573 474.605 380.379 cv
474.302 380.166 474.057 379.891 473.871 379.551 cv
473.687 379.213 473.594 378.83 473.594 378.405 cv
473.594 378.052 473.659 377.724 473.787 377.417 cv
473.918 377.11 474.104 376.845 474.35 376.616 cv
474.595 376.391 474.896 376.211 475.259 376.082 cv
475.616 375.952 476.029 375.889 476.491 375.889 cv
476.906 375.889 477.282 375.947 477.618 376.068 cv
477.958 376.189 478.246 376.342 478.485 376.526 cv
478.67 376.379 478.92 376.256 479.233 376.158 cv
479.548 376.062 479.896 376.013 480.273 376.013 cv
480.31 376.189 480.327 376.384 480.327 376.597 cv
480.327 376.698 480.322 376.804 480.314 376.916 cv
480.305 377.027 480.291 377.139 480.273 377.25 cv
479.027 377.25 li
479.128 377.407 479.207 377.579 479.261 377.765 cv
479.317 377.95 479.344 378.162 479.344 378.405 cv
479.344 378.785 479.274 379.127 479.137 379.433 cv
478.999 379.739 478.804 380.001 478.549 380.219 cv
478.294 380.438 477.992 380.604 477.642 380.72 cv
477.29 380.835 476.906 380.894 476.491 380.894 cv
476.112 380.894 475.77 380.852 475.465 380.769 cv
475.335 380.842 475.208 380.956 475.084 381.11 cv
474.96 381.262 474.896 381.427 474.896 381.603 cv
474.896 381.77 474.958 381.915 475.077 382.04 cv
475.196 382.166 475.465 382.233 475.881 382.243 cv
477.723 382.271 li
cp
f
489.404 378.933 mo
489.404 378.673 489.368 378.425 489.298 378.189 cv
489.232 377.952 489.13 377.747 488.995 377.569 cv
488.861 377.394 488.69 377.253 488.482 377.146 cv
488.274 377.04 488.026 376.986 487.74 376.986 cv
487.177 376.986 486.746 377.157 486.445 377.499 cv
486.146 377.843 485.964 378.32 485.898 378.933 cv
489.404 378.933 li
cp
485.884 379.962 mo
485.903 380.741 486.103 381.311 486.486 381.672 cv
486.871 382.032 487.436 382.215 488.186 382.215 cv
488.841 382.215 489.464 382.099 490.055 381.867 cv
490.129 382.006 490.189 382.176 490.235 382.375 cv
490.282 382.573 490.31 382.771 490.318 382.966 cv
490.015 383.095 489.678 383.192 489.314 383.258 cv
488.95 383.322 488.545 383.355 488.102 383.355 cv
487.453 383.355 486.899 383.264 486.438 383.083 cv
485.977 382.902 485.595 382.648 485.296 382.317 cv
484.996 381.99 484.774 381.601 484.638 381.151 cv
484.499 380.701 484.43 380.207 484.43 379.671 cv
484.43 379.14 484.494 378.647 484.631 378.189 cv
484.764 377.73 484.969 377.332 485.246 376.992 cv
485.524 376.655 485.872 376.386 486.293 376.187 cv
486.715 375.987 487.21 375.889 487.783 375.889 cv
488.272 375.889 488.701 375.971 489.071 376.138 cv
489.441 376.304 489.75 376.533 490 376.825 cv
490.248 377.117 490.438 377.465 490.568 377.869 cv
490.697 378.271 490.763 378.711 490.763 379.184 cv
490.763 379.313 490.758 379.45 490.746 379.593 cv
490.738 379.736 490.729 379.859 490.72 379.962 cv
485.884 379.962 li
cp
f
492.534 372.995 mo
492.637 372.976 492.75 372.962 492.876 372.952 cv
493.001 372.943 493.112 372.938 493.215 372.938 cv
493.315 372.938 493.429 372.943 493.555 372.952 cv
493.679 372.962 493.791 372.976 493.893 372.995 cv
493.893 381.032 li
493.893 381.293 493.915 381.497 493.963 381.644 cv
494.008 381.793 494.07 381.907 494.149 381.985 cv
494.229 382.065 494.321 382.114 494.427 382.139 cv
494.533 382.162 494.646 382.174 494.765 382.174 cv
494.85 382.174 494.943 382.169 495.05 382.159 cv
495.156 382.15 495.246 382.136 495.32 382.117 cv
495.404 382.442 495.444 382.793 495.444 383.174 cv
495.316 383.221 495.158 383.251 494.973 383.264 cv
494.789 383.278 494.619 383.285 494.461 383.285 cv
494.193 383.285 493.944 383.253 493.713 383.188 cv
493.482 383.124 493.28 383.017 493.103 382.868 cv
492.928 382.721 492.789 382.52 492.688 382.271 cv
492.585 382.02 492.534 381.71 492.534 381.339 cv
492.534 372.995 li
cp
f
496.801 374.482 mo
496.783 374.372 496.771 374.251 496.77 374.12 cv
496.764 373.991 496.762 373.875 496.762 373.774 cv
496.762 373.672 496.764 373.556 496.77 373.426 cv
496.771 373.297 496.783 373.181 496.801 373.078 cv
496.924 373.06 497.052 373.045 497.189 373.036 cv
497.33 373.026 497.449 373.021 497.552 373.021 cv
497.651 373.021 497.774 373.026 497.911 373.036 cv
498.05 373.045 498.176 373.06 498.286 373.078 cv
498.305 373.181 498.315 373.297 498.319 373.426 cv
498.324 373.556 498.327 373.672 498.327 373.774 cv
498.327 373.875 498.324 373.991 498.319 374.12 cv
498.315 374.251 498.305 374.372 498.286 374.482 cv
498.176 374.501 498.052 374.515 497.918 374.524 cv
497.785 374.534 497.666 374.538 497.564 374.538 cv
497.454 374.538 497.33 374.534 497.189 374.524 cv
497.052 374.515 496.924 374.501 496.801 374.482 cv
cp
497.108 377.139 mo
496.206 377.139 li
496.188 377.064 496.175 376.979 496.167 376.882 cv
496.157 376.784 496.152 376.689 496.152 376.597 cv
496.152 376.504 496.157 376.408 496.167 376.312 cv
496.175 376.214 496.188 376.128 496.206 376.054 cv
498.453 376.054 li
498.453 383.188 li
498.35 383.206 498.236 383.221 498.112 383.231 cv
497.988 383.239 497.875 383.244 497.774 383.244 cv
497.681 383.244 497.57 383.239 497.447 383.231 cv
497.322 383.221 497.21 383.206 497.108 383.188 cv
497.108 377.139 li
cp
f
500.946 377.152 mo
499.864 377.152 li
499.811 376.959 li
502.192 374.287 li
502.305 374.287 li
502.305 376.054 li
504.104 376.054 li
504.144 376.211 504.161 376.389 504.161 376.582 cv
504.161 376.685 504.156 376.782 504.147 376.875 cv
504.139 376.967 504.122 377.06 504.104 377.152 cv
502.305 377.152 li
502.305 380.407 li
502.305 380.797 502.321 381.107 502.353 381.339 cv
502.384 381.57 502.439 381.748 502.519 381.875 cv
502.599 382 502.703 382.083 502.837 382.124 cv
502.97 382.166 503.14 382.188 503.342 382.188 cv
503.499 382.188 503.648 382.176 503.786 382.152 cv
503.925 382.129 504.051 382.103 504.161 382.076 cv
504.227 382.262 504.265 382.45 504.277 382.646 cv
504.291 382.842 504.298 383.012 504.298 383.161 cv
504.114 383.206 503.92 383.241 503.717 383.264 cv
503.514 383.287 503.297 383.299 503.067 383.299 cv
502.401 383.299 501.881 383.137 501.507 382.812 cv
501.132 382.488 500.946 381.95 500.946 381.2 cv
500.946 377.152 li
cp
f
353.963 359.285 mo
12.4331 359.285 li
12.4331 357.396 li
353.963 357.396 li
353.963 359.285 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (ivan) ()
%%Title: (1404.i003.033.S.m004.c11.kitchen interior.eps)
%%CreationDate: 4/25/2014 7:22 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj4M-oCqkQ^978AESOA6Sp^W=63<$66,7obO9CAM_(<lV^\E<PVlI?*FS/3lN\f^dKZQ2_pn^`0<HWG,<H%'_c-=P,?#-fC
%2`lMljub0'ie;j,pOh6nkl(4IRl?rrp?TC+;*ME/)_&IJ?q1]gq\#%t5$7)L#H`<a^XqjPlb-W0e*M1'X1@5N8iud[EXL]'Epr;<
%B'561B!YAuLM$rUrm>na=l8Xh>EsXiaBJeY8+c;O*]sT0i+KpEUR`/c#PENfG_<;ar9""=9jT-=oOmF+If6Y$lZXlX7]64L%[%TN
%!`ASUrLtLMJAP?.2Z-^006<ud8S-98M`PpJ$9n1PjKOGe\_RW]HLt/:("r6"P(1DgG*E!lc\d_^CU2nppt<d"3D\/2[o^F-*'k-<
%3R<Ja*Vk4K;un19`$B*eYhls)<r-rR5pq]`*jq=JqKX$LE#;I`6@7'H/%4L!I4pP#.t6^C*BT4#*de6@a3?V1S.@3lQ4N5gYCCK?
%s&dN/WE3j-Y&*)a[sud"0/TMDqd<-aK_G_rHM:FOd0Eq]KZ0[.Sp+rB-HN>3helJn]p\*V;c4T9\u53bfPRNH^rBO%77f'a#-Dq-
%7ib=OQBgfCeD#bLf>K(n%q]J-3BtRi6'S_I5."VrC:7AS[:>`5WMu*$Q=XPl=H'7&`0T-['A`%6:)iTNPmI"$81fNcO1UC?2Vug&
%7H+Q/P)n8Q=T+L)KDb[s]ra],SYP1ced\_Yo)l(?X'I6!>1aBLr,iZ65TBPhZZ@V2e\BIT:rM9Yb!NnkM[hkrBOelnrTAn0/iq^%
%%cGONh9OqfVg["hm6=6t>3EDeHX3iK4'cOR>&O*0/,XE8[mXLYGM'#sTa^]ZTug@S(O%2?#]b+S3Un[`9>A?Y-hqVGkFqp-/("M+
%FK>ARhX"LOJeOs.Y3"M>\eeKVheQ9HQ#;Vr8BNPD^;DlE:miqAA!r2Xe%#H)d6g<cWo=Wmp/Rui.fD/B^@cZOQ]s+O9ee<:/4CWX
%BH;;cNF"+aO<_m1N84*lh=b_jYh:&hc>n]2:/`Z0&BM%s,Bs%ER@1$"+WaVaHo\fm(G!aBj0W%$3,;J`Ps=:*UnTTiB!S-\Bmis?
%k#Y,c_b\KS4j&ShC(5-2A%M?01^AM0qUIB@0?;m@[o&dE(U86])Jp=3EsI=e^TQ=le%3=s/pD88\Ngu\[i)"pf0=ifJe%i3.hd[B
%gCdj7]RC9/>TZK6qoS$V.fB#6H2.UPkOc=7W8d#Gl2I(>eQQkTcW7@]?`npB\rG`9^CD<#)$gW+DC&"U4_llih0PP=SD=&`E5p"d
%pnRikAVVq*Cs0D8-[5Rj$>lE(7,KN>JYY?-2bq]qA*DX3Q668>']JUVMt9H6ej%>#NMN&00Ngg>1P6NocF+!C15PF0H6RGZOCJUT
%A;O'[]2KuI5rO@A>#H,ZNXF$hZc\Cn=hI3UK2bCKS;lQ3o83E3pD?f5G-sM:(ZMENg.2RC:+sgqra\ld/%te&\,L4EP%X$C.Jd`b
%fBsXN)\<o](9g;NR*TF0Q3R#hKQAJ5eK2)@X8U389L<aYBuu%aCU.'uH>h0S&ooD;N6Z#Tch:p4:\OSV_b!UUnU.n0VpZt1gJ8Hf
%F&DC,+>hEk.%57dXfTnkf>EQP%&p*Ma?aIcXk"SP1bstWR08t)J"]938#]XGmdc:GTZCn("8>I]PMFk9Q(('Z(9-(?M6KP4Ags#:
%(9-(\[fYN+o0oS)]/n&=L(o&ubKX?GQ_?JnEk+Uk\&dYH\_JBqqmYa/hUTd115Re7\_N'`"gY[T6Hj[<#FWkLrHl5'E)rr\r`C^W
%AVr3hrE?3"]g:C41PO,EI(BD-V7$?iYW3G4NgkZ@,Lmc(c&XB-?E[4?DiU0%[c?KYSYqdmXk0H6f<`P[`N.Ufkgm(_O.#IuSWf7D
%]miUlR,bop9<ufR05k;JN4\ncF?8EBZgi=!0l$]$AsjU&FORP+%,3mjKC2=->!JrdZ3b''03lBO&d.m*mgdA1S%n1uVR/s^_;[`F
%6*o"qqX^H1Y.(`n2>kPF"O&K*Z.&.6.mG>PIUl1eNYUHW175kYB>_0C8W4P5LEWYC,fY<iM"0B%`u'/o7_<$Q2T)s#le"1Y?*u6D
%L:I_=Y2#2U:JM2>r5q:eaPbqrj35h!a/jQ:$usM%S"VQuBNh9u@;%_E2Z[C/i6A\=j4_Y;_4KnYpcOJT4eJIdX`PN\ZW=c3AK>rs
%7`M&;8S3ENr.XIu;jr'udkUX:i:sdG5AOcpccl%,bFXaWp$QN72*%#N:A0]k2;@/XEj=9YZe4@q;B5Q`mIKd'a>3)1R[NMX`[<YD
%22=)ISPF74>He&c_fFg<hoB9j1Rrj\<bdU[Q53MSdq[ZA")jdC@X7+dg6.^eL:LHNc-d[5YlFK0nRe\GEJ@QeAJh4T0F_0pZ'ffG
%=2B1\U*EdH.a,\SrK"7>X0@r_.Wk+flRh_W^Sc$Cj&^Bm3Sjpd"V8UcZE.3tlW0=-EH/R>p.k?pfQfW(Vu)O]A1r![n73)B?3Zu]
%^S"ui4sTIrZ5uf/o!sE)7Q()?/?Zq<H(;^Pk/U\;&E[W<eT;Qa1+YU(cRS=*]m3FmdX*^SX@3R]1+i=q1TV/e]R7VX9R3uo20p(`
%9!s]J;0cKYR*-YN<Is-b/03#)VPE$gPT0I4)]pF89HUSDUl',g4lX\H;&SNGk%BXA_?GS,b/]A5CgH0KB%t(33Mncs(Oou$Z'k(R
%)(#UNVq5Pmk,N>q3Q\d*kG6LAB%qmdS6gh[B[;,T92*j'SdZLlhat<+b0h%n2D$r#Fc*OR92hh?)YfW1$kd:&Bh?kC['PQfXU\Ne
%9=>ZS68@J6M:HFLl]hl_ri;;r'jopf5qG_k/YOpf$,"M^jY'/\aj"GG:X/!\96g6[G*Z@6"P)#m^^OZlf2"3A8!7anU/[S2<.8?h
%#GRi>V4027&sQ>>/1U$V/!EJ-r`'qCJW&2^U;]llR7Lkg=(s$S(1H?:qI6]CAX;Ik1Ki;1p[uKu"(aSWG?[qMgrVHuHVpeEBeN'o
%@HM.bRIe*?)+)M,fo)$8W+LN4b*<f+X&j!g8ethNHVkQ*;>qB,c!i?KN9*)62P=="]dT:2ilmH\=(s<[(1H>OU0d1T)2bM.@P:>#
%)k6Y0J!K`%A.`E[HMp(=8i)NTC,33Y:\:f([cMmDSsO/Hf:jSRmrF<]Bo$-=`ABTb;YLtCG)f1:-d9t&4@:rdj&_Na^Vro3;noR'
%b.W2u-Z>DUppHaaCVdlkAPg4[Y:]\+_QV4<?eaiIZ3]'b<k)2N7U:8HKie.qHaQ;HG,9euKi_K'[=>Scj"!Gd;cqqK23h]K_;AO"
%SuW%175t)=DA4_7;$Iad]$[5k))gMZ3BtCc4sBQIVEK<cG$<;G^ZO'5H]:8Uc+R`Na3bUH4O0BIGO)BVfS_QJmIHQ4]2h.1[)]q+
%e(E5o;6TUbRI2q?[*oY)E>Qb;h1a:h^tV[4$T;(1ThHBMk5QV>43J?_F)VeMS[6of.qebKe&oMa2>@U[Y/(pb.s18gET>7(]92:C
%`g9g9NW'0^i=r1qYKFHaO#+I_Hu:k4B+sIc\;bu1)9'@=c"6$uaCjioZgPl6S^p6-#H@%W@%<kcS,R5mNhE>HRnGDr@@l\1g_Lgb
%(e?Kk?o`iJj49G')8+Xg@9d"S1>#N!c8*J&`TNggdH+E?NW*(]hTms/bi.cQ3Ad?'Z16u]Q+7eXJ'mA9=(78]a+]>ACtlMR%(&"Y
%[oiZ9XT-T.qX5+N*h5)l?EF/ZepjSFeJ2Bi]oqj$=KMN8d2]7f;LF'H^lGgg0ihGYq+b?6A[1AZF5bJTc$(5kJJN%8s$.p:=S!Ol
%HtMjKKC0%6is/`U68uu`(>`R-DAjlMK3l7DBu<3acI-okSsYgc5O-L*kE!_/2B/Q,I3;Xkil.W0,YUEV_p'PK=]VR[W+Xo[c2*5A
%]>54#PVPn=Qm#,nj2DG[@YS\R6h[^S+j1R'>_-Up/+UPZ&M^GZG3ehp)T3fl2=QWce'?\A7]0DXYBB0=[8+3Z*kQI(Qp4g!T.T3O
%N&CttbVe"An6<oc1IaG`G8FhPWUeq9CX=0t#"?Fd/'9;:e!(c8Ya9@RRd/aoP"7FPEq#SlZa[.'S.U^2=*R@!MG-5+0'ZGmkI\Lq
%jM:-U.4P)DT,3S:AX]hCIUm0pAf+S`[m)Sl48d0/iajk7ZC#n48Z<I=08k[R`Pfs'nqB'J+spXW/.Be</1+[='/,9#Qc6nd0;!KW
%hC*MhpA)qV"O_ipGij;Vl&&e(EHR;irmW4:@`iAQSnYnlS&fWl_;_bWRFlF:o9W0^BnsZ='2oMpq[U6k+!#jiX$!6nX7u?<NNr*B
%MnsCfSap6/S.-?JI;iHH`&,Aaj%lOV1I"-:+&M*3Cg>c2FL?!oqMBB$gqL/*I;)ksqQIH-khrO?lhn#48^2aN1>L?c30c`$\DYu0
%b+If-1AAiB1V>-A2U7'r>=SU^SnVbu+iE&8M.j?0a3=;KcH/Y]hT+L"Xk,>>Y'K@)]-QFO0aIJ(Xa;phJQZcVX89-g7>?!I1,Ran
%DGIXeZ[0'N6OD_Y7QfGK,0h9i>,H.MP&=I?XOqt+@C!h(;[`o;$'?MVS74VUDk"dL>dh9Z/ES\L+N%@+A'AH`**n,@N%?_8jtUI+
%e"*s3^R3&Db[\k#b:Md1(@rAa16:toajBmL9KU=uH@C%cX]51_k)2tZbI26WgdHQ9`D8pul9DqNB0*Y!o,6tJ3Ni#>gYM_86+pRK
%&jrS\V^5QZF3njtX5g&eNMurS4)?`0STd#kV^5T6.rO'neh6U+n!U!2`)Gu").p2:k*Dhp_H_5mJ#+b9ZLSmi@FFUT)7V^`mdX)a
%SQ;'M+L5]QZFK[DEUhN;ihp-@(RZH/S,[i-Y/n"HMedroh8IXuTR/e768+_P8\rC5-Wq)O.3;j>PU=Vr<:/!Pnle_OAkDTteqUA%
%iloN!Y:QElpi`hl+tPX!c,NY5%Rc>sh8A_8RT\oO$HqRK3PijBMlHK^S;PXsok<c*ij!i9]j3^X>],\I9u#:2ZFNC^\&d\Ig"[d@
%)]%DiR*B1Jqlb<(G6PI2=nrJ-.kK,Zfh:K`1ts4F>GQ=uFDd5d/^h1ZG<4noX`Q1Z3-18.Xk6\tU!"e$,,LcgPjV8D;`jAIZ4-&#
%4eKn/6dP:F$s2V'%);3sL)Cb>?=!^mp\.92m`/Sf.kuhR8k`*lX5gklR0tdI1E##%5Yeu]HM+dNWLg<T"Osu\<#bcXX-oi.Hi5&2
%/@3ihDH_4Mn\*e#duQ9,1G@Qt)\$^<HdS+Jh>D%)hou!DB@[R!L^p<GeTu>bA+==0[eYAZ?A;JWhOo3nWR_T[Q#)S55s?l!bAaM=
%I(a-se#)l(B?>VN:J=Em5L)#)(N7G4T!)D]*P$^b#A1L=KJ1M`PQpe)Jc/e^A:?,tgl+nZ?aP1!-bP'?fC@@[n6<osDFQ]F=5mg/
%i[XtFZj)rL!u&gka[7\,$?u(=Wpm";TWtkoD0:."=#**;TIbl675QqjdG.`_GHOJIn5Jf:SX\gcb8k^tnuY,03ph6jA7G=r)32-?
%ZTjR'%6q-(MAAM*0+<^R1!r52aFW]qEubs#\LIHW[R'_e_M1Jj[$^4ZX%edd+?prl.1'o$,at$EAW^EV]"T>?2q%fjq)B9[#(*f5
%+cGMHT;(AJF;t1b<^"p^rc9q`AtRG@rR(/8D:WP^qKnLIfG&?\36na,?4;k#+iCAlN`g140f[HGJhdQ5AG-%80fI>WfJnpJaGZAo
%c>(_tCOF2#[)Xi]@P07l$Js`_[GJX2\6tVS\G<b!kXrSTD;sY?Eu_O2q8Gb($5AicRYJBBiHEM0In"iYONGr!a"4ns&^EbiRe]88
%0g+:(ABWdKHO2aYoDGo.2VW-/C1$OO<MI37Ij/d!I;&';aB5t[QXm1.81\BPQAf00b;9rRG5k(q@AhfUkP13s/%<"UYLqSLXHEEK
%r&O@$!LFG'JI\mED8:5,M'0uW\`Y`<r].$KX%no<1uZ+?U:Cf5YF<@XHW'<M2nDqXs-U20mT5FT[-h2C:-,ooF8I6Pl`AQr#5+4o
%anDB5h4I>!Eg;S7+6KZ[<B%8)$T"9\RFt[!R;G]AEsSU%Gi\\)>A<h,ZFib;#&X@^9mus36%bStp%Z)5F"ZHcd7D`GU_crOUKWG]
%]G6m[7>CD8m<,\Qo%.]_r'_V'j@bSP(3XN[BWGE3?A:k8O3l:4:4!LDTt>PM,edDGD7'*t^]!?7"aq2Dn+N1Pppj$NAc[Vn[E`bT
%\(Meoc>q5]mE0.VS(m>]JB(5gk/=aJ9!d21(#to34m[9ZpN(fOU7]bK2_4k(GB.uN!jHMsn-ame_\)I@H+HAtK7*HH>C^2Z?iKla
%\W+RPKl6njDuB#hIs]c7r6_D!YgY1PJG--rg\M&MnH-pbqW'r;Fj[9<6rn1AJ#I3XpucJtOa["e&)o9^+PFpCU$mdJDWHQq?TrRA
%hiH`Km=pX^M!`iD5`"HIEUIZEMbuR2hYt=JT#.D/JGkV:Xk`O'LJLsRp)ACiO'Ma#XoX0^$QREUgM;`T@\QWKfj:LXn+Z-7\@lC:
%-M/n1-=PmVEp85<3"C=l/N`GIVb8-*iV?fp9@M[h3u$]AIo2j#(Vfo]Y6ob<2)e*t5M(!g.+Dq5@?C`8?aLO2m.BDUO4J<KM+.A-
%mK?GO\/HXAV+u0[JrHC&l%>P^4M%]rZmP_$(t*:Cq76D"oh%$LoXNR7Xu,n=(P?<qXWQ=\ZIIKqc$I'HfXZ6tppKa\qfqeUpohm6
%'B<:\d#R%"r3-@Cah[Sa.cqhQA_d'$oB=Wti9&G8X`j0sH_oJ$Ri!+F0n(i3fhT'ARD7%\WfA$8I.>kM*M,M(.Qsa)?]\#<W/Hl>
%P=GK%Kl)%fPN,*)CNc`@onf"r&LWJ.T/;G?YD>h=Ya\/9g:DjA9::)qQI_UQj8Zbj=T+iI/KjFs(cf`A*VB3!edT('?YZ=9]aBLD
%3-^(Na_n*XMgf_$H0<`XR\-Y2Q$Xm.b^b,fJLBnD)qD"L`]YgYPfHCdm@D,4"FI3=oO[W2J"gbI?8,&8kZ80g?SW.t;TPda8iL`?
%\):[aUg!:T0-Ai/1Jt<3]=WoX+#>)W[*rWbF.#/2SNat.R&'.n)lJlI=G`I)LLqlt+<N&pPj)2ls-UF2.V[nk]rf?0SSkJ`q+:a^
%5%uk>QVs<-_9$>a"'?e^2?`AJ\u53b`)J^meCuE`&p*iAX#-#J9lq<@c?#qqIbB(Z9SJlFb_0OY?/MOZZLib"cUll[2-D:;".b@!
%UXf-X`i0S?4WErp'DqU76)E8uB,eMtg6iLiEd,1[G##[B?E`l^gN9#Q5:\KaLqE-[(ki`akh-.a:-L0@:2%UmlaU9U.2MZh*?7O)
%M)k4Pbf!p'_i4W_jG>m+cNHnhM:/E[9JP*[q-tcHB\!!F>,=IOI,3+&'E;o]Y1M`\@]"UrW6O1+fSOYcQ&BrIf5%_t9mpPD.h#!!
%h>VDld]MW2/;eB`5p&$T?<"L\)c?%1gSdD`s%R)I*7'J]QBlT4a',^(ZnPB'C7IiM9gXHIpK`82WQf^U8BZ:G8?@*@"#k66;RIWP
%XL,`DH3[VZ[Vd)>cL&Hh=RU^Bk76g-p2aHG7_a!!@,\oLLZe>6A'iBcf6a(N5VC&(2F1n"CX:A2#8a`PUL.q,UJp.M**Z"@rFG7^
%BqEq'B=[t5Y@$`jf>-[6O1:MGaR5^N1$DDZaS$68$o;"gZqgplds>o8F"t1$,=Qp;F9>P17AX$X>B['q4&7B6GL7;n!>&H-\0/^h
%m@o_E'20$jk3V@C<S5D.#5q:@jj:5(@]<\#4)]>Ck8hplBt'931krF>R]?#G@$#M75TQ^cfRB%%QS<RZ\\h1FG]5?36`IopT\b&o
%l%?-)TR(g[e>'3;&&\ck\PoUed6J+T:2u)j!*FA)GbY-@Rl!(AG8tT![W3aP0nOkCNHRJ:lZYGR8Ut2CT^G1V82V,cTsSh+"#!+<
%S1E4+f:/elfKnB:o54*^Kq7TsZ`,MGFhN^f0Ap'rCSF5"4o"H>%]]M7IgiLJLj!$>rRog%ob(`(V(u_pJ,p=fddB&7^j/@_,1LMM
%cpX4:E90/\!Y4D'd]Ce17$m2Mg2(#ELVcK_5J]^XJuH?hO'F)'eG3G>?Jq]I;,;kUK>@_Sp2Y*@*I,,#76T3mdsrHl@Hc?I>."#O
%LX4/Sbt@XKHVh>?j68,hG,&_p>3&=+aeZ=-\`hg7^X=4OX-3cpp$/j@6B=:S?,W\YF_$b;)eRpFcGbk'l;A&Y[&_FPj;)[+mu=@q
%<@mNa_sOXmIdU4Jn`T+V3S!^nFh%7r6uO"2>3CrQ=t,E+@16bIU9opk#0/*^-LQ>IrO7>smnUIY;q/h.Ai+gJE7&K$dEc\tU*;SN
%XIiM,2tSXm>%`k.'QJY%]Bo(KPXt3R6FklA$h&LKr_!cJJ+Z*/4W+.YK9"AXr0%ZFg/P@BVdcQ?ch)6/3a/"H5.:D0ZT`&=Yahsl
%7Um?F_IMP3HRp#9P6k$1A"%8O@u6WOe5OLZ*:'LDZU]2S8P`Kg<,'cZL6;D0men<`)IH4-P\;=jb.3QO2A?Jo2BB=g_ZNe'81s:T
%jT5N=(-l(A*]Z'S>fW!LQJUPWmM!<DI9H(F(R6I<2-[2@rf:O%fut`1j%^IY+Q`6b,6F)AEen]D*bmF[?cj:(Ho@:<]ZH=!ks,O3
%C%j.&m*@qIfS9L'RC3?Q3;k/LF#ZI3ON6Pn6MlAY-'Md\VQ=sP[<c\CLWeM'dHR.XWt;9>&Y^a*=WNt'YT@!:lWLjs?TZ;RQ/Y-U
%J!s]r9%-,\e2.6+O]5Tlc+CZ8VlN=4HOM@BOqfBE18.Z,T%sc:42G$i<:U0thKe/@(h2iQhRJfKj+dK0S`?:78LMRLTh1+_Vj-42
%^K&*Hg<?(Nb_";NS@6`7a-^df:/:@h4^8LGA*@-^mWi`,I[&W"nUk-g%%4C_V1%A8`MeMV4/e>]7YG<BYh*gUCSE@pOSWp\T-fnH
%Cs)&Vg5B.8;l_k3ft"Vk9e9<2MU[lcRM<%O8U$SsJOn@m;T[S;4!U4+8GQ#NaKtL.=N[t7F!"+F;0BSZ.;Cc`IchnRm=Mpm=L_<]
%6#Kfd'%e"rqmG5LO'JXl,>!*<U#GUEECU@4:$Z[ZeRZ@M_E.6[]Lg)=l%Ua>aCmVWK$UOKH]?K4%gecL*8@aRI<'%i7*1d5/g[Uk
%KSu;_J^*m*(:i,CA#Gh^;XLibg&!acGF9FARS6S/UTQ(:m=Z_+]<sa0s"Gj^MQYBl-SR<JFh7TQ<]l+q:'FF4fqRKTr8fgbM:<Sc
%gDW^SQS0Y]9dKX#6.0*4U07G7M5q7WeTUCZCBgLsAGCNjF,Z@1ABi7c#'EJRb64L.WntaPa\,npP4^M>][VUk9Xnuk2(kR+S*r<4
%\eF0GJ*\9dhB(i7;r6`$&U4pc[G/6Z7"ZX["2^9oFBs'QDdpC>D0B1Kp+C,G1Q[t`ckt8\0%V@X51X8#J/BXOW&5q?LcHiXqU%mH
%T<C+"pch&dd66_&k<WgnhV^BXPO>C#l@HHk.XYbDdY$`s"4kX6]pEZh:Fgk,CL[bf:,CAmNlu8F$"<=;:FN>Z="/o(!fltq5hJ0!
%5W2KS9Nt%fn)G++)u.nY(g11&/0*dKs1HFBoC$us.7Mf.MX,!<D%u7!W"`VRTc>3.MTDa)eV%D*AHF:hGaD@e3X%*6(f#MoA`oe6
%RE$J.hIXr-'X^5iF'Q<IR<ig=$j,*u0>iT3A1*"QoeL"h6uq7^GBnd4[$>er=dZjTCh!*7D=KT#WRudG]9_4.ICrp+j4q\OSV,ag
%m0$b*iiG2,jaFct/mE*WKZE,g;5#9I@G[iIG/gb^(65Ds+6SuhQ;Mi%BD(mLK2cpcj=8V#\B'oE@l"oSW$cWJl=@2&jm*5@]uH];
%k$G`J;GS^#V/Y22'm=VY]9O:hMRc?k-J-6j>n%TGQ#WA#ckT@(1B-c`\5AT`gY+aaq9$Wc=_diu`HRei(hn3d)IT_qVKG:P%8N4L
%WRPtA2?\(u'Na%/27-c&)8>N0-.9G/;6F[%O'U9]g0M7<Hn]`OfcWB+:6i$#&rkNHE<!=JJDEmP^`'Sll,D+&q_t`^ZYKrJ-`Kb'
%R8I=CGd>1[\hP*:6lAuO92+Y&N1uF"okESK[sN\+1KFPUb/@MZIGX>`@>*-723h+nBqOSXreE5bjIl(Wrd<)Z2aEjdeDt/7c1Gn(
%K6EDAhqr5u:(%<GSXmhT!OjqtNo[)3B_U)5Hg>Skgg7%o?%2(qg0NCekWWmTXe)u)4l*i\]QCd<W8r:aJlbaVK'THVY9#oUmQF`*
%J%Y`-UH>E/gKVtpkbd`mf.F%)qH>pc[Vfo_IEpa+=C8f+D=jD[pS"%8[IU`.U3bPN4FQe+]WpnT%uQ>O&$)OSrq>SQ?00d%W%]c>
%hcpWJ5OOlPIbOGNY:LJnST57JdQbA<0Xs=!/pTD4Cjp6XIKS,b:9:A6,>5W\`[Ba2QQJC,%ZC/7j(mauX.M<$caQ,UXS24eH_ohn
%KC,MU[1fKnoX4YZBQm96q=H#hCi2)eY+BI$oo!JAHeZogQWp;d?2h:;roj%p;%PG;.t0\\gjr81^6NkV44cAlU9?K_#:nE\Jr-t%
%g&S.0^Fn?CDH6Y%9>r^UBPkG%e%KmBo>U9eHQ0rYYI9A^_;0mMT3a`dX&^b6po/7Ol_JnTWj]&,Q*B#QnR],uq.X]PH1TGNQ0u>H
%K0oClei+<$cGnSe1Dd%tem<j[.($%a>PB1$?b7Dg5!EY5iVhVi>Nf+3m!IorG#DkYoX+?21`,#OLMpFu[b<.dY<X>ecQ=^?/CuhM
%iEf0un?..[UU[XZrQWo6m,O'[V4A.5onQt\oD.8>le7+okP4m$.edBK-A_:J\9f6cj[8MaGhGPd4kr07'<F_,I9e@-p8@6&9D9t&
%\$iKrHf)eW!rV%6PsQ`mNHP0rN^pk>HapaA5HV]RH7%j6b?J=AC!JeQ#;#YPFmn;,X_"F&kk'EWkfnbQ[G'4KT;a[]NhO,A9j^m&
%<1?Ys(-ZFJm%jsa86,Bio<3"sN_&!&HLHt4]FV_W$\tR^pIZh-T7,Io<,UUG%$"].N;%5(I9"oODXNcb%N=4_^3s0JKk`NZGDA[T
%U$mWfqlM+?hWmo)D..Y#o_$I+Z10]]^NS&:H+I9D\SHg-++=O6rE;]m(`e!>4Y,lbmloJYh5NONg/5Es>l[TlJ!#5+n'UID2^-Ve
%+KB7Z*VOt9*'Wa#L4r8LQYAcD`nTo=<R_'AT\UeuT<n4)G4X5ZZMpe5D1C>[aUZn:XDaH@7d_ndg[)kNe*U]rQT)'^$t2>\c?]T@
%'2$/BosFY,E:hX,]32mmZ1_aUl/Z!]@'(NbGOF8]]Il/u2%g>kj8/JtXc#9[ZXEf\lWuTdXmHl"_7L1;RtIg])X7P!Y1>09meWL6
%l.K)j>cYTm08/eb2sGM<Hd[:Y'`S!iXd/#.GZ;#fkOiIVW2=P/]QOgUc,7&u=akQYMI.Q=FH>=5-d[.I*6WWo4WcSSrnd@>^#n$l
%aa`d7Hhd@D?8/0D"1bEZgKPsgg^I5,?^'s#gJ;-/;lunn?S:baIdP`jS'CZm:>t^/m0tK(ftF23Mll*d$YT@f9),*aIr]]O*rC%p
%1UpLMPHOLPl/_Q%!;PrO$(&0pqX"sXd@l;-T+9]ENRJ,NdGKF&*IDF;$En>JHR@RN_Z&MLB(WLAZ;07NNsf'L-KmS"ei1pA/fNL1
%O6n7UlJM'fX`1\`fYUn&D&j.qQ6(F#UIUp*[qO,]rU:L<X<.i_6soAamIX/hIoiiNS+`NNTlBM_Bi0<u(VX^e5:P`GjND?.#N]0Z
%pA;['iF$Wgl#2CqI2X61NG`n3Q=r&1;.$f`5.0ci(d>!*[u\k,m+^'Ueg%eQoBs'[o\G-:I_FBa?XFl,ebnftr:\.p6bm".n]bi<
%q?5?q6i>((NM7V&Gmlp/m*W$/XnD>!<jJ=QM>-'AqeHdme-b^*F;'+&2QUOaD]d,/mqa$VL=1mpDmVEI28l0Gr7O_GlUn?G%&sZX
%lVM,g+A5r8n-FKm2W_FHh/sicoa$"o.-PD:,b]h-6Wjj)P(/>:hqir\f/DU.RmU=%&a/&d;?`_Z"?ZC4+<`pU*XJU)DRO`!k#>VY
%6EGb!@eHp@)sr0'!Ya/6pU=Lca,WrB-)ssEF".")KV:%I]XMV)J3WTX??-ZG33'u[Db.D4f?3AMZl>]?A4MOfm7Pn;=l54B_CS,5
%g'Xf%agok!bC/Dj@\:fY_NbEW54L?S.l%LoBnP!bW5iJ'\sd&#+0nem5:c"ck_Z;O:K%'RA,?.^IDer<ouJM-8fGZ%p12Q^896&R
%g%rp!,Z!3Iob1L85U*!idBrF=<5F[o@$04]7+Fi+l5.m-ZDtha=^@g)/OSidIR7cDdD"iAj:?ouQS-Y5i8:_q5ZbiS#Z[Pbk2qYd
%Tu1k>DE&>=d&*B"%ZnL-V/2@kK>\.KJMKk;o#?D?-[fF69`)E[V&)B]o?dtDmhQC?5ANVDgDdWfLQIpo3.+,P$Z-a,:WqL"T"eLc
%^32GbB%;rD,8H<AgjnmoFM@;-qQ&(Sj7C[<<qZCF/MYb\ON6hY;;d$,e>NM/7n<=1N(UmAe^E^)SOXklh:oL3;3/O_H>):$\afOi
%;Hu='m(Y2:HhM<?MmRb/0C6/@],M!I]>p#Q[;<1<H^*cr^9F%rlRQ>N46^\Ps*j,5jNXmuT#[tuo&9Pl@+e[kaf`=&Hs3Q-h0Qqi
%^r*(&=R/E\M]\^"-7]UK+J$N"4Do%\0_ZPc``itF>j:$n^AkHg]WFG6iP5DN\J3"sWGq_NjAN"HT?a9(30EAC$2`n,SPVc"I.rI-
%TO-G:Q\!rHVjeBAS#VXJrJ`pQ-n-..$N6MXBN3`F8VJSk<sdfKO/6KY_/6.0cLL&?N=U4l?f(_1Vo[\?qUc:S]dc0BmV+"De,^Tp
%cgmp'Y@/`R3S=Ohp64ugZ[>m-IJ""b*kH'S'/KfDC314:[/)H^mNu5unRaR:rK,0&;QKqlp"e'Vo:'mdA1uPS2PphRQMZ^rIQrkQ
%HY_IGOV+g<b@@iXp"NG]iLm`$%j!t6Aln^Km5c2iY/N0.5.k))I@Y_[jsp"N)Kgr3kLYW)+0VdJdmlpN"?tp5i;Bq+oB5ijDq[;C
%P)ci*C!>bbF6C@srC(2eenV>;['6O$U?gmNIB^8q^@a4Q'GPG7rcIo2p/ZP0`OQkq,%4j%2su0O_J8o2k0(Gt4m1,&edKU_i8)Yp
%b81DeEJ?`,n`HmQPJYTs.m+mnmoeb1I.M>r\).&gX2Yit7-u5"<]t\SUY@qYjfL^ro8%-`ZQ?5s_0iV'S]&Jf-J.\)k*&MXY\E([
%\brIOc"MkCT*t2CZ^'U06gn6n;1NSoQ8cCi5CKhcpWg&LY3QPXA';8<N)fc0gIHIjSY<.Q`qo5gp;WSgpMR+)h)f;cBGc5QC<5DV
%?&tD$H*U=og:dApUgJ;JD*8ST8N/PbP2-tqS'-/a',5?+;/oJmG4i4VWZ,I&Qp$ilK0:+Cf?Qsmd;&l]PEcXi@r6WEVM`SO3Iu7B
%]%iY(?p%LRfsMn<T/DI?eW-fGfY6rpY?uPJcE<"YI.6JkX]0)TbK9sSIP78IIUn_$:Tb'q\^J%^0Mh9VkQSnlp#^h?>5rWD/lhRT
%n,?oT^McKM#AkK>XM/ooIG-aYI.IHEIsPtlgZI[qA-b7iX:H:iE8r9Y,2U-j#j9[FNpj`$R#qign..A?+G]IW.2^Y-MZ\#S(NeWI
%]2dbb]R,#/iQ<)8Ss)6?eU,lfK!uH/"BY@F_R?-L6*fEThcPC#l;hVsebHB5^ODY*]Y(k#>1c'P\,H*aj%nXr\R"Ol!(IAN&+5d-
%5*YMF"L:fKi2bH?2"/kc"^BC5XW%N"8(V[m/"M452Oi*RjjMVS4%hWqOl=:Dc#YRsq"M1[)[C"#C@tt:h=#4:],R9eGc,$PCpJto
%c-I?4DtNoueR`FYdq_7a]Y2)E+6HX`05b.'G!8#pQN\Yp/PS#cs*A^kg:7+P3<XZOR!<G6hEAD2Wbi/Bs5)J-cA.IIOhACI^8S4%
%VF];'TC8<1Y_FrbX"R6")I(CUpGTNQh_#oDgRfOrqKHj&kuZh[L2?+#&&spuB-JID'YJj!Hr5:i-tOO.'EclJIb;@-!M\jtqp<b1
%hcSqf9=+2^j>Rm^S26l[o$C7+"i5iYDbnqWc*FOJA(cs9Y?qraSR4Fs`pYj60QD$?d!iLR).cIXn9-nDMtm+iICl_q](KlLD=`@7
%jcZnAV2an84?sFj;$]D:?;NNLQht"Ulht$:Xi=_[[gsVtq#%;A3SV6j6R:_j78`^C8'O6eoOs#Jb/4I8X"DRMPk_nqF]\q0I0qEa
%8gc9=cbuo_jS-dhm:,&'l#q(,FT9IB#PLn9^40H+9iALuPnK.qS]^YPWR!O*^O6"SNR]u\duERcHc.74FW"E/S\*BX?qYiZQclB5
%Bbp`:"g(",5&]8((d<DSna6;/];2E2n=!QE>]Fup#4hH<`p8i+!A"(Vn8qLLn(1Su<aU5CK4_q]r&>+6hej7l@T(Wm^D3:0AdcUG
%UBtfsn"8,pIo3e[HX%ReFpFikT6n9"o'nUJ"RC8LgjB8pq<m!LC\OMeCc="sLCrqOrT<pE]`]D&]*SMniVh3H@2JK#l_MM2i_Jsk
%QcD%oY<CY(?N8e6STMGg10X;OL>Bj'Nh5+Djf5fE`KNg[E&[V-ib\0aMS$<8]`$Qg*<5r<o_@Ci3lE%Y+=<8PYM]);6J&0)S_>#V
%5X2!\G[%2OJ&Y`&E%gT4h7H=(,/:b`#(i\l?OOL>V@2)PU[sK<LDSQfVc9?%I&c!]1BOVdr'#B#b1eE@/'hOrf<E`S&.,W<H.t>!
%3C<\Y?#FR\rAIWgP/!2apQVE./qaJU\"Oi!m1h[9P9K[]eU[@c7B&&*!gXt-Z;+JnhfE4B4hPp^=Mc$-CGU'U_toR."KN&]q64//
%S4D<e_61LS>Ldq'bWST<:G0@1qW/4,H@[cKa6tpTZlhsaa1V^Rh`kZZJhcK<Ai&5P6(*I4T+,b5,eQ3(^TkPbEjFP5dMUFJc_'!t
%2OhsL0BlGcGT8s)3k!UXo*AR#0+_J)R[#odZ!8)\CY,]*I](sS/an.hW;u42ODqAC)li&O<qZ4F'4a/U]%^H:rf_F,o'OPJRF:?-
%PLcj?OPPBq0]XoSUf:=_*;oP3IU&?iJ]?E5Xa@[hmsts5YDf1hMoA*\n2^-]B/cLWmJNe\^Y)_-DVsCRHFh[[FRM"j-[+Zk`>;bK
%(GW]fm(JIfY9]5O/A8^f%PsIgpD_^cf4D%a8@FSJpB,B%6$"8uHb*45*r#N@Y.m;0i9ADMUA_+B>H=saC4Y=?GBhXK^U7U*q5@IU
%?0@jl*FG>B&V>E!qj3Qq&-R0X[?Eni94$6ZTK79ipXqpU9FVk8nBHt(+;d>qhVL3q90X75eh/mkHAjUh*7dq(Qmb'%1OA(HS?i.,
%E3QtUD0($4S[-YFlJVE36F;pU*TP'\ARmJS[Hj==H*%jpIeDrJ'L"!1.@tsdr@S`VXku(g?b2k&c^q9=SudUCT3U-RgtLIaqt(64
%dI?6\b?=gF"fMD"*/<F9Mo'qlJ"p:)puBNONS^58^R(NTF`E_BE,^6s@[)LFgCj5:LPJBP2UE0\PYV28p\!Xaa%#RfgYFGPPO<nS
%?JhnXMbG*jihJ\P%kW35:Z`XD\*cE3#_+MTp'>'g;_^D5Fk.XAh"\P!;NP(aHFW6>md=pM=7!iFDr8<H6eh5lp#M_fH1@:<,e(O9
%)P#cXP1u3`XgFE*]qI?nqA%C%-hg^!5jQ0g.^Y74H\nA)7;dVNm'LFseD!Ne)RJ5N&D)@PJ.CJm";gfQ@"/!ME;1nFeEVt<2nkSD
%o%"aiRM46LjUDW#(KR_IXja=lfL.4RC\.8r@Hh[iIW^)7h6Y?m[(M#[hJ/iq_NacIE$?2k`dM&&@r56q`I7F_=+X6*Te[U?Xd?f?
%E)HY><dE0i>.VKAp#bsKghCSQIXCbqI*]sI&]A%.=1]Qg8nV)Zr^\?!V%"6TIAaj2fr>7#r6=DKmPMfScHCRPe(?;s(3mQA)m&nU
%qlQ--dHRP&`a*""d.k8$=u\)+mc*YiDpKno*^BqC":<_lD-!#<FSEW*n`oq&d\k*slce.IJggSQ0rQt8!),LmDS%Q[B,e7DdS@.D
%-5?_ecHD:#\!N\'7YSPMb8mHb@g669L^*"?rmpVuQEP]^p)@?8H]0>De7b^`9r>RaBa0<8,FS-ZX':iB?^D/f8([IC^FXeRYXa'l
%4hZ#J1%+[_JYUP,41e;^K@RH7N^9-1[L=7oi2#[`C7Si3G6_mXa=$e9ea&h_CndZo`fH2KD*>WM6O195%,L0P[oIkO"A4#`lf(D3
%C?rcsq".8sG^G#UqYAHk_m=)"\bs3tHHVtl0sO,Ja(<tl\FeaTlaS%m^kTVL8(Y(2]"S])"8E;>qtSdcm51:73h=aajo>[L!'UPT
%V!eV)+%loC$1MjMr9Zk_\0#ap[!e`&-Y&\)%:r@TZ#V#U.;RF[QP\^j6/p<H]U,YSQ^:2d$[\FV,<:E8o#/LCgk@T]/;=f!H)KJt
%Som,sHE$L+>J0uGB]J`P!_A!^DWTk%3BXP<dBu:/JOM.:RM$Pbn-,a/`:J,h#XV=9BoCR6dd?B]P)>.'6sJ[bA1>6?2;m=3ihEfN
%'4k,@Tf.c>*t!_,KRn@bBu2PO)7-^K;([@[acVP]KY?Jub+?D%:NbKU\cXtNLW9aR^S*0mR*=H.:8g(4=sT-5l\$m+%*t6^OUXWQ
%3;UbD;oGd/H.5HL>-Os8`ju7BQ`2&=\1#[:@+Cp!a<#>hNHha[I;T84Z;hRc!m+hJ4%UUjat]`>=u]8LN0-6*Ct)-P"g6@T-`oEY
%2e`EF<(Tq&irUWPg82Ag'2LD_Z]RAmlf#U0ZA3OSEdQe_8r\4deanMebVU<qqcH'W)B-fgS<PYJ6M"\lX7?lW10(rGM\5]"NhS`$
%=5#N[!Q\jOCE#CnS,2[@7fAAVNa'.'YgI%fEe_mpRDerTjCJK2j^GnjpX57r7a[!^bDqr=de#tKQRUt!gLraj".0s>pZn_+dL#:.
%O16NLZmqN8m\XtHG5OU/3N_`e#BD1GYrV'k%\WO:i8dTQ)6=9`'8CBclt[$B@i1hW)l)EuQO*N!>PW7EUHCW@EI#S:&ONbOXu.sE
%aKKo43X9iLc_""mWMg?.5&7MY^\MAmhD3)F=Ha4N=@JR#/[2.8:L1,<H7l&[9:<[5Xn:q7B7ncT]@'7<G8bUkR.pLMD1:Nj]r-5A
%)h,h^I;+ph0KALNqqIZbIin?S`@hQ;4_,?CBBbK:8f?]-`$JT^N'Kk7FCeH*h1L1![!-6r"?0'oQX5BASu'FYdWs]a<9mB%I<hC:
%mh!b/1!JBY-Zp?Y4^T+G7<"bOftiLD7b=CMN]YA!p!H:57mB+`QuZ*V)p@ik:-7/IZ*U1ePM**S^0FSc-hEP%8j.UUH.=b;frg>.
%0!-19\4_)@-9Nd+^G/@,O9HH#h9L#:?`s=*-\ME>$R1aqL+WS^L0>a*qP2M&02K*4@dJaEPHMM7qrHnX]>DQOWoH"+YcuBZ84Cc;
%\gJ@rW/3ja9Rf3Tgq6%tQc&RW$uEr2G#W4KH#T*'1]R")o(rM9?/E5[>Ct9+gVm]l78F[Y/0bgrMFur&gN]>a8'E0RO&>KTV@afF
%O.-pKj'K(?*^4BZV[nAd!#<*kjO/+PKkBqLN^C!0((\`,Z'Wt<hN*+!hlr-Krl3gC:)up=nfIg5oSRoE(WJJiM/nXF__43Jjl>7t
%ZUE;ffk@ojF)8YHW&Ikmg*u,aF+X5oW5V`,FTgd/P.M=nOdE2.)I>@KG^lQ8p%i51(kei>UYl&\jU1eCm2s+AB7LU10(@IuplW$:
%2iPD>Q1n`@!YP$Dk_69oiof@;$`sCmplXY^QFC/t0DDo,cO1aZYs7`eVsrq$@"76Fi-h3onB&i'IY0<JJ,>;qqr5#?/*]9MXl',Q
%?DX#sAVPI=e5),p)0dp>.?knEU$Yu(MI]qbD+F*3E^JZE87!fc64\2M7.:LI7%bLN-@()I#WK*kZsAmOdHF@30qe6Y(<f9$\2e@A
%f5j;9d(C#^JPT1s[MRtZfFr<%NpR(-"Ekbe&]s+D^afuW<c#t(j1?U.-pJe60aGlA"BM4Z#XS1^BTs53@bi?j.fk>+p(ftVX>h@[
%70Lo;,uN!0!=`M"c*DDN*TpoSMaGMT,!nBs.O)e=m4_Uq8*pT9apJ7iie(+b$6<8M*8)Au+]d^G8s-5"4rNL22jQ='^)I\nkf+c4
%@6V,M,7XlR51EpScRKVc*?guE%q@O&`:l[1%d5%@,@oGNM$Rl#d#/q*`O>l,5qiZf%IcqBcMIXpTcM1!]UYQZ:oPH;_bl:&)CKK0
%<Z4<=)[&X4Fp*j12Id6h!VR'c=os^t8NA8#Je0c/`tSa_S-ME;9FW5?'=eTg$9Nj*N]\t//j"`)S1$3u'iE;_4l,sX(s*8OQj?#U
%AAucYkg:gI,NRrpO:-lP3!rMOTb!kW-ieYX"X/M[>:@FND,+1k;(qBkTg/_D^/54FSU>,HAD41o#9S+u$e^(9*,q_B7#;DQ$8<la
%W9dUllfTi1`uTgQ12?#Y^ah,F%HZ<8cd8s_*KQ/KSjjA!:`Z;!?kmZ4+Q)`H-aH!14p[[27X\qYWV->A#EIn'O9$7\YlL=3.fdN^
%@TPks#`XoRUBZ@T1&M;H%aQDRc3PSL0IWRgAPe=1NNbO)L?Q>r,YX'tAQop(`TgH"<O*Uu4t"hu!'_J!Yt#@?RukGZKGanN$k\UL
%*Y!OD'Zp\LBeEM'J1C8cfT;Rf;,ljAe8Mm+0U*H@)s,o.97]!QJgD(i/Aj5[E/"po84"]p*<Yl*@t=#<Q5Bts+LG^:)KkTOF9Q!+
%"2+fV$-nK_TYM,N]Z'-X"FB!J(^NYLWT(^h!fko)VdlAGliTi^&*@"Iq+[g36?QL`n/hW6i'89CH4iS4*"ms=i/4%L(^/IT#mV<"
%,6@&%SHE*m8asgJc8M&G9tglU*sQ:5,n$5slO+4B`*akK4T[:6rnuoZ5N9PSQ,<lDM?[,I=O8(>OU-;G.!Q+?cjKV:LO9r-HN7"R
%$,C7B((GsdfR#SY-7j[&(ar"2Sf<3'eM"@1[J1bJ";Fg9^O%YL5o4'C_#P("60K45+@Pc%O&KKA7sTs-E/-%j%.c+I>6*Filj#'U
%o]@k2oEs.T0kSMKCae,#7-P<Y6&nJBnNdUVNM/MSZ,<pU2J86.<N8RO'rK3YbV<\):>U%4_iPlmU;/QH!W(0in]af//ceFSRt6+b
%SteB8r`s]d,!@5,fkJVLPC8o8/KFiO5S%:0LuW?pd3Kiq583M'6,s(+O"bYoNUfsjV?Dl]@2_Sp1L(s?G%;A780/?G<[g_L0LS;V
%+*]90UX>`GU;4>Feq&;#M?=`u"k[1MhZq5Z'<`C3Sdpg-?kYpE`%%(kk^\E8^ln*lJtH..$K`JOT\(#IOQ6Lh\"F$s0J(/QqhdhV
%/iY@3#rc.+l'@0XA&CP;eEDL&nm0ibMin_e*lUS"Ak,-*ojG/%7T65n/`qa:0Q\K80d$bP0]XbDZQ,h:Y&'aPKOOtl4]Vk-=U7;=
%j$l='K6)a8np')1_*=+i`F)"LhO/'<@gq?-UG>L_KBh/1E8)F:L&j?X8Lr;AT[a^\ZBCD;8g,%n)^m/=CnahNX:j&!RMgen%DGt<
%16gGndg&BQbkBgK/OQAr+c<rfVLCN0AL2k"\,7pNo)KdR<(W/Z&LX:9WZrE93U1$jD93sCO(Ctpcs9p;AqAQQ^ah_),9;4Q@+GPo
%GRs&o+\K0ls$HJA3mto938>ZFUGt[OOU^$`i^MphJZe<8d-LI%U,c<I4lR@m.Gmbj6Rk3WipeGG*4\Y+_i@!u>m.)Xm8B^aBS9#^
%DOa0N-uhu."_L(O8q@]MgNEp8:>H'ilr$kK#%])7<*,q_`YJfe":Sj/"ehZ_O%,NQ8,1B8*\b)G!FlFDY\ja]*-TP&ni>(Z(?OTa
%74=&8I=!q'3!Mcb[<,jtKT^a`TL(BQ[-Sd5"'biG3/eZ1QqgM1jcQhS8\&mRe1C\fbT7Zk@!fhPc`0LR+raK41.7!t'FuO`V&Z;J
%P\sUnMF5C<JkUC.6lD:XaQH`Ei_3laCRHU:<&%)fN5=.s3F&F\VB05LAV`giSb@(4jjep'(NU*s:pYgSD3Bn*<`:lG%>M0_+`ssj
%5@#F"\[rn4=&t,SUVU9[!-uC=GigCmO0\&*8hDFL%lQ]fd+ATK(_']XWe7LR"V;_t+E;KTN(5>dG!-EW\e]U1o[BrnL=`G]CI4)Z
%c^^A]'ZhnqKQY'=@rP64<'MRfiIJCl_%1sM$\K:^#PgSZs*Vkq$,IS`@Kf7A0U?.5hauoiq:M#o(eojp":,*fls$oV,8O$i7$`c>
%>W[TKK(EM^&dc-Hlp6&"1"K5V!@W$s(j9uQSe,%'k7W44*R\(%5D[Ag]eWUhoY)WbK]b_>q-Arl1`9!W"8U,KSu!u7Uh<WCN`.EV
%/;:pN3(jGu!R<(AKL`+Q:,,<Y+qq-OGVRKTOt^n8=<U=joGGR=,+n^]5dOT=$^aIUXU8T6KKN/@6j"Fm$_-FnYUS1iTn+4D82eDl
%PU-N?/J?gWKHCE#QKX4"74Q1:`]6r\Js^p!+_W_)4DJZSeAt<m:Sdok%96OC)&Z!/q=lKdLb[.Gi+0.VPEAuZK_^j$39XHf*c^11
%9Rd*XOQsRgTBA2.@LTG,U`3e>SN0X:_mo*]"?;VN7Nn5A"(;9'f,DUB&"!m4)emfSl<uAh&ILtU1C2t`5P/Y,i[?)?[Uk@0'ahqi
%-$iE,NJ4r;Pc((<-g!1>cnGsjjG>2C5S&!PMd?O(gko%';@sWDQ.`U<7\R3ll:M6f_*gPn,=>b\%,EmC/quYm9_4&kQ#OQ[I?-FN
%JO68m.%p:\omtHYV2HO%pM;8,ePRM+K!Y,0k\J\']GNag'hB)l3Z^dsE2PUlF`HD*$K\Wgi57Os+e/lK.EZ3M:2/?9.g4?;;n3)>
%K8?:71C/+H)^8?5k-AE72'?R8gS'IM'9+\ei5NfmkOn,nMFeC&O%cs@NBqRDc1g3S$9e[(cfkq&4Ka$/!Yp!a1KNg,9$bL+^BB8%
%TLmKb-C&O@E^M-&PkQ&UlMdVWhA81%qlP^T%^+JYgqX1K;UggbFs\`8SdWG1'N3lU@73caS&EGhK=W&%B(188,A,U_6kH\U_aV`C
%%f;U]KZqLk'#=.[%E"DrC/gUC$<=MFHB'Ngs/I,lF7l6J(F=a3L6MHg%J.5bBp?3-86%D;nYHB8QNKcfY_g2+a:UCR0h&lH"S<]b
%Qs^*31hds$7$g=a&W?!%N7=:4[r\DXN]Q)p>i$iIZSr%'XG[rmdMEe$3\;jWFm\.B-mmoA(I8lbN!d0%=<Ug8%"pSP!iSaiH*NFr
%kT1p3Xugq0"lS&s1d2_RkZtKC0*9,(^;J='5_T<JEN0i,&tr8BAd^tKB]Se/N,rCF'kh!+83Y;Q8$"rm3.20=(#oI(%7Ea4T,),R
%/q#EWgP\3HM@]6P6OUA[aAo;Y`ZZFjp`OO,n,W^tX>n-eGCUg=_[$ii`X+;VpjnGF5UAZ$Q2*=(3!M^a_.l?R[=b=jd1eS2(Xbj-
%<SLQ)r.,uQ7kE]3-2K7<CaaU[`WZj*?5_sa3m'bu@H=BLK924qE%lIRMW;Ll._n(':0rH;i6$7t^of-u@[RM]@&/^/>Zeqp,3g2E
%Bm:tj8q<V]-O#5=A.msYW)N2"&G6=rGo6F@\@*eT<X]uZ)>4+^(@51!8mL*&CJ'Lb"Cah5CCr)q[Y%dbd+s8E"-9MhG_QXU1S@Pq
%;A1]%`HcZR(0V?=_t4t<QV90AaYFQ07:)&sh%1e6bD=6\<FHlq[;lt`%]%#%."E\mA8rb.&kH^]Z/i\sTpN(#Cd2kJo`\fY7k5IX
%+ST]ZL)3.$,48CSk!_8*GeA%0(n>J/j+fAklIBdhTeI7H$ka%f<8WtDU6&M"nqW-DM1ou\Ua;q7'h2!YJr=Vccfc?F6Q!$KKUfuH
%jdBB`L0YCDkroEa$,i0^;"e.I6trZVe"R2RiWgNG"XDg`GEIg9kd3oDa?LY<0j8%q8/tH#$H:7@OHa-;8'QaTC2!t-_/dL%3_(?I
%_\@b=(Wg?ZeZ0g=el=k8'7q9qO9dRd$,t2TaMB<Pga-EV/o<LskaYPI"=k-tLZHD'ZT'&b4.HtSBoT5/,If;fi@pgQ38Nj+1+<r*
%[.G89>1,hg<U(J;!Y6JbJSgJLo<D+OjI6oA*f:eCQ=ki4a11&$.m<t\E"PHW\I@(aD/u_n#j$e#E]H%gXr*?ekSY?Abm1CV6ddBY
%m?&EI&f'\^6,nK..V3t:8O6mYBp9e`SDo(g-RU%Z(_FR6dtHX<E`X6?`A/u$-gl-``QUs8idMOoPe'C.g-stVgm\o80MKqP8SK)O
%[;li,.S#XJO@QoCI+j`1+l&kjP`HGL4.0oqbJc^i4c%N71ij5e()HCh2#BW,N70m++1j`0I0I`p.6al>1.&4X+I8mX4!"]K*#eH(
%A&js/DD-!_h#eRB\?Q?A'Q"a(J3hA<`Kh@^okb"<@b-<Xn[P9=2MA5%@6Mle;'f0p6BXDI+C*YucU,+)W/[8Y#`;l!Epk9E!#*i"
%h$@%l(iTV#dBLFR+#gWQi`Tmn\C89N`RA;*$,kMWS^`5>A/mp3mWkNlQi-agY56/*SWj;1TsT7scm:c2eFl'[IIR9F!T@u8`2_cA
%$<A%S(2hJ"T.`)9\Bon;i6VZK0;N/#"d&j0>n(&!dKVAVOhDpV4Za)3oeKK$LspL\c(tu`X*c6Hkl:o?:Uq^u9\DfI'k2Jtq1bW[
%8o-$FVJt:g-Z#5/;i!%X)-*1<\"LQ.l%H>TL^bR2_ANQg)%9+?NdQtOdRH,p@S$(r.?rt41l@!5?7\5UA/.!gNgMC&."j3$l2ddq
%M]"9GA./Tt)+=ch3nR::MT(H'"5O7J&G_cO;RVCCS-d0r6Vl86_l1JGWd$FZBePMoKW\*<.4^EG<,YV^6)%,9XD]3g_bDg#2)sc4
%;O*WRebj[UJ\j8(34\=M$%nW-Ncf%UdYoQP_4n,6kshEPiuF=aJ[>&$;rta9c4/&$[:Gs;"0qRFMrTo]4@'Dt"5-&]TEaR!PuU,'
%6X-0>5;6J5rXe*5me]Ti7_UXMUbiNp`Y2=?F#a\%ZO^Uu`]=>m4HUGWHVk%n6""lF!#Od&UJjK5j7."j'TEq)*0e*<Z-Rhb$;I#q
%'^8)IiF71>^%YDG$9(;]@G4(;(7Mlf*LpLML.U!`_mAGio9k[J$*5W(_TA\j#?";5P9sEVD&cf3E!deA:mC1TA7Dtl(03BtC5OT5
%D)7KVj/Co:LNZk/E$DR.6<%Dm'<X`K+qLJ$aoQASG!k&>+4965ckZ/h\>;+uH_j/4o.2U;OW]aM#;g<H'S]?'b\1<"2_EqjPmPis
%.Qs8o2X]=cB!"p,N?=o<&Ou)naU`#D*7'pTTnu!=2"S]A(_Y!h7Obs>7RaB)>-M[QeTOc`laqVWkp$d_UmaK!3^p8bbMWPe$dYUG
%&@48#jU;EL&*Ob.7%.+'W?XofIlNGKd=djGVL_s.+i/t'Due"@K*spa$6ULV&Lp.Xge('o4-:mlIA.Rff0cqiJP%'=LQ?d?XI'Y&
%YAm+FI\8M6cQdCb<Qe4X*sQ8m1(tgM"cX]8-#HLY.s;[SROO_>U-c(,cOUIR"'7D*dBIegbg5u]m6iCtD7M2rU.!G9@j?OFb&kV"
%2[[2KRKCI9;;>fDg\5Xj1lQ7%3^2q/pXRQ+%)q%Y(,7OKP`rbio]!k7U_<QNE!I<#bICe,[dHI"Slj(N+Aek/&FYN__nZU91"!ra
%55QtL0%]XTabL^='STgL?\R:g[Yc/$0oAjmki=r#H]7$*3jp?]a:9L'WcT[<Ki*L]"Q9KA#`pWA]>f\?Zlf]I*O0gN:g.?s*Jb:V
%^dC3%%<T;!P+/IbSjP[[a.\`Y2H:nghHPepHhmh*Qm)O^M1c`j"26Ft=F4*8:a-K>Z._Er_qt_s<?$Q$[HLEmZr2SCp+;+*1cf-d
%("0>h(oD+RD0WM:3[&+D7Fm7[(9T<r0gJ,%UlS7P%0hD-[E[<DI0&$(g`8j7*`ZoW1ttVq`?H=YU]mNAd!UI?LK?$@76%UsZN7$U
%+8S"k79i[YP[G'J\@E3W$74W!,PYVLD#qff`J.-mC?`8;`Pj3c[]*almbm@2K-4]%6OH1t8*hd>`E?XP.]ZSo3;&>R-3<dM$+^tU
%`&,l:b$kp_PbEsr<a$]bYcpG%Y9ocBZgj!CDk%VsIqugt-cdmqah<*iVqR;&Dg=1eO!-k+-hAIGa7pW=i`X6VrZ+1Vkb7I(Cq4?2
%;J5XKHhra,EJ5^!7)PIdY6IW("umoHVa/H-4h5:M9brf;=bsC1Z*8UY;]lT>EE"QVd2$<FO5p@H_EU"$gTlGGW]AFaGG.WTBj4>+
%8,0<55:-Vmm)R47\1`"tHe:i:Z'qj((lbP)ol_BLWa$O.`Fa('r/j(fXN22?J1InCEhNIF&^(`mB*9"r9h7r;R94u$PZ^lAfjK3N
%Yo4od'HP!_6;CT?;*#jLf&ND'\T^5ki^l^rEcs"=-esA+LhBV5j/T1nMe?U@*plX2[0j_1>$r]'?7=AQL/>+E!.&?Il`7Vi&.sh;
%#t2KN&jZLF$ur%<Cm;p_Wg4LOW+HV8>'N=Oo5.iE#fpj$M+0>?<G.ska1ALN-$5[b1:cESa\Zj^JQPYf6G:1nZj>(L!c<Po+t_?\
%KL)rMUt)e4"d3=uJ17)[aG8Q2bG7$nV&kJ6-2P-gA#CFk=2\%kp;LdD=^2ZpG0[1UTOO?[6;sE7?:;?KQ:Ytg8ja6QH:0QKS.n@]
%R8O@s/&sYhZadd]SX`h96,b[AKUSE@nE-d3QH5XaV32P8</D2/D)#R_/\8!^F,UC,38ch&aM[g`?E]#Uc4uf-*+qOuDHAE:$C+4]
%-rVE%&OGc]T\'uF%S&[%e:ncpo27liFfqAOk7UL/*f-@".@ls,;NaGY.Kc1_%o\QN[;;RZ8=120MXAR!?4!GfQY;9JR'sW(<,R4Y
%70;OrN5^65'Cm_.m8X3MZP;NF_EpAEBi[i&1!Lf6-J+rn%gQgZ;lEZW6CAa3P19k:#jpM+eW&%n^@XXi1gGYe/6jAGgCd2"mGY@)
%Ro4D:PmUD;dj!XC+M=D&I'GoW<&Yl*_eUTEEL<?;2V5Ei;N+8US4:mRUd.$`8qTem-3N>h3BB'C.nC0,@Z]2`8L0s%du^NYN%I#A
%8aqrGAWW/_XWs9&2$T</OJ,;"X>n`U\lsrd391OK;/Hn+GVVQ&@OVt#bU>P0TYt4IPRO#rVQ?CiC+#pd3.JU4,Ui,1M:a7RW[I&Z
%RN9rI%4(HS"tCUL;&X^!?7>rp1jb(SdNEUQ>3ZeOeWY5R`f0Jn#*_)W!u5.3'rQF@X&hV:`qduS;)Ypt_+dbj7h&RZ+#U,SLlHlg
%.L&LGS/P.F[1Z($bm.a<ZJh<FDPB`l.RmhDW(=dUP)t<i.Q1_SW<e7//"m[?493ft'FUUV.V=8^AQ*"TbF2E"AjAqPB:pFg1l;r4
%,Ho[]a,Nb&Fi^OZ(::@UcpUk<W$5ZiO,B85a<,SX8H`oF-fT6C?@n&K*d*jR;4T)1ZgDe18XPmi[E(G&+9;RYE&tsu,*+>bMW5QJ
%o[(M`::,iT*`$(!2$7*>Q8:$DC.$j&+ORKG@YX'GD<sh#UJY(/M7VXOGP9$c3>m%eiiI(A5d<\2@M^"OER#6d6G]W?f8<NPiO1Vt
%H#M/.Wh?(ofo!c8Ts(p*qe1&:nMoXU]F"fj:9ZR/.A"^-,nYa/bIE:=<7&&-1h2HEJY"k$cI#1S;T.&NXuKQ;kEk[SK02f%+N]pF
%o6J>DPUEBXg#JZZ$TBfDKL(b?.WG_GRj]npq07ud<t^>>3R3V;YXHLA6qMZ-7.iN<KW8QbA&XRV'T.+^l\e@!5dJfn:crG+dp@':
%J<%;:L!E&rGV7Yc)lb3;]cVTr0>\#aLsmF)+E^SPL/bk]/44E8!m[%oic'(t_e.9g.L;Zs$mpX$3*"b<]N*h=T[i6]$?8g>:>pK.
%NE#>?GAp3[MhaVfZb\""=&:nU&gF1md'c!],m^2aUEDCNUKa8*=P$^r`JW&C1Ae/'B9'QS3?$<D#O!Mq;G^gqY&XdT,$V?e.S,2'
%!K'%DltK]A[2l"P%M:M&^_BsIUU4-5<at*0M89TD73S5aRnu,!XTaqbF#D$"L@eIcWC>KiBO4B'B2-lkTL*aj;\Krh,mqL@KsA4_
%+Ao=\Z.f["rVDhIP2hV`'#2"h8lig&K_]&`S485!7O:Ag"uhBj%F,Uj)^<GF\KYQ16Q.J8e>#nqn*Emk8Hjn/W4#0$>%`cS'G`R@
%#uU(YnZ5&od$nKNUJ;l6a^K>M1+dB%@E^-uBX"G^Z9Uc=%TAGcNjpQ4eY*SsM_%\uP4*E0Pl`:TBJg4_X#O"8j\,#D>f(&(.uXRR
%p$(UNTirJDp,i3[]1#^(<I?4!`&7V%Pn_BjN+[(u#!WcAER2>O9"6P!OuFsH'Fu0O7PfaCPhJ_?9E^bE:oN&@r,J]L?&=:]2eG-#
%cHBp$MPr$s'JZDgi^c63U[9<s3D9d-5<\3Tl?RD6P,;U/&p6<Z%A"M/7P@$9(slu/N#j3`2hr`u)]@1cG?!R;8a&6`ka1g['Nj2t
%e;k=_40m5oEOmbZ"aMR/d:aq0I=48V(lI@r>SmcIKq6U3>F\M?/Lc_G;:fTVK#("57``Q)e<+.V%1]eicY#*tZ&,Ro6NkGfD1+&e
%`X8#m>MLfh"`XSG[ij.C-b9j(&$cfaaUq>(dXW\FC%:)j4=`^C4KV6nNUd]W6o8C8%`L#cj+JIZ],TZmQ=]#mE!uEqfO7%S]Z,'J
%X6o^`/8fFG*T1goNJMd!30q3'bE=5t'NjLj6W9DE&0cCK1s-0@#V;:N]WoVPaLjn'UDU*;c!o3LEML<k<='&Cmg[TJS!#5-Cs))&
%h/lLtLlj)9_2sZ,a+RsP>\%/],02/d?!G/Mm48hU2%rBOVKbol(p0DCA2MG$0Z7Jo0gQX66]I7/!@'n:[TBP;>'MWkl_4Cb+gjA&
%i/Kl),PTOm0Fp]lQH#sA6ei0+?'d/p(05=2V;`6&clmAHAhjSei]%ThE5Ps+#iQPK4S""-gcS3L'iYop#&4)O-cGu1'\Va11aK)d
%>6YgUMk)$(1sARnd&9u3oW71N&Mbe7EC8037*WR&;*9^k[2(_Mflll+VX&5a*B`g04.`DT\qSe39kTpA_.-Q,;4N@RFuUo'k+tZ.
%GdU]_SA0_R99BpTQ<*E79=3a=DI$V\4GLFV-!i)@EZ^,*E>Mm..LBW&"!^d)b_jl2XOjZ\]Wm"4'XQe8kT+n3RanG]_\t?T'13Kn
%/8s5^\0<m^3S4+&jO4RU'qnin&ZU"d`G%k!`)4W:.o+4,l=Gi\$u/*\7T/$']L*In7:N$aBb<=c(E;cCP:jFnLp`1n9T.8N8OMh'
%&kLPg>(e8I$F8YR5O[TB3ic=JVF;b`9K6&-Ye3==_%a^^`Apl,P)m!Z;Zpl&9pdcE/hV\l6QDA]Zf73sXBqb0`h4[._Bm/1ad[-/
%@Oc!fbL%Njj5\N!s2YdrB7mp<D*qP3TYN;fn[?Y<gdfS[+-!Q-:B&hf)XssY*J.V6P8fW7jq?l;T=DRAJn5EQGkb+Z^p<,nUT=I^
%Ok:Y>Dk#;)*F*$C,%miOFAfthe?&/3N]6HJ"?HZNqgLme)p6Q1mP20>L+GB[JlsUq3l.j4Ct^-f&a\+o,6OKf;d^T';mNt_L<(k'
%5mDXE'.YR?kP?CGW)>o\B>U)ae,go7%8!RiWZt7[RjqgE;?7g=$LeI%U&mGh5e"7C'h!-oNQ901PnJ0U2(=GLRN%8:[WQ;@E4T)Q
%"jL=>aCJ,d%1E%tFX3Q\Y$Bn!Vi005dn+oHG0U6P$)T=`2#7`\SN)lF$8p:-N"C@t>gH;.%J$;j5<g&DF$X?.Y,L<e!?d^=)6jC*
%Eg,ZVUT)s((G$51_QcdpMl`++0#pN4bQSk/X?n6U,Nht2U7!DSd8Ygg':'%^=]dH":mUj\&k8X.3lj9h'f&o/3CA)>\qJJp0?l`G
%$pa$%7cqZUR4@0iQQ$e;Vb;ehN#YL9PgL3jRa)GoQF!AD"sk,u#A'dN$Bs]gY>j[jS@aGNbFhHHP#]"Y2mQ:>Ni<*b.^&<$#;enc
%ftoG8cG8s5h,%BfON@n1H!qW>.U\oYR['a<9.FKk@([pD-@mX_85cF<6o-saii((_[%`aH9",(%\<<0,F@l)hdMSeO*feAG8XH<[
%-rqik[hsI\:^`sh)jWC!#_j67WYeO=Xi6K`@ONC64%?)NQkcJAV?M](^3+FPFK/BE"O11<`^EXW%EgeC$S9h;W61*eZ;h+J>(reV
%](H[sh8Dm!)IaQp7qHG292kX"X-Fu7N'0n678p#l906Yl>R_TG(t\%J`)EeTQ(T'lP9ir)$VMVF"bnM@F`E7[W`H8*c!3TT"B1!`
%bPIQW`'Mt\D4'1[rC;t5i]UBq"/Qb:L+lhlj?@cmLrS2C0`&7`L<,>/N<>@SpGht<@1#ksdZXun(\([(Ng8^QiaNp6Va=o@06u#g
%>-=[.+]8'tPg"J<kdhL1D*u=LS<S6OlARppbJ@tU&.3h]Y-C%7p]b9Vp?AT%<._W8!]T=&2XX?1jC)*#m=>Qr&^!4`#V,1sTp2s@
%(F6!.(o1s/T]?TVd'H%c"!1+5n$K=<;&U8d&S3^^`tR&T:f.qY[3Y%IOqC;=n-4`j([oLe`@VK(\UGZ$:8_5dRqQs0C.c(3L>E;J
%M>cje_\$jJBBSAN0)VPL0OW@p3>sKm)Zf#^9DLPB[Y``LP=d6SoO?S9##RCsXOtP'4)o=:+rin_a-7_0puLc<_MIWR6q65\BpF0f
%NqG"e/fe.<`-:02>t^FMq67iuU5ffp;S@/_+g0,/Tm4&9,BhGA9[jg3`=S2N_8>Te\AF0-)3fLuLl<66XR@*]^1qCgS;(RfZ9p%i
%(,s2'i[jmt1KL]4We+m&?p^g28;\@L[lS't5NAl"pVC>#<RGKqO]m4^W4[SpVHXjHH&jr@;+UG)fsH615ufY!,-k0BLRjV)!L2`n
%qrS_@X0%8.+AmM"-5K<WF1@G7f\gK5dK-uabb@WM:Q?Z!P`n$c5I#fYQ?4-Cgcr^'87$r\]B[7&]RWirZ]ZPaWa`@jp1RW.'Dg]l
%I9rFuAA(G-X@q-GGUs4)$cUl_&m5i1COq6Z7!8]\Bi@QJO,$Is*/:=p"_(Z,;lI2f,.T030AbWKoE$Ea6ZL_dm>K^-@W=gL]pg^O
%X26tlh5(gBb:DgL!c`QMN1T;<8fC-0GbH_W*Y\!Sd993H1";1Q:$@R>N)4BYA&Tb+rD^I!q5dAD8/@=*4E2T8/hIFe+!b0HTEJj<
%dgSTR*0u#Q3=nPaU?LPOO\LOReVHXZ%o62Y@XT?%X&0,k#o'l!:qhj3YN)$o';AFt7<+lY6sY)I86MU',VJI&M5h2Cd%i-q]Wap_
%"H!oFN[T]Q"M@7[#uZF_A/h@"7.[NGK0`/De9!N^Yg$$JOd3R>2W;YR>8.OTXWdN0eg:-0#$%/o-&cW(o17nCR-%YKS9"d,WfjQI
%eI4mhcoC3u2-in.E^DGO"/@gcC!ICA[D^f>b<m]'Nm_-B`Cdcn=!7jDl]2<L`J#@M*l[G!SN)k#760qa69;AAWYQsa'N>bU+E#Fr
%:oP;B!uS42`d;V4'`334`t,+K4l:3!R&5\ORCVWKX/1$^1-udaTFi*].4D/s>%eo',rhF8#b*blLXA'kD*r8DbdfM%i3cIk\:@F*
%O`$WY\YeV;@Gg26@7%5H=0"fMDS]3'/T=q.D]@MAa:0Tu'T:R8d`"r1F'8e5l-j2`("Ym2]0SQ!r@,_R@Gkjq.$g5&EK(FhS<OEV
%l@gIS,Hb%@(fe4ZfgU8^,8IbHqcH"$b<>sdh([d-@kTY^4@]t;acceF=V&.GLDHcig1Y0[<^(o-EeGkpD+V0a0dg"db:rK>0YAtc
%P\SbtoM`?1.`@gn@`-^bg)mn3`ir#Ch?,"H^]j4h?8J1;V@csH;*5cnPl'AH$0BNkpN3s[A6ZLPDFM4n`t*28)RcTJXJ5ZTa:<?+
%$6G_ub#F5O'Q8`3+-O+]&9]%9;'c;bOm\JD']2--b*=KHFFWa-<.]AV+X&',F=eEN;i",<3U2NdUNg@2H4NV!0)i\VF$4NDQ@eU/
%4@LH#W1+?m(8t:^V.kV5C4I!2,8,[XWCD,BYCJ_AKmk:cS4uffZc#,C@@O#'m=f9(&pJ]Me[1Y3Dm>+qW'0BNi<^b33o>-$K+PqD
%R\I$*+WqOZ5fn4_j)t%:]s3-58I(q$?:8YZAlVDm\VI[DMM>Vo<#CHFbjZ>f)EgF8o3`;X=YW5%U,gC4G>H@o]c`Uhh#L.\c#u`q
%HRHr!/I0uXnV'W=@C\`Pr`?#%e37*dIRHi"&Cj600a%)1O\6>pTitD%eQQEQCPfEq6L1!Q1S_k'^#goS;3l+,<+srMl,HqI3?]n]
%1s/EMq.J90P-XmEXldoV@;^\V@6s^,(KSCdFD.3\r1]8M?s01!+2m.o:=d@nf7U7Za1/)7VjYLL`cb8f:/Fm*3,H0'S6"`"Pa?>5
%-T;!Z4[='b4Fo#1JKnLZ`DGG)04]&S][)XFfn3B(iRoK&[iQQN8t_o'OdS1\QCqgZp,]c.RlsM:GQW_$_B?fl;7muMU,])4nn!Oo
%`HQdh-WUQ!Cgp/X\5?("^(jI`Y#&*&(/^c!&ZQHJ.;k"foiOuG.;"R-.5DVTG[dO@ZKs>G.PRM(2F6S%[H+hoJMH#^`ZRX"$#1kB
%60Z@;[SWWu">jNFb:5A*&fFT>-/OmIdW@#FBn;n:,UX<\aA?2p1?C5iM9"mPPVB1+)-Gf[D4H%<q"RmAjMcZc7r_:oD?Qejp0;tm
%KSC>I$t[(,'G"?(QiG/Wn-fR4._K%5AEm'dUeFkFkFkb[0T4d_.]ZqWCMS[1[UuHNO&_;jJ[MP3MBd7G:+iAi2<%M"2)2-"'`82j
%!)K0n_A<MV"Pkh18:^3SVY'jhH3F\i8eSHCZm.V_X<H7E`)V<o9'qEj+\ogL]OQoggXVR.89.WC0/lY"AJ<&[L<8"G-2?J!&)WPO
%\Odps0*LGE8o:Oq9Mhkt=igr/'h@Od%XGt;$*Pn&l0')C!o]$g;/m;0%Ts>(:&=Wk7CoUUmV<@aq%BY6eP[[8l'-(-@2b8n<k/^2
%-kc9)ZdMgcTkdX64dp>fkn4SMBg]1,PBV/l8RAP&L.]2MXLq'>HQjHdR1^Ea6%0pl'JC!IFD+YghBmqjKIK3^$/8$[M/9b$Xp!!T
%6E!=D8fO)(R_0\$'Y!!V-#ciQNW$blA4jsuenFq;$,Lb7b6h+^$.8@cgC'5Y(rDN1d=c@BRM(W\bI!qqdr^EPWjEAD8gWC207(C*
%T`g*B-.n73&t!>509Z$Whp_^fP&f)GWs`j^VHM#/V&IbJ0N@Y7Pa4k<X6!O3r+X#9LnqOhBk<(8$'`M*G6irGk/5eK8&@is2TBG`
%\NPff"&>A3VD3`Y,`=SL&I`*fT[C[pFD6T.lY:^3d/7Up6jR)ROL2nu>ACG@mgjI6?8V1Y>$OaWjh3/Q[Ie62_3i2Nd5Y*k:_p7t
%p1++8<0ojgg_SAm@o-K`9D:i5"8VPuq:N!nUT=HCR>!lD/ONYIGW8m>6?ip]9#/'O4Pq*=Z4cYY"4p:@_,+HiX'YQa#3@.5E_l?f
%Pa+MU@@/[6U$Oh.Oh6f;W_41;A]&j0N-h6S?i>O/C%UY\1O*8Z0/pDh2>YF!\p_-*<MTE!&W/fl]0@-g(Bo\sA5&)fR3)O:R]*-B
%HVFn_:Qia^6QM\#%kN"B;]*%lK\%`2RtFG"?Goi%d87JgS6(=6WODGWOrF]B:!P&"b/:>MlQaqIV<YQTcrqKMZJ'QhEE$<-,Z,O#
%`2b-s5rg2J,(iULP4m$F.b2`nOc;*4QAYP8D6C&jO7*itM2%nNh@bpWKc)+0j\*sW>W"Htn'gqM!s.i/<GX!!afWl/ou,&'Gn&Du
%E2s`66pdkBQ=tQ..!"o;7eqVH_$l`HR@rIYLNAoW9ccgLdCO:K'[7t#C>kgtLd03_?&qB61K##9e"jA1-rG*c38t8t$U&,N(OPA[
%3dRWMW/gi:3GI:?K8p?kSgM[$dt33*Qk2#AEg[,P-_E^Mq8Nc1+,>C*LL;S=@S',6[ZoWpTmX0Z"T[FKYU)dQHoha;8;WueDY;#;
%X&+J4.B]^d/eQ^UA!.@OYle6g_aT72q>[h899SBtOt=+phEu0'Y)rDi_"^["V8kaml&084]\PMHc.$,\mZfH+Z?d:[c9pS%ql8J6
%(@LJm"jS7tOM%b3B;B0(&WMU378h5ckiifR=]Jt=^K`j;TT1[_p]9P;+;#/#QM>t9oR\W8bn))AP?'U<o'b#"JId\_XuKVYAPk3q
%"h;I_,bU\5rUX\@E2S*?Yc&r1F;3TLh`pi35?1LO.&;RU^^0tF(GsU.aa[Ed9oW8'eOm=KLWKgG;([%lSFiH&r9Y"FbPuLE4%`Kn
%pq!V`H;Z\tREt(]9THWar!(pps"JW>gB"05rQo"&R5]lQ"1RKFr+"007m%ph$G!8I6G/7H&,[d>b!9gV@LZd4Gh0(,E<L>b[j>CU
%Z4e9ih.>$e:93"Vle1%is0,6S0@E<%]^R2:\O;?Vi)flNg"r>)CS/WQM"?/5J@G!AJ_W16DAM_KM\RK4%hh`RouJ_&>?E@;ck5Bn
%0AF2hHu't##j*>Ij2DY>[\5e6(1.;TKs%-W'"\2qQWnXGGgl`cdGfX3JF27G"l?TH4W,fidHeLE3DkH;U"hGUK6W1sT]q3:nh(-]
%;?H\6"\qm9WFcii5Gb<G\Bpe\(*CY[\*!-(qi1SH.flm/pbNh,ps4,,HLsL/o!prq%`]_`J5Xu2.?CdrWU#/]Xp[D)/i<6"+3BVR
%k3P-d5IZ]6s+&(lXkQ(!h4Gp5&;D1N.*Lh[?+AW1Y,gC#JGr"?1a(Jl[7;jrh9u'hL:fBns(Cs#o3+]WJcGG(BWn)t`m=pu'f,l'
%Zs*r.CQ&s<E60UUJbH0r;:4Tm"CVr/D/<)hjg',,aa)u\)rj@kb9'<;\)qTZ,4pHc5#H!j'D&[tnhpP^G&E:,G[kL!UNg;6U4/[<
%66H"e@XnD;NkQe5+-;;bme/BNLrr4AI/8.Tg_&,tDPj(JJ;'Qs*'`=*'H]o.\)nZ<U#uD#^'=7/dROkrqXu$BYb6&fKq8Ad5MlPT
%+8J*0J,_Kg^]0ekrdVs#r<%H`NmZsrVN9b&@(%-S9XOIK.G'XDp^R&ia>4"q_7ScqG`Yio"$@F#o^a0@s.>^?+=f:lg"aeA#o$B:
%75X\.dnJZn6@DH3Jk>5ZZ#i28CHL((rO*/PihHX6W@5GSHq+"6M>&F+/tUgGLpqg+ofk6PhIWY4-,dea\>#9Z4)aUI6*!3g+?6s%
%fra*U'^7"N6=KS+r_VN'U,G)rhs89SC,=HBZ"*P,5js"mQA1u_=I]N.3o]]Q=QUc(_>Z]dV6Ib<J\pHC]W`5On:mTVisc*s(t%7&
%@8TJ_Tfk#]\*L^rO^^&&;u3c[?L#OAgk82T=E`'VbG.[?Xe%;fg<AJM0XEpTnbj,0JT\Vb)djp&Dc9Lr@4rbGr6#ET*XFb/s5rdg
%o=cd>oCiJliEV2jpLP>3]+IB2T<4*A_"VE([2%IH6"9rT&>(@W">e^NMU`I4%ejcPo]*2ceG.n'pQXNjqMcS/OQ2-8WhYS2eqc]\
%/'Z/ir4oZjJ"IPo0C1rLc+gBnH`[U"hh5*[X6,_V#&9"=V^7FYPonma*SIS#ZDnKn-P/SCC\ZWe/gK4Kn+U<R2.L8ejis<UpD5-^
%Db?rX;l-qqM%"Z.pr8;>X+,Vnls9UH&&AcHbMW=o.ZjWPgkXMAljsLV2n`>/'=.!pY)-7"$A>]Ilc$FQ`WC1o%9a%)#kYU&#i6()
%-;dk,m_sh_(df)7&/+iWHiGrXJ5&NAb<Mu[W#1Hmk?mIp5KYjt=/4p\hA3P9RH,<h/?SImhM<JuZ$X50rHfTh(P-q8o`VfuOm?dI
%#LaYQa7mb8Up#68[P,!k2>I-YJt+XH_qAB3KV(a"ijmPn^$L)Q^N,&ZLmq4QESC2\KIYWfE=n:T-&9X675'c\s'A363u:V=(,m$P
%66gEZ3o9+VFRp0C+9/bqG;WXblSd]8VWIQ$H2$luQ7i^qK*CXM?ST26#1dfflP5<OiUg]ce;:p"^a)OcZU.@D"f^s>n(W>31]DT5
%@f.auYmk.+Q-))!!\Vq[L8?skbI_I-lT*X>'re3k&;r,Xk\p@_#Q!3%$^,Z3q(N=Kr^_c]=1Apd)WheeQ-j#o4juo_"bnkWe/CVc
%)hiSW]o2^L2@fU'0j\V=h`m.\n$FP=B!+K,qem-B%tkX']T2EKGWF2$Bn(mD8c#1]Gb825AaAYV]5L&S.CnSsi'qPl1oosU._/c4
%Ar$,lO>R@L6"Ip@=0rk^H-n*O*pahZ+U_I@+';'/"E[Elp?&/g5P4"%T5e*86DWshNW-,E>B@H>Wcns&\l)70)_!$bP:>K.WV>g3
%Kuol(.3pFk.(r.9Kre7"*iXn$lXdu.O[:PQD1d%me7afQh]i<YYOsnR+!(0L*iYj_<j:jqj49BnQGeC/'-0QDKcD%D8(EHPrJFqR
%X.eG]`s)IOG8YUXYAmZNUd>sa(Wj"2RGG24[\fp%^#IBp1oc*iQN86H'@t+lOa<CYG9^DW.^s86]>5G,Ambc:hN@ie80MlFNIQAP
%Q92.-O[=nL"ubq4H>eCn(5b4PNL]R@*j(Q>n-*o;8MsHVoj!IR0+CoK_CkFAp.upQm]-!l6e-"V`DAjWiYB.^l<@'`B8>d0+D-#o
%%pbQ@%qtfnD</:P*k'JrAS?^[S&BI$j?CPen.pc?pbK#Z7WgF9j]:K(+27?]:[WaWGBOtA(JT)B"&a#P>@%K,"c+Q"3WJ81Qf[u%
%3%fYZ6Do5/)FRj/L+pr[=b_0M&5jEf*92/Jo'c.Y)f8X%35)IoMo89G'nkK4#0):p)g^?7re;Zj?'E_h?OtqN2HC4ZRj?pqgUN1:
%Jc]Z]c\YDtr..T(dp8&l=U,o&^dGW*00?)q\',A+=<1Fk?%W!dr9ZtcRq:(7i'?Z'nQgpaCtG_=H8'J/YP[26s'g0!J!usJ0:_W-
%ATD]<4F-Zh3`J[!;YjKgj;0ca0'%9Y\soOI+gfpM#BWVIKL(6=-[r.gIL@fAR4WhpTR+`&%=,RAY]Sp''_oI/@#=a<Y:<=;i6j1s
%f*"DgHI)M6'f4T0\J/BZjS^58m?MR&O#?Ya19D#b9qJdc%;&?fguTB4Z;s;A)`m,-d]Y[@NP8/9@a@AY$LHj>Bt;@TNXhNpmoDbu
%mh=o;[,7-\o\7mqZbtO!PinuRm&',=6*cOgjRThT]0l(Aa)Ni+%V6P_V8RsmYA.kth9&^une=^kTtic]JqGQ\E*23jGS[o\F(B#N
%>AcCh]Ea.?!ggaj7;sk5/E)"uRcTM%f(tFL](&Sb08OLghXb*f^?c3:=c2P=Lkg3:c.!/D>ttL.:r<`=CM*&$G-TJlfU<<cM2o>e
%TM&Si+>dWi.$!V6UbG:Nc@3HVJ1eW9*rB%`T/"n+<+BprRYg6B+C5&Kg(O4ep6KIP+R`8npW`D8;C[QMY/cWbY5Z`W.&NUsbD`Vi
%qUQ`UTDH&lo^+*K"M2`d4AM1O8e+<5Qtc'(bk=4CC^i&)7.gUl)jY)rqFQK;^.E4l4>)Eb`r'P1jUMS<4?4NCl5!XrhXH^k*DK\Y
%JF9CJlk*[)`WUjP>q82Xp2C7alg=`9B`;5=-V-S1A/jSObN#^*Te]gl'Del>jn\<.%6pWb%3N<AST#CmX8cK%DAXpoNV\6RaA^RF
%>IGAKP,#c$]fUWtg^E%M6K""%&6U^>1Pd]BIDg;PO#h?K>BSF2eId?0?LnnsN.=+<&5(e2S;9gX`XVHF*78fQ"FXDW[Ofqu+C`!N
%*XuI_A`EK>5Y@a;]hsiUbHF9,?bMNh3qR!#*nNNGMa83$f]b:nVN@1mh(2;`I$Xa)Z03>P1g\gL1.KG^DQ@&WaPY"ji>"%Q$2f@_
%Mog@t1Xj_N^Ga&s[V9g$^%O^hl'f`;W-CKA64-3$:cu/91hM54'JosA-K]WUTK#:1VTlH.%T:X9d!ALtn++VTO%lsQ:H1d^)03]U
%gW/YMb.7Q'R)Ld[N9/57C#%8=pn>f:3Ml2ZCqTZ>UH8f,&)Dt&NV6jl%FmjRmBYQW0f.Sq;Opr(qRtWK,.A`JL1,%p$Yhms!^E^$
%H<Z"!U\O'X_/dKpdf$WKqn40HFFR=&"SQN#^tf1-lrutEm*Qn1Ge7`.YfjXj/rP%deiV=LS_a%Ipr%>5$hSch\0J3?BV\!8)oV</
%[ltiQLuG-X?!sGq,==.fiU5[_":ElqCTUJZ"Oca?[Qm^23LsdEm`gWMiMS@^hpcs5I;#S#gglo=n+%Oo0s6,BXLko\!c@;u79t<Y
%ECGIWP;E',pDk#'0Tb'jqZ',e6%I_!@K&=)Qhkc/,]8+."d&;JQK:A20LC*CNaOl^)Vcj0iA-N3i>q(DEpe*=3t>I%e`>UPT.$*m
%.lE"F/s1]OdqMba_<V%@rGAJ:+s0%QrH^XkZ6?Zrhrs8eO9SeY`f2b'4alCG`uF*UBsB[?[Sa!<dCZo<*WrZ3Os.9rmiTTt"6T>"
%&=7`JFM`m[lJ'1j%`]TG=Rrb=k\RoYF+El.I>%/]2T41:"5L\\;t#bJ7d/3Y8r!3f@(h9hQ!,ErCno?uJG7B"+SJ;\`7Fkbj#AN!
%nOfZX?6=Y*D%p:X"[kCY1F,;$3MCI4qofT7mh:+FME1'`qFHBga<7n1+heQ?+3.+>DaWhokKi%O9fY02,9+dBr.b4M7(nNU,;BbA
%2%KT`j#I&;VhWV!Em[Td"Kr(6q=\*P@)p)<FnNp5%i-o1N%8H/B"hZ+oM`oo&K[Xln3^q-*t_cd1su604-fmn^JL#(<R3Z-fb^J4
%>,n&.4e9j`@,A#QOnABD+8_trn>^5ufCCRV*W@DrD5\>lo9bh+:a74m'[U,h=q1e3`Uk2KI=T$Eo*9ZVk*GAq?=@,M2IKkZ5[Qg&
%je%0Vm#d@c5*DSg_XH^W:Xo6-5,(>6XkCnrLGA_!?1&-uR'4`gT\PO9c-02SUJUr;f'$B5=5boir(0WU67<'q6X0>clAGZeLR6m>
%1dPucK'2Cgk?`S2Ad""9EcEHl*2f-/B6kB4R;,7'53gL]D$t*kq*A+6..?QTD('mWUX?aQ]'.&@cMgbs_10!Vo<N`p^:mArp\Ql9
%+mkfRb9PpP&c<@c+,^\*.%Hmb'3>uBO::l/N+nmVn)*u>Ws]<r4dO:+hN`;tbOAqhIsC9Ig]L*j]O+o>-O8]_=,s2)AJJe%&QQdi
%&%/)1J;I=AJ,It!iC&&nnFqqBC1mNMq(2Qb#ctsg"Kk!2^[KR1Q&'opKf@;("ek:F7FNq?li6t!\gt5(l@S>B;:>P!$;8Ve2AKAO
%&?l@[&qJL+OF5T8b!OBA][-f0&"?lpRQ$OAApORkKWu[TX6WbRnAA[WDUN##h)Jaf$M`Y>e)M-d_\Nk">Aj@Z@4f(c`TV(>)[LfK
%R';Zgq^k+P;oJQaYY7MCK?,b<DmZr-=m@%-:7\LJJfn*9r77n_er'!KjI..=)"(I>W/iTH7Wu[sdWXA&[F%G@mb<-D@OK\cC_Q83
%rKheAiB(/C'S5&AgOop$@Mi4ghkPHji-Y%K(gotIf/Zb3i<s.m#p$MJGY^@/@VqW.""Ak(?5WiZDi^JV'\Ncg+FL@e\W$eEO1V(f
%im=O!UY7XH8I4b:4bTTq@A5nS@[O7igO3af_d1JD@,QCF9cmaGPLHg"2$rlgd5J%Raa%nZ$Zb_i9cf>%[o9'Z4fnfc6U7s8Z!<$Q
%^XH]%,tdOcK%^Q*grmlp!RWbX(O-9((EH5he6]R!]oQOXf>UK/`gJWuIraWOI+QUnHH\?30H2-ONjF=Y3,^3]pGp\.*PO?pp/n`V
%,O&3!Tt9DI@fb`6M;Q=gj8F0p@u"(n\46$#UTpR81ZA:h(IbP!5^a`3F/VA(:QGeLRu-(qGGr=:H8-X<i,=4N]^/F#i"JNB#H<T+
%"_((;ijkjlr1UoD[^5V+AeF1iMgGG2g#Xm`LiV5N[S]Nj0qch!KD7cfG"XUU/^CQkDPb[*n+fn\*%^9:`akiiNc2.Y0'ro35X8A"
%QI,+VP&.kWi9^ZFj?J&LYHZ#!7*FbWI4a0]O.EX3V!E9jh&'G<!9FHQ#FN5q2a-fDGhMcX^]gcBe+!I-Puo8V@=;KBkJC]X)TTGF
%i)DT)An7sH.KW=a:hp%o$UGAT(lcZti;tS:R=o&g9+RcOmXDG:nBo$n>p0AH[e7(^Cd@,O6Y!r_WLOpUh[pm]5*QuuA@)0Tn;T=j
%%Q?dRoVt!:AEd\UCd)V&%>FkAMeUcQn9;ir%ei>WB;XA8#&<8/J(JQ+/gcb>QT'Ni9FA:(K8+YpetLC<9mnt%Mf,:hOM8Wi<lD$8
%YgXJ1ho1bbIaJ@Ndi6YfpmGKfp"-cViP'6:T)NL&$0pX-bYI>#>S^8*+HS&E)S[#EO79EoMZQS@E9ctg@)7;c@M]Z,pjS+^$/4M=
%$0X_uc1g9#+oG'_aDot[ICpg3#c2IO9HPq9K+,H-RN2QcF^ZuD_[c1UbRI=mAQm!cLH/^1=*$f00*@@)lU_Y;qfqI*H>n*X-9thp
%%'lGM4>.AL3f@&#GK[U.Dc/:DK?\HeOJkfMBUZn[$i2&rY7<eZaNY!(??Re]->`bJFZQo+h>kNt/=95<)IWXg`A]JUd6O;3ps:d#
%Q+)!Cf!U@G>rSefl[6(f.ELftOW[u<lsR(T%R2Z3AAH!oa00uU0u)@#]oP6@^3/#:cNc,RUdX8,01/4[i_b!3>FgZR3n3N)ar&lI
%L1LM`1mGSk+=/;:iBT]u$3po%qsODkVc.HURV_n'!VrIolZbXLLf$7Q>hd:YokX?m7rC((iUZK2\.O^"#,gHDN0ip@1)bO):VT*=
%>Bkut5D:0BNpdjIKhtk\N(I%8ng4`3.3D3j?/GSZ+P9),bNu\U--5qm\HBg,QY,+Q?JaZ&+o)dr>k/otr&+)$^ala+DBudAXls)/
%2_sp'jDKGYDP:'jf1dpfFgO6Wj$&Nra2Q/]Yj>+i'ke%^&EiE][hn@3U^,G\oXYm.FN#SkAoOfYS]:A91q,RoCjuf@)ChUA#[B:W
%I%;k03[oIs%r*uhf>Y$W>5iq)IRj]>6Y+I>=KV189?=@Tk%2r`8`H47hNK5!"=8mXTp#3!lQl"smj=/-*16L!+l[=&LPa0PbeH\"
%qLMdG%W4ZIm]p:/NC&/?Lh:=&d.s%,<i@AujOYu)0'odU$UGbiWI7+Z<o:giML8rA&YXZJ[oZ;AH,Pk\XCtL:eDPb^Og9V)2?nc#
%AHd>V<?S8c1j/N:]O523"T#l^>U:K8BQan=5*lk%EU.Uj+;o+"j7ISie_B\8H9aE7b5!1JR;n`<88J/`4&?jR=VRCp&iEKDR_+)J
%$I@2lZ!9O4[14tpMAip+gY'FF;B0q'nq.IV[JVp.j%A.`9ba$,$(t@8=YIQL??*NO]oU08<.@(Wd->nYkBIP<TZ0*#a8CVfA'U2=
%%E^VeLub9/IA$BYS#BO)eg?tNP@_Y;k)@EWb&e\8mmNLTgrG%N+mF,Q8k0i80<fL$ZEe%k5-A0,7I0,q5RFAb2Ar3W@(W$,0u'Yu
%2i`"\F^rq]A](:ZO6I,GQsT`;:C"TfcUgK&cMPi'KAVA;NX++@oK!FI*k<?sk%!I%e?2h97]oc&^>5=`-ek_JUOlR%&N&[l_+W=M
%o>+j439b9Bkrro@Y;Cio:#faT#'t)lOG$J*gb/i;esOLE4/DQ>+od21d&<tnK8@FTk4(KoZ'<Q:-I?7K+\dW9C(o$hH"N0@aOTFn
%`]t2%N-XXAH^imfD9[-;O4gX6HReF=K]X%Nd.Og,5^6qAQ^*mVVUWJEO!`FiBoM::/WfT_Xe`:[hq$E"!dqSiS?qJ'(^XBSrqn[]
%8eRf<5SAlf7TpTZ1:/?hN4PsNhWFB&rb@m@)Xm+?]*"JqXla!>C#&:r2Nh7L6+(sP9&3+3glbJg$i'Q8PX(;_7Pt*CA\fs7%Ga3'
%q-uShh(&tC2gupEEa6233XO3-lubJ37O'd-bRAn;Xa)MMq&lK`V7$6*&d/%R/ME\KA(P4)VelP=A75sV*K&s!/@'20k[TSq8,G<r
%UH_5WCdil7M1qYLSJ[eu5R>"t;k'F:[gCUGVUoO*ds':-,"D%s2!&R2ag>HWEAu>Q1B)M+\q!n.D@=#ng4F33?-pj"F$Va52G(KZ
%Kh9_;ka#r1F18i2T[PMe8\0F'"Xujq"Dq:#K.cMf[n54HT?W9@(.B!^Ion2`>!g%=YE>F-&m5mL:'[p4<!=Ik^a0T$,DdLB=R,IL
%Op:R%GS;a2RKGnmAdO^$jYVR?"1Bqf.3$+=beP3er#fkY=U.4`E6D,l`\.72+>hl>q>6,KbaES`H#K@U*[jt07=ROfDcBk>Hhf*L
%@H4BsTCqdkk=^5YP6>RS"lqDr0<:3udWBRU[g:?5?mqJ(*f+#<.Zet6IOc-,/Ac$2C02m.?Cn_0W0fdb_YIai+gbiU8u%Kol[.=d
%Z><\3$g@#/8hj6Yb(od8TkhlH_nI77"!GdKDQHCYn@D8q,#%)L)CR*X!g$qj(t$=FUO]4AOEllg?GJMb,BPG'E)0\>B'k<2q6pr=
%=B%GMC\8lY/@c`K.utf/ECeT4KbOekMRWK7#IUa>B/OH5m'5"/%B.uM:?O`0U##<bOC#lt%<Sc(^/Bm(SCH7<@2phuXs8f9N9\>q
%o@mE*Vn3ab,69J)"85&4/65Q72YL/kr6+l:8O$Zj>2)n&69kG(CEte%[cE6LmgRlFYsu;HR3Z>K`9h=F.tX>nXkUSTAW_C6Z-Fkd
%jL^*7Ol<BG$jLVl:c5f7Ik10"lDsggX.3[D]\7sSA`NR)*[9teJ(r4Sad_=i5#B8Lbo!A$1->ni$-6c>.;Kq7hO`an#]WuuV0+Z)
%51b#9fl)RVaTEs_0t-.o'@'K%6Lk+uG<&nSH*GBA,H[iLrl.%#WuW_])HoCO7A9beO/qmqcD/abE>&=%Y1@L4",HX'0)(:C41]F&
%D9690r:q-(iB$bD0?UU"SbE:]bBJW\5i&@m/[$P&S/!(Nr8Z.1.R`RUbOJt]cW>F`6N=>F]?t-6io`$Ir(*;[2aD/epJe^)RVf^8
%ks9H0^Fi"7(qf<Io.bKo]pcLf]QY2RYW`SCCiR:BhdFHTLXVp)-OBeg/?&=`$Huh;Hh>C(?P*oth'Q+*0E<SHfp)ol6c=DGNhR?1
%*-sU@!8WRHKL67h^GZ3RR^3%(YU(=loefEu*^U%r17J40cq@2UL1HMY^%=(*o[6g)7kZ_q*kgBdnEB8r-BDIA8iZJ:aG!!"%rlXR
%mAUAHhO^l%U;X,SZ4(3s_nb7B5&=/H)][H"am#j6bIk!G>DEV\;Om2>+CVXCH$8k[SiXWA"PL%,*,++uZedpd(MU[/^%4W7"-41>
%2-C5VF1Tbdr;Ep',4X'nPbN$"jIua'@7EbJ'c\I(Q[4VFh@D?Ta2ZLhljX_oV+p`q;nmLt^\#!:[->*#rn'lgdi0^L4rI-'fA@%d
%H\1f"-F?uLB/OhgB*n6$C3L_Ho1Vb16X;s@_*(/sMDY<6pc7$eeM?3dqjj%A*s=71M4D&c`Y4Nh)dr:Gmp_#ClM\2#3h;2QD6/]I
%H9QFR:qp0po%$#:$g6h]$4&EOT!^`rOO6bqgA8j/ffj8l0k@^`>8@\]j1LE8k2hG.;Es;\"IuCd!B&&]U;h;hdS&.T:]gPQm3u`k
%i9B`t9Db*o4aWlOJ=PqsTBZYs@[m0klGnR-IGJ')85N2K&h<PVPYGH(Yc/^@H"S3@l3H=OmU!3qJHiE/_cAue@`6(66iECimAjIi
%R#g>9,kV7l@_0t<5#B,W*`(?NB")gO8c+n;LHi0WVH2Q223IUK>eqbt6.uQ7O@C$Ym/oP?/$)Fk52N!%[laeeI:,_tNc+5o%onF)
%n.)Q2,88+*aL:3V+getbXF3c^kT/@^dNtOThb!\^du+YVl3F8RR.Cpd#AeUZcE)Q/csStO<^>M9;#6l8^tn6%)qR=:D&'ZYrSp>%
%M85g7bi4cP>Q8pkf7T7_JIk;c\>4S(?Bofl>Q%)h;EkdDo`O*=f:dXekEeB_O*S:XGcMq(=^[Fo0sJNk6A51iUb\bOT6)!@qEY22
%8*@&)O$F4Q(('=j<WZ>da<a0T0_GN<*lBW@o`G?;4"QWm#=<OUU&G+nchQ"G6'?8Jo0GnT@9o`/0gPO][3G7(EEi9hdQ\;A)ZdHJ
%5N:H_,j=^+_=*mPr`MFDe23-l:`C1WoZ'd$"p6o*e,aS#'-L*Q!9t(Hc%$kIjFKLr&5O#$Ck1[@'LCh&<h>lFRj7@$ICjYbG'c[F
%oIbAYG^:>O]ceBgUNO$dc++@of3F0Xb!Ttn9"#l0n$i+646_I5TscVcdh34t#_:3b'(aSdVg(.6Nc5P6>tfdUWXtn:h,&)1IlnnF
%RHV,216BaE9;`9B_I+2B-4dF]I2t*poRHg!miNls>RJC+`RXY%^j95Z*A'5nX!;\i$]KT!hD-?VYSlBI/H-c.>Qk=Enh:(f,p"0a
%J_1fF<j)_+Z(uCi*d=F+eU<+]6i^AG5XR!,ig+DNR`s@a=qG*EW3b1h=Fg^&R1>#VVYmni;13!/8+aAo\U@89j1>Tj.H/`W",i.A
%m`'*d5]VA3eN2OWT*>K&`UFeAdCUqL2\5M,Q`RGKbW[%r=m%fWN.NJ&m1lEb"UVi;_qEAli/FoVlYZCpb&t/ZdT9kpo/3E-+fodg
%Q9,*hXrWb;[nq$I4ba+D:n);N%3>r4hQ\o[GP1f#HTD.pD)3Lj6"tKQe<WCHSJFlpDH^&>JQdN%)d9&:^M,R'J^Lc!_rl@k%<L5j
%Bg/oWd]CEJr7nhSoh'_@PNe.Aeg'&ljG0UVml_U32Md't]Z5),hVWCRqWQ_\4SjZJ7?iO$:`fXrK%]*hs2_Aok53?ZolBF<#\tN&
%>]BD5527K,UolcLAc49IRb*"+9#QUr;4=g3R(c1Dm`DTK[_/_bl9g0o;6j&Yb'oh7/q#U:EGD'l,B^jNluQ?[:__*4JoG".""62i
%q5U_nPi^PjPKp1F%r*.NX=34m%joq#9R,us2$)q.K:a_(<X7-Hp];T<mA&,WStl*E^MAl#I/g-<qn%!4KDX>Wa.kqpZX6Ju2hmr'
%o=d:./6@1?FS4C]>'+k3#X?`"o(>CNOO.\?+D'CCg?0[d?)E(/o7Y>>7E6Hr43[$:Fq!b_W$f%bdt$a'd*Mf0$Q+H=B!+>;C!%*R
%+)L\/=ffVTf[bl+FOrV@%<OlKKknm^l;W1unM#LEe<KW/oNP3kGa%U5#>*QW_[^Gi+XS/5]B,&2%rG&g+Vo?R$'@R=KUAm9T*AIB
%U>+G0Z!/a'>>kAJ?LH5%jVQB%MgtKLoPbl)?,&'iR:Ja1/P_,"a7>oZnnpe`d;bQNF!jLW1e.@eYaTU&+\hG$g["dUnD"=.O6mc4
%aQsF7)qU6&\m2H<fRp'qK5;Oj%T]KsR;i6#hR/;*3<uF\HJ:W12esCj`HG4A6h)'UmLe3o:bG]pSQpN&&_Yl<D9)U0RV@BQ>G3[d
%3]C^9?(r]?PFL!b:j(br[sS2H]Ds!)X6ROH3tKBXnsbl#P<>Tk#tC$V[L_)7nq51R#P.3;%G&7Cf6@a'"1u0j;E+;@SHScWkP&W9
%UU)=fn>NDfEHH<;HC0D=+M`1lr7Yb?"sA,)dN6OAJonAb:j,Yk'<_7K8lWSl9.0V#O=uMg>eZs)=L1UO7-qK8YVlr?I@ECZ/74C\
%KdP1"'7"D&_kMp*&9t`=#q2UsnXijA)N/oE8EK5[9(Fl,jR!*"B7/4]b5mb/)@[bdE\3$'1a"=,CuUcd<2'AG0;R,N$RpL/MNgY$
%'0uMXaZ,[LOOQ8N,M"00cC(pSEO60Bj)a8K3-:q"H'`Eu@J1-QmtpHW\(kTre1@mFiG0?_/X_K5p.]4T*Qt8m:P/nlqU2g::uRki
%jeA<r:sB9JV#'37ZJIkG,E^#-:aKm1V_W1La7KC%gZmg^Imkm@KBBZ-_L'tbHV)k2E_rF#MM.H#-<BO=`gQCT\[\#E75U)0h5E56
%jj"%Ub7&<V0;Ad*)H&#idq2SeTe2Rr^E9PS@i.U6+&NkAB\W%<6qdQo(BIYb87$l'f/87Q^Y.l^;7=tdgf`,XON?OALKqAX-o;NM
%\eIb]]J9%4eH'^0VqQiE+:OV0?O"%*ANS*<r(uaGRLgX+SXQgUkbkmS=()I^@NLu:h2R`&Ra/:D+&BK*8]O-H[!?I"KaX(&5G+nI
%VjULl(KIe?WXdisYl]J[[Mc52`17"Y.HSdo4:$==_*C).S:hY9LC&LgK1k/P^+(]A&"trCS)VZ6W5W>Dj\,E,#Dr8S!F<rNV/c;7
%jC_,"Wuhl/n<(9J@l?*6/^nq!/^_3rX;\8?YQ,N$S(bOp/0&6qau.TqJ,MA#^OK'K$7J,+99:X?ROFjC:lImbWZ$(&Kmco,W\k1"
%r%>p]V;G1!5l+ssBpU;=Ti!fnr_j2(b)`rNl6=:]]_`4HFd4(Q#FTh,I<\3&2.u3Us)`u=`DdF73_N-[!A_(/6PCn>b?mWKIp%]3
%ZL$.1%Oa.Ge@iO*Xgg(K64tiUmK%T\08+$ZXSuGe(;W;T$O4Y_oU:"%/"pTH.0qB5/2:AeYbNog<>/T8P_`B@j=ZNV5Lla#mHB4N
%<11&*o(cJXA0?e_(g4?HGs39SgHp(i,rjMW2gK]^-Vt\#O[alrfij>CgP1EI`[blo'#\:E&M3O<4<(6u3-=VV#)HG)fCHUKNQ$CI
%6g6L!-_S11P;^Q3*R_@NA!C>BKaH'q)7`q^ML:X-CeNYT\c&@QAn)71aAn:plWt/%*96Gjl-k8aGL[2uA,o?U7W2d8ibo(=1UJ'm
%rX[1EW3X'X%c)l>OXKp"KdN>jjhe2FM4ML?Ga_/`ZUJbPjN4tKZME6C&'#)%*j,,BQ`+77^0W<UrnGIKKCa`a!W7>XY$,5sa*3HB
%WR8N%92;@%+Gfn9WPAF:U!Ds&q\*Od1<bnC>]>JWXog7VdhP@(X3YBrO'`MFrr?#o1=K]FCEp!_<au;qZo:3Oj/dDo(Ee!-8t+!3
%6:j\>bBJn">,)`^B73*V\Cd"l]Fq5GW_>d9>/o/R#.c36rKr`*LtGX-_XJW\%.X:1T.?Tp:$qIY^$h#kV)=Z)HUV/?H-j@X\X_P]
%]Lf`flX6In!N_mfZdE7[ja`kr$?nQXX@i%ChfAHT3Ml&sC,Fs9IBuf`_*S"CY`_O9WSo>N&!e]O#$lR,RN#.$Qe8T1G.`fgOr$a*
%]u?9A!m8']_RWS(\$*=&^$X2BH&n5-Z>K;>&,aE'OT,"2MZ*)jL6N;GU9'r>OJ$4bgQ*:2/O/+>rRerN"3PTp6!BAm(<Z]P7Z6Fh
%oFsjI@<-nJ;Wdq_qB4^\kPf^&f6b/JaF'RDMnbjlP9c5Y-ar*%QJZn3m_^m/i:%dK)dk=L^t4G`nNq^e8i!PdN<<-k<UHGO,ZMAT
%f!>O<"oHsnbHm,R/ZTusq@a5-iITi"q2X'hV^?m-g6i+;jORU-Yl@5]K$:[&Y=T(;/bHA4E#DACW\k<<g9]0N5U#9K($!H7h2+h/
%j"O;l'"/fRjb7=%3a,Dj77>G/f>-3cc]>R*mf3&59RW`YmAhDj75+Ao88IMfP-HluOaNY7TE$>_o<gD<A-%?PQd(,G+Fm6*NXA+]
%CV[Li^(R'R\!?sILIVarM]S8*E,e3<q2F2<L#M6?)5Di0Y?jsmT:>TC7jnA:&&WLDgt@8D#gqQfMaq*Xg&m,r^@gDG4Z:gGUE(E2
%q(X2=j#A+0CpggCqC0r3bj_am#sqf&jM<u#ZmCpn[`1Ho5MJSsZCBJ,`S-kr17T>tD'!;WL'<J20m([`;k-517!Q3(U+$UCo9Fki
%XVpg-cS+liP/"Sp;`$+mh<mQ[cJ;K-`Vreq$+)JfXX83o*3TgVI0$U2-"^eQ5*K[SNB6F=,4tZe/ZgDAJ(sEm4s&3?8[%^hFaj$g
%qtBT>?@:M7?QV30r*e8cpW#P"qR*`qp2IluD3b!(!`tc568`]!KS<c;LMn;8bC2u)/t""[#h99bE1H/Q#or2@NuNPoYKC^HRV,<J
%W=LYhb."ujJ9:H\Lq1+i3iJ*-8pE%dWrd/7W<mlF4;tlG+OUpD[Ht?#A,US*[hD4r6;-/bEiTrAW]Rkc*fs"$aQ[;NR=HjTMRkIZ
%p(J?elF45r)neKn_hO+S^='""#]$ERV7D+j>LI*'S&R$raei_g\k`@OcuW@,R_P]/-Jan0AIVo$QNeLSNJ><;=oh\214n]:A<?X0
%d(0bZ051\mq,EOQShgY-7\1s?RJ$f+]1\D1&kscBbOdV'm7?5eR#UE_70)&kUG8I1L;,<Ki4FuQR5>%!eeD0q@I3>2PQFni+Wk%u
%\Zrpi3qSkM2A!'_+W*K#Mj)M*?3$`bB^W38(,ri;d9^ih@!rb=p('gPJc9'"fjTmRbaBc4B9*BHf8'b,K@A#1'/JLN88S@W,ODY1
%g?eqS@s,:$HO0<UcN/c+94h(,a@9%.D@RKBYcfH64jGh)I6SR`"/t!uN#72=5q@rspStN>QldQ%8O$Nsh$tpG-O'<aX6$;B#CT>/
%f6Mo8nQiYQj$@J=A*#Id2fr$"]3ddnhq93G`pL%PqEK]aW8o\Z&#Z+VS$5WEfU'4IR)eJZmOVJr$X7Z>T*U<_crd'ZE[F?SfZe-p
%_6p.q'9\+YCT`U;c;+sg^fKjA^Y?Rn<u;0T5R#aZ2muFC_K_YSeb?F(F?cJ(:JKR/LkR#2`!q(*8"1s^#,n7Ng]^qr]WLTM6#t/*
%E9dA!6BTI-c#e:m1?ug$^?W8Sg"DF(\3:2QNUOc64bj36+a7=Q"DN\(,5pN;jp!5:LK]B/_ZV(aBNs_;UM81h>8@RC3p'^QG2Z,l
%Rn[#rT4ngR],*Ru[]bU]CU:V4%84'8EX!]>2QthLkrgE4@Kg+'0(5F&*XFQ\JE"2p*^D]P/,PB=3u%Nl_`nMP(m&"FO6Ju<p=n[@
%TNK9GXa-E`Rh3Mj_QV(T*YLitiCE,uffpX'nNoQMaLBDa!d8Di#5/%3-LmeSYX91thN,.+!Km@cI=c/:KmrIX_c!I?g=`TtU3J(c
%T2l5^k_5I*J7oeDRjpdIEqsW4b/dM.SQX=1[A\3I+%P3-]B\dmfPNE14k=i@[<O-`]2Pt_[tfd6qq(=.(60mMaWoE+\W&V671N*?
%-i7iNa(3faNa)^C)e!1LqL4-l'pnenT@i[0S1:,?o@oSR0X?!c@%fp?$0-aob(X)Z?-^&p8VUoup1p#oc#]o(mR-F4F$dhsOT&IX
%[jBiEP0kfBR8m.e.Irg1MTXo][R2)G'$2Cg0raUtQl2\!8@%sp=]8Etq7;OB8,'p/UBX!DIn>lPO:d-9ZIcKNB]N9H*cu"nN5%eY
%!:L/-,SIWKpL-ok5kj:L27[V9W:J3Mebl1J@e4hP]BW=PT44YIi.sChm0-=i$3mi`.V*RG5g.FM5-=;[9Jh0O6`5Rj4NA<!-<WK:
%bZp<d/"5YOO;IKP5%2l+7Z]8d?5M"LG^(I;Vr^"<b*;t\e,=L-kRGT44Uf4'U\X1)P;eIRrkid4m_LjV2'C*$it?8'\p!<F\8Si]
%V":p==:n@)WN^GuZf!+!Ek0O+ikJde%)DO_fs,c2ICGJZ9=Qgh2;5_'n8WBNmmUm%]#Nd&Z"+NlldVf&oU(3=as4l?O:;;?,2h8Y
%s8%]D'rM2n&p$pK)-r#`V_P"*<1-]FYgf;F'<0ZVfOrNp.Aa6#[+u2dJ;1q7R14U34Q,kd+aNRjjh![#kq5AlK"Mg?itb[Zb>Q%`
%k*:?&P:-7F5oK6te98fkHDebOs#;OsHb(*e=j?AddA;JKh6N74:R]3brfK*rPS2i/ZJ1--K!ehDZLS74Sc8o%B!Qs2'-8@[LS_/[
%@0T;pgQ1,qY;0,a[F*e)qG`M0-\lX1#>$ueW/%k0K#t)lV"Zda3dJNuP.E#dmTN$-i]L?:h,EtA0`IGCP0Mp7$n^k(pgWGtW8ATb
%<d%e4n>@cR+:L!NX\ojAZ$E#T`d>&X4?Ff8)1WdL]4^%-X&-8M+p;'A:\usK4].&G2m>hIgYF9L"+;#:'"Xj,15Z\g&-`.->LElP
%)'GhV_=j9<61gD/MJg':J7biG(D*TDrVMKEO6WIc;^4[EQ$)m:onQm9o*pDlDoIZ)D@F[L]+0HL&S;Xe``f?nd($l'd'&QSrjJfE
%^jaWF+aY4l#CtY8pi!Dqq9od":C;p9qAG=bFKmXh)<tZ!b#A+l\7X&I1'?fM6@A,2qH-%EZ\fgMocCDnhW?[95!GJ&L"8H?4N#``
%]bj>0fdga2(>Sc@?MGB-#<'88n3%oLe'W\j1Cd&"T7/"!ZG1KDdTF@HC->d-313RcBn8I9f<$jI+08FBrG@QCf>LVE[;IQ:QhnR/
%CVE5ZL+,aIJT5!s&(XBXHFPsR<TU>&#QolknpB.XBPSYTdJd@\Mn<9Mq./d1+J5?>.JI16*at\RQH0g@(@q_W`M%)ST3;q(J'Kif
%M?!0L.8/I+HV)%Cq/LL.AXX\kFQM9r4h.)']FOkh4cV[R(G(^91if@K;k6E;R#1_m"(tl$';r&n5dILrfGhu*8'"8T]`Dt_fGgLH
%9Y`Z]#fmoc$>ZoN2pboT7C-.L)p1nb74CXWgUKq)p_@4U@g??k+H,ol'_2q==bC-l1?d-p$=]#5\Ot@d:oNWA.M4HnMS8jfKOge!
%e#:s,%&gX2j_*)a.#@'%N`T[%YT_P]r*P4,@DI+5l//5l:^X88n8CU2A,E1q(r*]!XWT>9c,B0[46d84ceGq-2\al4B@IkmVH7J"
%502Pq>G$Q'NHu`Y1+n25i7fAuo>Q+dnft`U)!!%ga^ah3aP>(9N'\G\ME,;B/MQT%9G6r$g`)V+qTOiFMs+,?gfoA.gfm*DC]F`M
%>6orTWoG&[$nDE_rJCk>SakX=J&9#tDuL"tRdg-6q:?2akJ+Z6jLFEYX%!)H]kiKEn+c0%i?1&if2GgB-UqVd,S<,3.I-:cc*9"3
%`PnV/5VOpX@N&*^@mgs*U>CVt)o&hpE]bM&Up)duiuE5:/BH5!W&H9iWPJ'fQS&,cML*1#BkPrM!CbLB6M!6Ok(V,KfYiEH#J,Tr
%Q"L6q)J>]S:4m3Q@tMB4cGrP-$0dCp_tha,0IE%;gIj<9X*V^`JMfcCUDn/B7kRiDKT2k=[tH7!%9<%$5N:Nh<CfH6HNS+Td:qdG
%L1m^\hi-5JM9EB<2ir<dE`g#qSSf.:=ME&5pZmW^_aX)h-1<SV%?/QtN-jTuj%"cshEVM/JU33"__q.X;/_ri3CUX?;Y5K'7D5OE
%;Gh?=8l9L5c-$W!oGR<k1#QPb;:mqhI:=(!85M=t$RLrloE]K\o.;9W=jc:%i+%G'q/sC+TAP@4[Ec:k,a>8I8U=%Qn%29f8MgkY
%bH5Fs)#4(IlK!NclHtEHZ3fZS"%5?W.&GMaYSRXmpuGDVAtlMp!chHm5W%i#3/5i,$hE2$gfAmNO-0?$^F;C]lgF%Oi4?l!(u8;m
%k*^OR?OH,E;tA]"[^?Q;\3hq/#dGd"$qc@di:1'X3?tS?\1nL/-LN+nY(-an.%5=#4M0i%5D[\RYdtsm%ZkbqTde%aj);mn:(&MC
%l\Q+j$n#GN$9j^/e#@!O@`aq-^D<HB;k=O]FoaUe,A^X\!!Ul38):3(PZc7C8r3Dm)/<bZj%hW!odpLG_-2glM4ZXXA`c+c"Use!
%&kA%]!b<BXQC5bhnk)aD*rUaYjHoe!j@h.HF4GNKYX1Z3KgUS#M#nf*l3<Hc_<oc>_?ERUk)c*P)tKDFpYYaj:amb-XoY7Sfot&)
%?V[^R'AYl&g=bn>m:d[*aGfT"4$1.)D`gPEp\lM/?pH1[nAo@i3s+f.>k\*'aEfZR&6Rp9+,,u:\Eocm`ZZEDM')71W9,/W9SL+B
%nLAd"gZ*J,q1R,nC*]$b0mUJIMOdV3i[r=B1t%[Ep.,HKFJYe@:eYI$oP+LaVls2l/J^!8FR1od<=>ic["SqMFl,R,lu;VMs/P'U
%/?]g'EP>?n9/'CbkEKh?C`@'pH8>(3+_C&2B2$=(Y_$W5k`5ERZcPt<pWJE86V]#_?'XABEsJ#Q;X;DgOOqrk(?hqD=4pB`BCMQ4
%os)e*(-H7ZcbWAoKsZ2<66!lPLr?;E.`"OU2TI"MSX_R<VR+g/D&+<(A6KBGS;"lfp!'FU<f*#>KK?0PRSD!f$RJa4[^EL$FZTp'
%-Ls0i+CRj?W.EC_6m.`.S!\q."%>eG\fp(-eDJ2`PQjTV887]aR$<=cSVUuD7)>+"9o<SPhP?is'=3\9%^;OhlY(3(5f)VR7l"q.
%l_5TAm_]=FE:,:TlH02!;/tI,4Eg1]G=gWHK07E3P%S9^;gcpEL@XD;e5sJ8?*'=ih7T\0"(V#kDT!ILrQU7G%ns)$4abs%)W\P^
%@Obi^mJ2Y,pheo;V&Lc[FgF*1DL'k8i_*V72pO6:kk[d3["cOQr7[Z/W@oGJ8l-T/NJ\&l]hX5Pl+;dS.5ap19W8g`fVRFO673IY
%l&e;G%lVVGcEF8\VNeh'F7cf!#1g$67lN>jqn(5mR/OT5^AZkMcF\W^+hJ\^[EltnqLSP\7#g>o8brV;AlVYQQif)Fit1)K%86:f
%E^!=/,Y9-Z[!LpA:`Cm`)P?17LOK9rm^%:'kZ_i;mT)KXj1DdbZe`FObj2eY\(T:A%3qQcIWb7IT-u9fKY$Rrk/@DmOrd1'+PLr^
%2#Z")3cQ@Z%nC:>U(Y<"UAFYem0;_X+DhTV9U/*2'rrVeFB'n@FCZ3o3u&<p6CcBsE^oO`r.iV0g\I3FD!m&\,U%#[F1l=_1^l<g
%&XaOa=oeWZ:Q6Dt>SYW6FQG;>MibtZ%#nMHU;9iF7;B:h,j^"WpXnKPYiP._B5:U2@CY5L4o-`@B9&h;2N0W!3BK)T5^W"GVT@_[
%Xi0b3mW7J*Kbr45c6Zga]d<\6[S)hWTZnkXPo)E63C`:V7;sSY<T'@d2Q^.EF#p]kp2a)!l(\Km4-k_R)<u^.<r)UnnQES>GdYsF
%(nrS$g[;.="4Gs&^-YPQp"UX@@3l:q:P'`$X7@-0,cYCVU3OL;2_BXVrR.g7WY`Y)%*5J-UcTR[mD`YNlj6gC$Aem5UpE1Y/nF%p
%\L<WU]4I;`5Sn<Y2d?L.rS=bW*Z,]no'!XJQ%sY.BR)dHPfpDqnm7d@/JeI&F%8@%j0%EZ1\o/eB0gr0n"Y:]G%:/RR3gt]/m-*U
%4N7Q4P*ZUL2L8bOFJDVMAoNeqG8:VgOZktR>(Y2p*iQ2noK'+?o\HmU;?O?+;E&'Mmf)A1][AOrl[BA:2THm$]SZ?0`,=>9(45Un
%mj@!Ir@qhM(*%CFY(8jNCmII$[]&%)Z69VJfOZVm-?mHuTFBr\[8@a?o'9QQb2;#1>&Ku@F1E)>ntjWLd?+$Mk$=&2i8)$Bn[9gn
%a7<lTB\[h/^ghZ_UDFllh;)b'bC3`UhYqC6k2!h?O517>g;h_B,T5GbQLbSF!6Tlf'n1I0g+!^&$?&*Nd5>dM5ASHu&VP[-Ns3'<
%/s]8_8e0ZJVK+mO:bO&V+09ZScKKCFA=*2"850Lj(i*J96XB+K%=?3W2IP4=U=;Ft)\?b(^39D=p<b;B!9h)&a;AbZBTnCk_0nXi
%8>6CCX^!Eg]`FC;-aKp-P_IBV#un84SiDaF?D>u[<6Yfh=U4S1A\Y$VU^+T/@<YiV<Q'K$<.(=>E`OC"#_A+kAh4<jO94BMYWOE^
%VA_,Q:m:?W%h>kdOO&L)%#3u?q0Drh)EmY>)BoOrq*%SF$2Z*m3!+_MbujKO&$[.3maG@@komlnFY.Y\&LepN;QKmhV2'D:q*6C%
%f*u[=p9bOme$DJnG]!_ZdY<?A-3(D<#KgTi1%WtXDMbcU33sQ)e.aDN<Ammq)rXo;_8@1R9-!*:!!4W[V:0ho\t@@5=UGYD`66&Z
%'c)[Ti@:VT4pcMUQ*YmNBX<,!FLr<*5MeE;JU@B,p>KHMI(K)tY1.E#G?4(28X--nOCqO,fnnq-]o/V/j2#MP*SB[M(k;.$9;n?-
%^aM(N]<P/sUhb?B^H_&*>tXidq*ZXLGZbVKjV+mWUUs2_T*Wf=!6WYO_*.SsP:+e8=9\;Y50=]c(@upL)(TM/k_O&cGYkpXSk`6V
%K6b#W+8R?umN+fP17a5t-u2hH+fM[,k>:K/:'>Znh:V"WOE"'m!LQ\_ajJdPlM#rU<l+D:EDIu,e7B\3i4oXJU$+lni"@LP.Cn7/
%?'"g:=[d/bP^%0%HrO&<IRR:7/KX6J.q]Tn_PbO+ZGNM3m9p,D7oVT.8h+:-<-OFL;Gh!WOiO6nku,C"9k-"N8OY3,\WeJ7U`ujo
%Wc3GW^N$@b\S*$Sj94-r79mJH*9]COJ4>V^0nq)D4/XL%Sl<QWZmA$@X6Qu#V8)?W7uPR,L5)k=i.EgsW/urfB,UO?abAu?H+pUN
%0JilH>=?'+==g3PY9CPd.+<Kb#rN+pA*):?e"D@<T_k0f8eIc,^)2Sk.'eer;Zp&X)p]rWFNJ%6S0Bkfk`/V;;'kI?E*2-c"4X7.
%qs4:f%H^P.gX$jUiS*sp+r`VOO(N\Jnd:_Zk7lU,<(a)R=>hNd6KN%'+q)qBMQC3(csK/Y!HbFd[\D,o5ftT<;91U[,S565&KqsH
%G%M=NWti3^e%^7+b,*%p,.?-&Bm4#`5"RoBLkUXj[IfPFDTJJZ]erJC>?0a9Gssi"9C/V*D&k.hC$-6$pph)>W5KlA^%?@m('1F8
%[8*)k<"k2]:+YE$Xu_,-`[HpYPoR`\,-J8.,>qt_(SoT]<+6Fu_R319k'LU[\YI(eTIjo"=ICH(h)ZpQ-Pi87&rSO1M+)etjIRTn
%5B"Z7=MuO^3ER+9bjJ5g/hsVeK2Nt9.'\R5`"4A*S/Jeh$$p`>)dMFPpkU\_9a4PW($3[aMZ=O>r>G:FV)oApit#ak-f*O-X:5&9
%CFsa8CS"YH_u!Wo4u7hCBt5Wf8Vol(S(Q"(+%&RJ;p6`nZ9oBpJE.k,HS^:J#X'pH19]mH)<gBR8/eb,2Xf:FAQYJl7XmK<.[m=?
%J@Z44L<^EHi^WIopo*mtpTt!S'[KJ0YnII%k!44QS?F1+=T7OH*QtQ@hQbi>WK4$^8MLE`>nrX4Us"]DaW"3&ob:QF9=rI>'Pp?g
%.p@poJAGgk6rjU_j`6`s9Knrcs1BNTXa&aPK6Ij(WEse6q<be3gWp<KIg#kAF^hP6]Zn0m(mDT%LH=/pm2/\6?H)8!aE#eKs'u[@
%Zc!MGe-VV7:s,Hc+js,V:lVe7ULjDaHl8odcEE*=.lYeaZZ7-Mnh,-0'6+'?=3Z\0*3SeYOk5Kn*A0PgJ8n'&6n5&f:0g"R`]1dl
%kg&I"78=8U+7pkC?ftica*4F4?Ftbeqdt%^M?ie;n!$k^#6siD'rPc@2l3YuUHEZ"mcg*>FEUG_#568Qe<`FLR4jg&e\.]#lXK,G
%5/[NYS_[OUGuU<@bJl.O`G2YQI.3/9.e`2>mo/rgMGB*dgOcc5mh,88Jc4M5..Om^U@NO&dYl]D"WDga[V\73#gf2ur6%b_YK,MR
%PL89B3[\+G/W>[&OfI!&p!_=Q+8uks#B,"oSY5u-BX1smN)k/hcYZ.-'2jS,M:N'rKE9UNY,TUe`67k$gKN'EDZqDlEcQ"gjg#nj
%Rd:.KF`oDKgI=>[oc&e:ej,I6eLajhO:qn9V^B2b-u6,BeYG/<hB!G/7iIVL>3sPN#,-h]b&i/ERsZc)+&KS74AHL/J#aPagoAU?
%*$oFk\3qfL\D']=&*bGcN'Gq<(1D,KdP.>2WnE$Y]VMeiB%T.h,.X8iW]]<'4:p_h<'?2/4e\b6:Bm@'HL;?f/:3b_mVYSbq#;'$
%2*ZRWA$#Ih/#_S)H0[gO.PL[r1ts9n@[NH"a'F>fS.QKYgAnu_ll4?@#SGi5b96mKg&PDW:@';f$Co17P_Y:WHmm(VQ_5B;b<ML<
%+(dS)SJGjS?p`23'1FN4JhFj6-rqOub*!66*6_(+\QanI-OU^pE^uN'0^cW;6!,!Fi\0asB@;Fa/J_V54KkatPQSCsD>k<@c7P91
%=N4Z<46_3*/D.aQpA9RriC-9+qO-s<L"HAe[/,VaAu+sh/pY@V=+mb<]c$b]%dh`/R<m`El]H[RejMd*SrW8_gTpd#fQuBd*EP>(
%4n&#"f4Zi3i.5i'33o<(0=a8XR&;#;cuZ1>%4.DN+gT,TC^DD7'$j-gJkeo!VYBT'Tn+@pR-iWBd5'[5M:5tX4l[GW>=T#'+B`ND
%f%BDp:W.mpWgn9/#Np,ai1?%FZ!;kaSI+F`0"6;qVoK/Ea1E@]NiWt#M5UVAD-aPR;)T4'=TOd"Ojj_/WnXZRT)"2Z!OO(3X_<$4
%\qNlSD`:kd4GL?h]-l&[!EE4HRlP0\\&q!R-CD+Y;c*e,a`B?:;g"Qa)G9P"30G.*gQc$g(iUV@0;N?GM,.!:8pOra,]<R`9J6V<
%F*at:]-(H![EJI^&,+OB@WP7J)SG8BK)2Z^ja!-ACcOVlS.iK&g2S0^Zr2>NGT`lZM>Yt;-]T:8G8Q/JFibCUfsouLB1r3YHDb.R
%8jBp%eoB7BA&g`6erp;_JhEIlPXiN_/G45t/:M"4LN`h6UE#Z0f+KELMQY.(Ok::H*+X.CT$[*$fK'&%&#,3ddVg?WlduGoG>Pa\
%:;WjS5]_^RI6lH(]IC"[-c3u)o"FE]2QpW8jV<H+eZK;Ma$eoS??)%f+oiglSj<dk^`la2$k]*Pfr`_EX_qUZ@5BF3a0VrRglCt4
%ac#Pg`^fi?LGGb"ZoLa-=Cj]B9tXru4$!s)Tb%PB?&i;8B(,g\1/CLS5WX.RMk7#>;9k!K*cQ0A9HcY6;nO;&5jK<+$1T.=1S&GW
%/0jDc:Q7]3f"M`>Vs":8-!:KCT?]ss!Z"'fp0tR&/;/VdE0-S]A/MR?'gY+i@M+)m"N:C1"GKh>?TWA-m::;$CT)*jm;K^n8nD0/
%CUhrGoG2R<iDg%,(>MV1!-E!h][eRr."`\Y:Zn!3OI2[U(1j6R!&C9$X%<p%MWiM7DW'DFN77bK"LDA@#q]SUK:))Do8<&eo#`X:
%X3tK&6REZiW`$=O;$OV_PGb2=3X?M4_QnNGKFq]]AbEP`7Mut"jES3G6,QBRd0OC70Ji;nd6KV6\-r.!ILW6qdYhPRKc%@R*+n!&
%GPL-5oUp$ncV_\RX<$BJFkI-jfDoRp<CmR@)Lg_faJ0Q/o#7_a+Pq;Kg4TnQ9h&-o(a>K9.M@0Y6%q[q,otIl_?t68lstHH6.+s5
%<>B0tKaN6=jSM^d5Cf?s<8mb`n,*0N9[9Y9md9?!d#VLT,Ga2Pp"p,4N"%.,`Wf2d&5sYs+3&,W&&s>rL+G>:Bl\t>q?a1<<deOI
%j[9\=<66N`_%J]$8,73\HQBGU-F6*dTJJKFa0ab0KKO<B@Vj,!?3nLeRI^t*1]-?d^9]saB&kl/5>N;ck>Bd)p+48QPlRiCO2pNl
%6@)dlLe1s=>pYqpZsF>0Gpb3P<;K]%)r5lN)0NZJb*Z]5X.#^#^gnlkpHCU,F8Fd/oVH$::;Xef\1!\7C^iYaMTTd^:cTCkX]H3Z
%gh[G4-CuWe$tfbe`?I<H")jaa'ia:B%D87E,d$Yqn/;[EJAinbB\_];Q?5&Q]Q(Z?Hque16\[L+6UoPaCL4>*bo:Qp>uuigbG#4.
%Ru6BC3bc9(+Gl.u<DdQ=[u_@I7@_i7"$*:`.>2$*4"u0YM(lt`i"jG/)d@JYbO<&2pL12g/#'1i$"]jVpZ*Wb!=d^7=[BS^="$>6
%TF@pZZG&%JWKK&CdFAf%Ja@Vs$.[?3EmS;RKe&Plie9i-eZ,99F=>iL'pO9ZA1'_hOJtc%'i5+G/)XPu_Qs@?]Rho4Qt<Io$rA^j
%'06,n-12-D&u&HIe/;U4+R,E1(]iGY=D*?nE&Y5CBYiTgPK4iY6I^(W,+pV;`9r-<mtn[tekZJq4^>^8&;E)S<N/:c:g)D_J23d7
%0=F\*o!2:l3EHMuTQcT^JKekUVec$o/ugiXUa!r!od\+3>ugNnjY?DPWkW?%Z@Pd3k>dc"NVb-!$qR,k/u)ZC=KHaJQ;Qe)\0YUi
%N&%&+-$6,F1'V)C6SBsb%-XHu1+';lR144$^$@kXiho15>ds@UV^+Q7AX'InXrUfm=FDa@-'KQb9eP/(6E5u"pVmP\*sTl=b&Fot
%Jq!c^iju0="-mH6X!e&_q59QV4sAHR5#J2k)H?Yh1.+4=Yf+G[6HV]o\Gte/,rB-eiVa)Dd@*rZjW=uFClQ7b7XD]s.A*P]WCF\8
%<DqsSDtS/dJpc(%CTjPXq=D[)YG;Rt,p.:VAKDOee1C^+,aX.Q)8)+fc]/W,NoeA:7TYH8N:;/]Lk8['fop1m7S"G`CC$(%i"`TV
%r(]@bc<)kEh4[P5<Lr<5TAg1pj6`R&>_SDl)#Bju'He;7+kk"_q<T$oaU8>QFeZctq$]oe3k^d(:`79FdHm\4d?;,95#?)qF'ShR
%LS;72%k)P%"#\[V+a)7=Q[jf9^[U[]ZQc$8lOlaU%Ers_>+AiaWHWX72O[m;#>3SoO=97"Y04jA[sho?jYKf3R(4gM7GP;]/t\e_
%8Y4*Q$7<l7q981kU^6k%@$8rljg]\Mf_jj@I"I,CrlA^V6XoUj4tFK;j1uJ@OWdN%8ENL(9@/uJFk.P!j=K\MkdX=XSK*uho]g0"
%rK]\mGKu8e'bSO/D[H'%$4>AeJ-bj-f>@WCit>)^:r^k;9kd)M&+j6]"<2V=0i4$9kdPqOA5Tm-nc<fsEZ!lI`:TC/k/Tqh^Wga)
%@c*!c$HFH[ICg,-c#K-]"?A(JPT6%I:Q>r_)#SHk83i$kO.d7D%&F@6m^bqX/dqt)^*S7L!VbUa`t!bJX;gZhH)Q;!;$6?7MN71m
%-+^;#9&rp%P8Wp1\56\3ZGHC9]<%=K1AbpecJ7N]eCZOtZE'?Uo2WITYhS'6XPLjC2'C&.?R?"YON+lRhBDmjMBa9-3'>/HDhC?a
%f?^X,WQ!`,/(.Uq'4BRA<pK)(O&Pj/f<YUTYHOBZL2Q=i3?A4g>XTLsB8KEYXL92i5aR',&KqT/&I(+BS#SiOLokqm1;pE.>C[FY
%/jXtnTAE05o^-e>,M7XA2[qB2B"Yh;P#s_X9&jh[A>ra9=ri[c;/td'*+Xe%`b.W'M@<,)M!h^)AUH`e66nH"K]=LIb;,a2VQNjh
%oGCHE/1"8JJ(6OnP^*^qf-7Y9bKgB&CfgSFYl/U<7#tpth_2@[&t6U!Y9;q"K)*'2*?uWDVGQ7r,t^Fsp"FM'5fou!CHF+[&bdGc
%^\qD:WQb[Zi3jdCq/Z,DF,^\"1=`fL,``6N6)5$4eINB2A.0KJ&f1#J>iD/r"J!D_G>soJpD6nAYX47oNItETn_i(!"91o`,;3<`
%oD;cB?8_+hQuP_uF#dk]0?K2s*uMYn84:9d7n^!miX,_Q7@E$!Op6jU@i`*g=JaJf5W@as@qT0EK30&g#RL^G1nrJ6I>o0-c&tC2
%C>P'\W'mlYB@YVS@HOlB4p1d$HLILM4$n7T!%>r1jFp=EacVPnT#222-4"^]/Q*+DgAaJc.$]Ad!/-8A*r#1maI&Kr7O^$,0MEk^
%JQXR<rmrJGQo/P%7:gF'1&VF/M3M>E'.J>g*D*5]3g*B"F<m^^VB[N!N/j\jH9.5;0^%iZ;pcpRP1$GN8[G<R+%[[s2"BKp4DFf+
%)&H`\mS#b>hS;][/GETW4(n!L108!-QPG@70m_%0?Q[1uJlbe?Z*%KYd]=`C:%*Z03nUWoeZurZQdn]rPeR-?2e&&T`(%>)F,WaC
%q`T2X)gd\<*ZBlNco9^NZe1Gup?l!;8#3n;:5_-l;K-pb0JQms%?3`+"L1!XJntJ3Rs/[1RT*40`8-NJ]YQKU2MgudECQbm-?=sm
%5d=.]?HD)rHCIGW^qKOHkGLJqN?'OaY"'@ur7ttnhV>m^`:;67%H[S,1^7R,/r":o2imQJ?qeZ0L1]goEkd(-GH<kC:K'dgL`Oft
%%.H=7m3%AgYN%5/GmrjcJ!HcY$P3Jd.F;NE'msQI!WV1#jb`W&8-m]1SeZell*Fk@7:#t2^'/Y221'LZq9s'_f3^T`"-<j@g]&<d
%3fGuHc[t05_C&BlGW8o"Yje6G8obPM3n31UE<FusT*UPHQeSU'r`dnm\;`!Sd!0ZD^8eL;Fu:;aOl-A6]IF:C'n&>&Z$M-ATKZl0
%Rsqo+>>T7<X,$FC2oOufW'0#`$[.s0b#qLcb99OZ_Cas]8!GFlP8.>a6.>>mA-H\C(Edb7/jfn,Ir>3cBQDJ%ObsmC5lr,gI)?>.
%0G.M@2q])uC=N/q.mf6VF9=nj;`!JZY^*q[_8kE&htBGuXo)=H6m>dXg@p7N/,Jag_)cl)&t4CT%b+_m$Y1I+cS9H'"1m8,=]jdV
%0?g[@':a]*H>j+WoDaN_=HfH^Y_#'5"MiE0aVbMI&1kiZR1r^-(2Z#G(1ZjD\eQ`)M9+HS:WQXLD\b8W^tK7`$?qd!\QR7<H`sDh
%k9U2K(G/Y''GfrCG&\gRLD/1]`MX0ZX"_NPX4qXVo2[Ui^WgYQ'[42u9!E<UH7:RpZ)UDA2WWt$_X3I,$sl34/?oGWY?j;T`L7TE
%6hFeo+aNI']3%6j,\ohD6_`=;/#oj6h+##Z=.#0TNi?Q>HMQWJ"=j;Ao5-=g$/T*BL$B#D"mr+[^48C9OcJs>E[0W6CZ%5^E\Hs"
%!*-!BkM#t^c\JQ(J.rd+eL[BaRWs?s,L<10-KNn]Uj]_sImE*SG.rr*`lB5]3rDDo,ef6OjVHh@4I+Xr2@'IB^A'V=R`H,Nq']hn
%rtTVpm$J=IVVC#O6q';N`]7#H[ck`lGS\i['\ru6IOKN0?:<#!BD.1"UQM<NiQ7hK!:%DlRr&8N7:nhugT[M4gr<lH)d&39iIbs!
%93671NGRX/H;s_uZAeu5ZAjNpCh'S8X%'B(CP^&p`4!JtNsIh$&;6WD[63<J*5,"FTIsX_r6mhOgtlFLc=9_m(;8BZJBGdlC`@m_
%EuEXh)YkBg#pQeeU-36dJSg%d/^#*no)L4UD6n'jNDph%D=G.\&^e`/8:_R=6\]I7WAHT[!2[iKOOY:!;^7fL02]\0455K!T'e&M
%UE&C:>*j$R(1`XDYQo(SC\sqn8"27gOGIcVW+$A:-&oR8a";L%U>%Y)SDlqa00@to5>W'q-FsX-OC8`*[d!6gODqoC2YiLt>'q:b
%,^$g15[DJ@FCqcW1RL&f4]!nBGU<O50$*+q[t-iZgCiRp)a%rJP!6gn_:?3/k[=MPoI`Fo4THqdE:[oH'm6&<D#b3tPk/a2nQk.i
%(Z,EuWQ3%=hZd/,E!h_G"&RB4b#8<h("MP,#_e2#.2"!R\rDY0h$0QGeO+=)j?:'<2V@"=O!2t>\VVT>P&8*k`%QS%D/f+kPV%oS
%.nTfhf>s/*>61oKgT"T5<L5Y&RjPY>66)/rJh&ds2uUS9BR:2'^0BkLq2c7%a7g.ALTt^SoT"`&A(t,OYBX95D#j5'(6NI8'r`I9
%BEGR5[U@kJ.3H3qFEFT)+=63sG7j%<dG$N&LjMY<&Ue,NFKV*A]BE=LcN+qi:?CJn("#`!Q?5kbMR0?dLl6W+hrJ>An@<^4Bd,\E
%'%e,u@PCiiq_lpEY8f_rF=CQ*qBV.<`%^h-",_"HI#aj]!'GXh:fJUt<[K)kg8!h]W@FH/c_8$-kBZ\>+;$:rr#EKbr%X/&_h`+8
%f,*A&`8\F-B*?5oK/;bJ=I#DD9."YtcN.ToT3i0pf18+WhEJ)#5bd;nnT-s>:(BG(J1_/=0&-"Db:.fKW73.)T*+^RmM:6I-`$7B
%N-b8h]hVS^.8'Z097a__>[mS^PaLENlp^!W145,<]n=!J"HqrOa<qhT<kj7[4Eq?t')m(D*)JB/H12g9VhIjd"eufp6<SnD;>_V$
%\9!gHpW)Qu]BG&@cZ-/0Yf5N\/C;Z+`BDL()jQ?r4NGtm;NQaKpRPFA&3U8/.Q0u:Er_I>ik]]>W#DH!_/h!"i40M4n=2d=Uf>]J
%#^MZg%\=nk.:/HT.lLs]B/+#j*20>XV<GH3%_NK=LLF/<dZ0n\;<u[G[C\#:N][2::g>Qg(N!S#JD/?6MoEis3M$J:MJaheNoshJ
%i#RI5\/N3j3N2MNc*X@p3NaUgI6T'[X\IO76K:\k79d?n`kn/dSABL;JTEq[U-t4Ik8G4u`P9F63M&5'3^pegF$u.357IE"O`Tmo
%1XXAAm2n\oBJ46d5S6g[j#W<Y7Sq#*:b)"M'_+F61+F.25U\CZ(%D9':2K[r[sOpFh0(X443/P8i?4)mNnj"+'&epli;%5#Eg=%<
%!=oXXa*3Ln(HnfB,(%*mL:0#`U[G')j:O'5c3!V`P&FF-nC]6D"<D#dhf[9M!/X,kDd+H!EqV)jX%bIPl+4c_e=h+Tq=lpC\$GVh
%%)dC><;Hd*;]FaFIHR>`NsA0G7iq'uB^;Q`,/ML9fD#NB[M4`fGq(JGguODLg4<)L5i"?+1NEJ=Ziep"O*D7mG(`2g@h8b:^ue\l
%BEt23'`.D+8$W1MLk2UHZjcK6#IUj#pti:Kc6(/,[%eXlb)>6+%[c,+<W.d%%N3FTEMHeAdt8[e_]8_o;,Q9^>T-=n`!gkJdYL4=
%e!B2o9&YeR!*GjAm&9*=U2h`BFo\>Xm:Z_7o*R5j=OMI)'UdCn%/9^fqN/82(%L`S!k@&:Y*9s_#?3-63s<'UpX_s"G-Gle-`4"t
%T@%0rD'1ALrB%N,D%UO/KS$(d2oZ0CPT2)=J.:3HViYuq"UQ:a_F\[V,GdFCS"",VB"-US*<;W,QGtJL3ro%D&HGL8W\Bu<-V6_^
%nEBDW`4C%=`r?*<b,r_a&rPC+]5&]j^g0//U]T094pCS3lD"XC7M]!L<uD#I89MI+Z5;Pq3iY7E)!ESP'G!Y:!n2rj6enGY;2f3`
%.O-0g3VK.h;>nSb]d&&aXs4(ZJQfK?=(=q&!u+@o6@aoI@ggj!!"l*D&E"4"#V_`,,B(#0TPD&r)$8%]a'C7`SHC_a<6RK-8/_GF
%7j+M+S/r^Sb[hCNCA-:#2.JcT(f2*UE[V21#Jdc@0F0Y1$%?PuBEnS<E-V<[3*kD&k:Wp5d0&br*=dmW_5,GEGD;R3>.`2)0MC*&
%Xj;XeD;@d1Dr@=i&TI17Hs'#ik@=1Bj?Vu$oa8l\dcZ0VD%Z()oeM;/>.lfA9p7bJY@M7>3Y*K\Z:peoUkKq6^-[46-tqoD$^E2f
%.T>NRMO;\kcG*cVA=5=d;U2Z[!=uhj]miY+i6o6E'E#ZY/pXGfjb]XiUs>;SER:19?_4K68t@Usb<2cqT[I]J-^d"+inX#lR6FEt
%gne*ul163.d\b?W>sVWiquML8T2=eDj;<p$,jP"!Xssj6.TLf9Ia[E$#[@mg*rWdjCD$DjaTWb[UW8*;g./$fQR<O*%#qu[+Ol`I
%%s#Q!o1Z^uULM0PL):9O`ZQr/#FEQK^U?U=Q@_5_6=6I3GA-WA15u&VVU8o,#5NFUoN:$Qk\Sc4l]pIcW6s5A&tDqt$8L@,SdKm7
%5eU:'9VF\D;!8G>'RE*Tplp$%!V6%X$9c,7:5'aN#7O.s#;fUbh7nD$n$59@@8p-JkjoZK.;,%Yo./=9luX$Do,:k"XX&<9P8CW>
%9qO(#pGhF/APqaf[FKORKdL/jl1:_BQ.%)pH7kt<B_3G?<#E.pl6,S$b,bu1*_S@YH%0cYIX9K,H,=qYoYoAF?X'5ER<&o-X=<eS
%=M?6VhhM(WID49gr(h?P/P#D;V?>Q+V]8B*7BH)3n<,Vl#K>#&Q?__Z9Pt+#-=Fs3JAV"hEps*`*.4D+#8=ZY3>bR(o7s]on('#q
%"5-it"l[tl,RLC:j\acGP(X@1Ot[HFV3WA8aFjK$-k,Ob>Crl3_OGOCP44C2?9]ap$<=>PP&Teh6LiZnKO6-mfT[XdG@>J__R7E\
%8\hGkW&9_`>^N];`e0=MK0trL;?4cZdjIbQ9+nC'`(EZ8:(s3EiVJ4c8s4/LqalriIA4_`P([T\dt/hRTSefM,iJh48Jl;Y9'e9(
%R%9%X0hQm0'p1gBQ6_E?MAhj/$"HBZIchn-L-9(<HS:7D3X2mL@jVJ6@5V^K64a>_CP^[k#cC$UJoH=)+T231p^i,ELb!BKT!g\4
%Xjht]!D/dPaA,"kT^NFgT^A.-oG!DZF,q^QoSfPaRf?F-@FBeWF+3.ln+hHkIqjIW"cl\@E90=llc.(h@ifucd="/ie.2aK@a"+M
%8g38YIQ&@\^TihH`;uP>5gN>;$%d4;Gp663W-VQA]>@g+L&);[c4Wn>!eENXcJ.WhLM6g$N.IT$fS[qULVL8@#AgB/3EHTBI%fT)
%pb_/L[FZQN&Q$5A5khPKa;I\'"3BkQ=>Iq2IB1Eo8C<6-.bbGad[VZl4KT$R-dGfu>!f@j[<&nO>`7<WnMUQ%jj-tCBPnoD(sWj!
%Nm_QhY+UH:^@^0q:"mG="?(StM;U)JYhVP/i\>pJ7Jl/1Un"2f(,eU[h')57N="BrTn3#l=-RcK_Gj`Q_/S\`Wa)AX(f&+]Mgc=M
%=YSdG.p:Vf:j'T-mHJ&tjZErd<+^mG`Ijs:23qFSs&SbHh$dcgBR9CkK81)hXI3E[Sm`^r>^KpQV*jZ>G8.L3m4OD8/)X"cFF0uL
%i?sF=ogDJZXLoq4F,Uk17+%\"i21gYf<':%I!0&o4DWiqFXaF/,>qe;$6=,7H[IuMULkd6+oX2N*Wk/SIHL#"PW5#5k5u',5Nn?K
%2+Fj$70al&eZl;6D/Rm_A=7tm9T1AQZN"i]#=\m`p[qb88>:0cNsFEB1D3NF8T^P6J0H',RZW9s8^hoDY->>#RZU"IQ3t5LTcm3l
%M91:F'OK=K,e?C_a!;1JP^1AuRhJ]-PnPI/Tta?$<kQO/[ji;19b+%:-u%8Abc+,YP"\;gaC.)e7WLo7'$npE6Ls.bR%0@[(6.C>
%p!l7"DabmTgO.$2+EYBWT='DaYE4W2Z6"]l?!2[q#g&[bl>YRa!6.oI\r&rYSS->@/%cJdB#Q[X/q'QE,bU%$nY2/!cD$F=g-m5B
%\g,jE6XGO&(RtCT)TgH;'BI-O!Y\WtLo>A95A/A7*`=9c[QK56#?n?)`Ig=TF7D:g_4BI0l#gn%@ps8c)uHR/;/>&"n;e5(jA=s%
%NBX,_7M!RMs#&X1:.,.F)nhXI6WM'iLH@(i5Y8.iG/6s8H:iCdchtU#),F#R@gq1N;&(+bl'`pj<h,Irr7Q+G]M/Lf,OIC@D9:6H
%;6RW6qW;'B3r4eO3dO8Hhr.dO0JJ\B_kPa&;Z6@77rNs>;.pNp.kgUAcsE,\G^X,3;P&+I_!DS$eWoPlHpBGIDE`@Z6%lq,5t6B8
%T6<Ep$uJ3)N!:AP,>Xap^FVhU?gcW6-4HSrF(Ynqc4@2oMH;sqW(dPMFZHItKsV%=^F88+*o*:V-N(^B&/K3O.7Q*5FS(m<W5q)"
%K5#8TSe<&,24\C#F\H"@$=@m9HCdP_FEsdZ2s,<15*Cqt:_]L2Y$Hc?*W:iCTZPjCX1EG:GpiOX'?0O4Nh0:sU0=1bUUNJ2Z:R*'
%b@tW3FS,LbV.,,o[?$i9P3M203sUhEkifRP4g2`ekfr:2lV+3<*+O/Ada:uWG-7,&@.+H_-69dR^renj3r2rO^OhK;kLYk/Q?9=n
%fdAiW+&9ajnP+MhFS+g:F?4`SE\&)qD`]SD-)(sud;r_b(`<j6G5P6;R`/+`#jn7+oN_F&*m[!cR45Ic+p)Xr/bMrES;uIuo#L\`
%']r34l0(pi;KQmQ7a_sX2#De;?I@0l2-o/QQ7^%N*ne_-7ird>6DC7<E>b$\(a"gh(%,H\'u&5%kj9in/'dDC9rDaKQ=:8(h`6^d
%O.HG<ZsWdJOZeab?L>Oa&<F=?7T=/C5'jAqG4<oB"dLVOhj<"l-LU&Z+qKM;Iel9`(9Tb*<Qo"U[?HpbF,j9dh0?s@H-.8VkOJ:D
%cirE,Gk7"=5gp3)62jg/"PaLth\H$*j0,3*C\smJFDj\0L=XiA!g6g/8mV+^3_BSQ2IlY@/?ej#p9m.K!sV'N#?41r:I"87I'u=b
%\.@RbOO-9Zd%9r4E#HW;"Eqf^0J\.q[D`<'P[$H\p)7NEk>1%QP*(s8W=>AQ6(5Ud&5XqcG.@K/#ErRMCRHUggo*Ya0e$T6lB*kg
%#HRmUCBe7[_P[f5?DDC=NXVc%-_[^dr_>TuXS!3u#j$A[f;+;'F.GFO="k3pqnfpKLh2\=Se@H-2buI5[-Z.<8fU)_fr+9T6Rhl-
%'KQI+gn:49B`Z\ZI-AaoL&oPt\4ju1KW:leK0B-kQgH"_3`/hchi!M3<9%WKn\=^dH/&$NVW?m>l1`Gnn"K@mfB%DGlfGVO("%Ub
%V,JFb1-<GR*$h7&f/A%C0-j3)@e[+rYMd,oOPbui&el%+;"RPme\1'^#gU\o+?rc,hX:"lf,+/%/`/:,18%MiDlgODj4X*CMeDbN
%"]6hR(!,12ElCWh+dc(H_gYfU[u/%2)9N=/V4`4^P[9Z*do-f/VLhL^]&uV#X[O*(P+l)cKHA-b&O(H2I<%pladtZHUE&6&67SY+
%X4@[)3</70RtqZ>3*&V4k>Ae2b:0ui^+ZdaDP;&=3mTFXgVA[@lucrP;i+!2DV@d76nL)*6P(aDWR(3oU_^/4CQS<pX0)%'KoP7\
%=jcAZ*JNeVd7lT_>A"[n;\*DC90H!M6P'U]Z=nr35G?1K1%*t/Q9#O[`>+g1<;Jo72ssI_2lHr8Bgr*Q?p2$t!R2jArlZW`Wb$KO
%9W72mU=me`^#HPXp*%gKQ?)H5?5gp6nU87+ZGK.Y0RTn!9@OeB<3VUKKbLGe.3Z$.V>@*E.VP*P?j>HT^o%;1KN*0g7(LY8b:"-t
%?WF5[gcVVDS,3cfa6r;s0FQA<-`@_2L[0u#\Bt(4e@HN^1GGO;W=%S;e4otC=hQQ+qdjorVL)53K=57[gQj-L*1sp`6GH`K.hQOj
%_*cVrc2tCW!&5ta%dduk#d!\R_Eal^W_EYjBC+kDJ=+jh[HTn^ArGaFC94;g33BdA"0KhteQlN?O,4[IjiI6sGe$usii%\ajW.9.
%oH#K4b6bK_6"P(Rldgaa:V10tjla!Gdb?sDl/l!DetodR5()7m?`/<lloQkGON+H@,2^S"fPNW^7Z6W7jId>A]5;e]&&`cc`e*l$
%["o,`m\@&?e'iq4h!99Q/<f6e<I@!<DI,UCAR/u+/otA&/^gdjH2o?;iL+$^UaU+683MJ]p!m%/Z,9pfn3cOH'X_[na^dYL<0tY9
%9PDQ#:G1:$"b1)9KgWPBPhic5,P$tZ7"iK,jgNhU)K&5sd9E71aL;7LU7se(%6uBEEa&tms(QPH3t@Nfhfp>'JIX:tjIrlQH8N0.
%A=Rq4,G8-S:e/P>m'rYWj$-L$[7#;%[iROoYEBuT=31aFU7s;9%rRFX[=C/I<#80TrKsRW-r$NIgmaXX;<3o@['OCI2M&Wf[2'h<
%_(4NRMp398fgRGfIP:VB?:q:KSlc.AMF]S*XUI(F<nC+fm1sfecaHBnV)3j3.&n^?K#p/*d=im_0N-%'PIc\Z)rL5>0XIMrl8P$E
%G1.Clih'ZQeTtu"Jt#uO7sqBNl`abU6'X7d-'\(*L5U!&<-3"?[mq-@dgmV`[Nf<"[Dq6sYeD4HGQt)[`,B9RG/Zqq#=8>f%m7rE
%H:=(r3j25!Ho=Y0]7!ZddI'Dmdd$5OO(W[f5h!5+7V;/1ck9c-4>Su,4'TGPp(scUU*8O9<e>k@dUDPcnJ,2Gc$5t38;b:#0&Dhu
%p0\$]^s!(aj]qsYDJ'M2GEqCN^Ap^\57(8*:Bs8e'.`qQN$2=iZ-hCaf<+6:fDVJs1>6XD[gE,SHKt3."cjLGh20o2!_R,`!Y'Tg
%4g$AtARAHn\E&E62nIWdfBmph8"-T78<,'TB^X;N*8[hjnaW9N,b,@(qmRsU:gAQp1@'gk:#'@WnmHfbH/ouNbh\p44B6$JH%EUh
%\q8#J>f]Y,BA+''ak4UkC3arI`M3!_T-P?oY\/C_\?pb6HV$CAN_WZ&6"F6dVqMONeu`e8n%?mOn8%@'JEAobhAL?Ike2Wn!dHgT
%&mB2X:$FgtAP-n;@T%MNdp2-3m?cCn3gt_m=bB=)BtXgI=tdC?_r55(+rH.qd3,hhn.tK(Lf-HEZp\T.l)D"X!1L:JGD:9,H"jql
%YGZh37gipX>=fu@qm.S=^fpUjA\Ig^(.M2J^TA:'GsO,jVW;RX]Kg>_KO+]ACM>&kI*>tEa@aUfPnb@o$mAP5V"5R&-q=LL*U7m;
%kul&.6Qt3dF1j0u5e:7dC/P+)h^t,>ZpbV9Y=%?h0]/M6-`4fZJYAl[hV+[o@WoYC&M!6#Wk=E8>\^OYXX]"^paiN$rD7dE9%Q+'
%?7bO^JDJt[RM:*NWcLqScrI3R@t^mFC3qG1noHWn);)9a;4mjc11)=&X*Z]mj'pR+*lQL^>tlee)AB*.*4^&;Po*u2J!RLg=_%+q
%8]?@NFqq%D/:LZ5Q$9egpj>j&,e_IS;uZ&gGL=(:3hmAGG3k"04+$H7ChC`mK&`)iJ4o?b7/8*?aSDWr`F+Fj:Cm\e)%p3-_(KYZ
%O)o+IU<k&LZb7l(la`is?/pVa.s75>-'5g=1;^s;#tF6ZpMC6$F'<L277b,lG!*om0Mh-F\\oas8<ATk61H4(aSBQ^?$Yp/$OOm[
%(6Z*9-tjb7e7^$$\ol@dc5@7#U4ia88r@j:dH"U"M2k,KbR#7%0-nWRQWPAi(D9+.8:WL*8.90BX9C=(#2bV)6k"ni$GIBB:.E_e
%9#Qg%$(&D6`/l+eDSa]9A4s#2#c8_!,hHO)nPE(MEpX@!FtfWtOG`$X2.VG"2.T1I)A:C,\2%ei2FV/05n/Z/5JbZ?/'/bCl6u=O
%cG'k)LJKW.n^pGt2WK(P.r!t)\I%DF:RVkQ,`))(&i+(?F[b).@YP"(.8e(n$0Y:,SM<LGd,pAtAk8S]#0N;Vn_#7h!>7cF?""ts
%Wm):=,\"j*P5!3f,3Q+6\VVK7^*A9V0"dUjH;!/5'!8tkWB@r+PHs5b&YZn`$TWDdGN+=H,?D9u+m2D/*l\S55f!hRTQHIE*LS?_
%8:2PIN.MiYW09IrQOkOAe!,_+'&.%jr"!,TI?'1#EfMPY/m_)=X$[K"_$eA[28YKs$i,hHY%_acOBBNJ'UEteES*+Q4p<SbeoJ^f
%=kjBsGGr$5nNsNf6hcTD0-goeP_0bb'd3E!ie><;RlX]((D:Mj?3`,/f!f^TMAL;=Ig'%n"H9H52Qh9J!Bjm2YZR_($=:f,MAL;M
%:+PL]9KP$"6DDH8Q#+*pkZX4<11Ee58[tRJ)%tu-1)=k;W4K-f+`[-E-/"CGB@KrOr3Wh6A?`q.l;?#2Q7]2cq]q8n3B>E1+`UgX
%YY!p)Z!>-\c8PHIEHF\O4#j^#[&=?c?:^efWl?5U:lh:u>glUJ!QdG?!SKToV&7ZV^omr2-Y#BUMa&<Sd43:0:Q"bT,KD5^c9RYK
%B6s0-lsO,JRfPs+83`[6co@j\Y?]u6'^#Q*c1sV!FZs,EWcS#M;OpbP>]nmdOQN'ZRP\YR_N/X7ie/Z'Gu[:@L!I5DXqj:IFFe6Y
%>dRC;_'m(S\^Yaf+29_g(^I,@($lI)3<QohIk_f!=#o/=JlFFR[R@NbBO;);@e:jF7bV;.QA]P(W6=/ffVCO6>";ZF2UrJ(`RdJ"
%"uOr0l:eQ)hVtqC!pNGb'M?r-QM$=1AYuXO?Oat,2:!#Qe-@FZWO#0c">bM-LY<%Ar=KQ<3@4G!/QGkU/8&K7raOFp#nJ[X"AJ=[
%jtB2L!"4_/&!g&Fm;3uIroPlRqD4;*h7fm`Z[5Pdr]dtu_Z:k>!b:qF$skfoY`D)Qiq1s2;&(+T)9]gefSoY6a=m.-P/"REe8AQn
%]UFEXI!tG.-M9BYMDS+h?*&;9V]=djWBOf^?`1r3'ce>Y8@=iH*%2D2rL&S:*I;m4.e1*`VXerSpBL%3)Vt1sER,#e?WY0?DCWYT
%h,2&0Y8T_`!cJ[B$V1uJRu<Em;F3HsL4PT1dpZu4TrO#J$Pn_1c)P.01'4i)V!R(FflD&f`XT]@,rk^B;2.N"0[eCC5YC7Z6,gq9
%,q<@m3l0@Ak)?5U'9oHa&h5A#e3/(&qAL(n5&c?J,cDPWlc*W?7E(('.mmH'oGF=AEY/Eh,AP.">m72Ehk'6=:nqK19cKoA7W9\E
%l#=iJHBt)`VUV^_H+cfH!sNhC*linK70*FJ*@<?07M!`Hen9YhigL+:16`BbR$Z9>nVNEcOjG\jKLS>3c69#Z9T2BWD,)EIY4o1/
%bYN"/7G(t5,%s.[TSiRZ'-hg-<OULg0<l9;m3dKB0r/r`%o2`rm>p<G8kb2B.-)'[@Ud8:p/9@K@SBU)NZ/]H,@9Q`*lZ(-7WSJ3
%h8u+rF:+EQf*oN/H29d7rgB(5RM7X=,P@E`O.;$2Vg95MLlnJ1aCIb[*71iW7_@7_LXbK9<[7EObIJWUnkBfr&nd"9EO/Kg-$4i"
%#_F\%9jZj1U3NoWjBNlbU-'R]Sri$g'>85bUpj4Fc(Ed#DJkr#\[_epkN8@R3O`?ID`a;,1V2[QTZmOu,U)k3B3J/mm$BB66f8)n
%mu0n1VL[`aFSW>N-GmtNm?c(fZHCXKS+PKC=9&+tE<ot$mGlIG`L3G6HY%"RpP8ENJh@8U'2OgbgTCC1=?7Tr&2L7YM&QZLHHIO!
%hfHCU!QLehPF-DXP(uf>XFH`nUM+e!<AIZoT#k`X%kc5jc>L`7A)f<=&eP/T#@<!-LUtQlZ7k^Ir,mjn4fUk?Hj/Np>`s.glUFg;
%+7p;Shq"%*EI>3OB5Y13.U;=H+>GMn0;H-RTh9Z:R]'t2n=&nnO$Nu]NlbrA6I:Bs@*`UXI0$-fq'sMDgrjE@/_8bG6*/AfeLgLV
%0ld$97]pO?6]0q9>G+Fu2`V\?;'<E6>M$a_,e\55c,cBm>[%8>I6=H^P$Y%$FadCb0,h>:BQW:h[f*i]T&@67Z&q;":FNHO?f0Kd
%!<%Ca>t^(saUu0=kWd9[?lqkmYNi-r:GQ7/@>oUgfXGFRB4ZWq>"6A@s1LK<1GZ<")\<()]"d[5Y'3?)bd4)V`)?g86<tMV$SGtb
%Q?obQSK8*E-/DH8(?ZtAS?a!8cV7i&GejulgJJA^gscX=KThbGCCp&QV:kh_Z3@P;,^O,F-+sc74GDN6`!NT.-n.Qt&EUcOQLZop
%8-!Kf0:.#3^s$'HNrVcq#eF(=3gu5?F4NIrWf[XMJC[G%Q?4Q@ZMY+-8q:WD9`)sj:N?$d.pkOse]B-.=Vu.to"t3.GW[+)dH6ZE
%$MR/C`AS(kQ%5[ZiQK+GV0ccBbCi&4TaIj2&.dITq.heK]L^5M9WW<<<\sj;V),`6dkn]Vp5>iAf)YIMl@j;T`Pg*IofO^q4,;pD
%]H9Q7VJ@XCRbY%`]qFUsGt"\Ag1^6/S\rD\1I*QG*qklo^14+de%QG+obm1ML'8uL,-nC_$Yil2gP%"#V(&hX[`5Jg%*=7.fkt7K
%0b'cBgXY(AK#:pA-1`;[8taH%d+lCa\s;&8(aEYUo3ROXPs?-eMK/YgG$GP=\US1Ed_E)^FZh`o;]SN9?BbV@_:FN;6S@_OFZ6]3
%@#t/BAR_j;*jM='28;WtjoMN3D;LVKASa"$fD^4Z5t!/B-E.BqS,)/<@r$.k$#uJ"85qR<T>nS#Qr7dh,1"P4H@]lE=P8XO$a?[*
%LdV74F9^e^cS#9Up@s&&%puXog!W005.>`dFA?l/o%`]iN,ZI+h@c/H1rOed#7`'N?TSk^5(9_V=uPV/R6h>oQ]0^jD9aW:?iZS!
%a6"E>/<7!EOTp`fR5T8k1&rK*)j&hG$0&Y1j:q1%G0XL5l*o`"2Y^BVS`&n*3=9j9PUme>Y.V1&/+Md(C'\SqL[IlYg3B%W;2-0j
%_+qo2h-i#s^JXj^QucKp$YLTt##F_m'n+ek[tkn`rh6h?@f7i[7\;#WXI/99BH["ND8M\"#"\8XB<GJ_Su2:rM39:.T9BI._J+B0
%:Bq2G!uB)q-;;&dLt$X;NA#gX;sP;9Id8a^AXG6II"X"23nKk)0dO]Wfur9^*?"pG3_%2mE$;/7Q5:*(rjp_/`>:=\]&Ml-K<n$6
%DO683^K7tNSu'UK#\0bAll;<Bm($U,L0=lRn775g@:Sbh?"iV>X4dGV#A>n#'i3nfPo%RF10,j;,jaT4VUm)1]5SJ?2G/E".RJhV
%T6E]]CpNtPpA(RA^VbTp:`rXUHk$p3'g=V_'chNaUDDmMI%D_/[+,-k/D5(faIt3QjKX;SbH).K>uWI0,Ze:f:m+SXWOa3lZu\O4
%Rr+8XCmg5j%u<@&e]/N"OW-qW&"uSeAY)TF=3b>oeB+s:'n*;9R%0"!0i6HN/1XM#6j)^pI9O&N=OKZ^Yqn:):!LAh,HjG1?X-F9
%,<j&B^7=S-n"q]u\\L&F0oM4&g&Q>M7d/Nj\A?'N\VhZJ302rI@U?A@"I`V"fC>?9IE"N>a0h:9(;H3H346:UhjBXWiK3dAq4#?W
%]+)aQF3"pq[-H_;5m0nRRmILMCXHo6feHBb'n';alHP%j*s>'b$Zj'a#D(^47Bb&NgP^rP6X`3WGRc%)ptR%-)^TCk"XD:5#MUYp
%X1SGs\l4J=YH3"A;@@ErK7AG7r1=E5H*#c-$tqEp'PdXV0;\-b7S"*lQ1EZ`)K)*1L.;&n0HP(NDkbbV,NS1h_n;H5"=Ib#`olo>
%]6E\\%^Ge\*eQ[N)n:@I_m0PJ]=-_>RK=a#<e6*^@@[SH.1Y?Q5cuQY)Vge.IFu5.@K85C>8heZ9oq<m_`Cb'36FV0G[YN*HKSB9
%@bCCOF(e0+9Zrt<B<V`R4L,1c5Uk0u^?p80/;8h<!9-h8G>!i+Dr)i@Q:r4U,idmB_n%+dFYd4dYTW(`<u[VNpm)E()700PYFX$#
%,g,Yo8SG8'_$ZYZ-[8@jefF3'a,_ld;k[1([PhG7\\(ITZ!&VA[b-b@5'45PPX_u#Z61*u9eZ>d2m`EeB)2E!_J!l`F*ktgf&uHe
%R>VktA]*f08>m<5U/ijm+lIY%j^W'HkPN6=fPa"-c+!XjRp4C.4nNL;Ad>9o'(3*T@&i6QEECBdZlU,)(LKi-_TANE8;!g2,fpKj
%O!%5"KQeKVL6n7C-mX22YYkIA"DLXq46Psq(9TX;!g%+rh#.i=,5CP?r^;fd0]JOJc,Gb`m19X'G^%m#X+[&eM;!K%T]T.JJ@+kR
%Vk$<SSI"1mXJ7#83K2=jNom`9]QKT%8%l.]@HN!bp@r'*)GtAm5O+%f&leN(,tEl84@"fanOfiFL]<MQYhR11fkT,&5(`fO8L_))
%g&W[c*Oi``Uk#!Tm9CePm8VSLBDf;3?FnXH\*#5Q4K4L5SL!'IcOQT[;YrR77;:pA+E=i5>>j;%I<O7=L-k6MQ3IGSWPoe5GD&Ub
%(EB%0iLA*VfZ4X/2G-Jd\`#M4q)g:J"$l`'3top=n0AlD&XUfRqhcIO\mdCeI@!h\I<O7V6bHA^47!,tOLVP1#"1WCHhm".fnPOC
%jKeqf#P[Yn6`<N;./.<i85;6JP[c0dfD9Wf*C<KS893E=FE0Q!ccc^k"R1[XKN9r[3UOI7jOJr%.PgpOA@6JIX\;Y1B:IK_OnhEr
%>ULg<a_;",,jucIAU`#u>Sn@GE'3LX.]1Z)>Jm7^N_V[<fTW/\NjU,i?reA<gu4t1cE(Y/Cn\,q'RZQYB%@?:Hipk3Yp#u;VH9H3
%9G5'QFKZ^F3Z"h;Rp8;/;`g]-H@I4Up0=STQVrJBJ\"dBAGcFQj-SC?+AtJmX!f+;_dZRX%m2eLg>GM1&<Nk?'dZ1s:?ne0Om7An
%2(+i"*kTNf-f6Sa5I(um%4kXe^Xplq8mDl[;/Rii/M_BX'T\?Q60X((P[N3_K/FfRp"4]g&*o^h<8T(H`;uu]l#(ZgJ>sg\@eV@_
%2RCYYVOXQ$Z/NoiAr\jX>?apu%IlMkT:VB(pW7mm$SPVuK[Q`\bo1D>p=Rd_=EMej@/&-!=Qun[PX-gZ4W8&/9`g;g"F8g'.,K1Z
%G*:/&nKqZHC!ga],!@'h*;(RT:cFG[el/Mdo6?C?gaf,F'2^'jDMnKhpJHSJ<&KKjXWlHPjS?,$*:aa'mZsDT<a%6nB"_9*<D0%9
%9"UBUnFW3@FAglPg;NI9%^k"r(T%HY[tb\*A#EC_LDPLIQrko&aUbE$MAUPrDk]i)%=ri#9!(893hf4I$;WkS&j6kI`0DOB@G84h
%(FTdC/uWcd/jEuZWUeCKp+:4GA>rH0OekZQ95L+f3j#+e=0r+>eg!q('c&:E51-m$3$g%O-Ff44BkWCq/iX2L]Tk3%fT`10^4KSY
%.*<5(?+>mUjj1&K`a>@=6cjSh;0cAHN,0NB+5F4@h`\/O+CFA2CY.8m#Ut:oTd/:6g3$k*q(4jKd2GCi6E<JnQFT7HX1=nYNmo/W
%B\2@F_;m&KkDZ$2#18#p@1.Qum4uonU(P%EOp+98dQ4`WX1Ta+';M6)_$M3%^E`jL'Bd]Dq)t2ZU[*WjB^3niNP@[/VhKN76hVj0
%N:W5S6,/<JL7VmUbY_CA<dTTY6nbqVFC-\nj3[&$5$8'[b?!,^5lEEU..sRmU@R]Gl"(a,JS&<uA#e%9W(*l#?nRS'KM&]":1Z':
%CE/Iehn6:e41L_Jc];kE$^EHSL;?-g:i3',S/PCUDSLV9CnjjdS"=si)eg6n)r[%ASrRZW_O<-kg5%B()j7+/K8l*-Jr4t$cr0VI
%BH;N1%$8.f>B"r!'`f"tM\IPN6=Mr^;49NYg/Ut<3nb7c#F=nRTfN4,E"J.3>@QnT>E.mhJ?Tfm<a2;4l?G`8(Brg!8N1c;[)Z=6
%&(@m#':jY1Im@eu3=qYo+O:d;HR[_ga,6JO#q4=.\8VJuV<'=.7t;cp-pY!?LJ[hFJ/2e0Vl:ofmHT<6W-PtNNiogm\C+rbDT_`g
%mck'+<=Yts?GCa-m/g:pgnhXiKlW4@]XLq?/TPt:WXp1V*=;L*WT[Ld3BH^oQ<82\?;"^0`i)!-\cgnYMdKH3,#/lb$u<1QQK'20
%4hT8+BFm3of4@V:N?DW9JH;W<b0L[`'N?e60%9p<8ba#m5K?hpNa.1-Iu_.ur:]QNs1i?dqd7X`Vn9^V3EOnJ.Dob>d\[eJ*(p;S
%0&U3ZK-sc=Ihg2^J)VukrUKdZcen`sl,0u+?Tp\<s*FE$@)'`hjo$8"E!#M.gj]1[o=l=fIslXW^H[:YIs_+go_7Oh:]G]dIe2C9
%YE/^3\pOAQq9-7fDbn-<s)n)+q<@4S0@*F<?iU)dIm@sOh!k%)%tFQ,S+$=e.sJU=~>
%AI9_PrivateDataEnd
